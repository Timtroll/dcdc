
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08008d30  08008d30  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d30  08008d30  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001968  20000014  08008d4c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08008d4c  0002197c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020514  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000421c  00000000  00000000  00040558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a20  00000000  00000000  00044778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00046198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002150b  00000000  00000000  000479b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ce9  00000000  00000000  00068ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc5a6  00000000  00000000  0007fba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c14a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d14  00000000  00000000  0014c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c1c 	.word	0x08008c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08008c1c 	.word	0x08008c1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08a      	sub	sp, #40	; 0x28
 80001e4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
 8000200:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000208:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800020a:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <MX_ADC1_Init+0xdc>)
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000216:	4b29      	ldr	r3, [pc, #164]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000218:	2200      	movs	r2, #0
 800021a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <MX_ADC1_Init+0xdc>)
 800021e:	2200      	movs	r2, #0
 8000220:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000222:	4b26      	ldr	r3, [pc, #152]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022a:	4b24      	ldr	r3, [pc, #144]	; (80002bc <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000230:	4b22      	ldr	r3, [pc, #136]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000232:	2201      	movs	r2, #1
 8000234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <MX_ADC1_Init+0xdc>)
 800023e:	2201      	movs	r2, #1
 8000240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000242:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MX_ADC1_Init+0xdc>)
 800024c:	2204      	movs	r2, #4
 800024e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000252:	2200      	movs	r2, #0
 8000254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800025c:	4817      	ldr	r0, [pc, #92]	; (80002bc <MX_ADC1_Init+0xdc>)
 800025e:	f000 ffa9 	bl	80011b4 <HAL_ADC_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000268:	f000 fd70 	bl	8000d4c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000270:	f107 031c 	add.w	r3, r7, #28
 8000274:	4619      	mov	r1, r3
 8000276:	4811      	ldr	r0, [pc, #68]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000278:	f001 fbf0 	bl	8001a5c <HAL_ADCEx_MultiModeConfigChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000282:	f000 fd63 	bl	8000d4c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000286:	2306      	movs	r3, #6
 8000288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028a:	2301      	movs	r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <MX_ADC1_Init+0xdc>)
 80002a4:	f001 f918 	bl	80014d8 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002ae:	f000 fd4d 	bl	8000d4c <Error_Handler>
  }

}
 80002b2:	bf00      	nop
 80002b4:	3728      	adds	r7, #40	; 0x28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20001670 	.word	0x20001670

080002c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	463b      	mov	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002d6:	4b27      	ldr	r3, [pc, #156]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <MX_ADC2_Init+0xb8>)
 80002da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002dc:	4b25      	ldr	r3, [pc, #148]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002e2:	4b24      	ldr	r3, [pc, #144]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002ee:	4b21      	ldr	r3, [pc, #132]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <MX_ADC2_Init+0xb4>)
 8000304:	2201      	movs	r2, #1
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_ADC2_Init+0xb4>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <MX_ADC2_Init+0xb4>)
 8000310:	2201      	movs	r2, #1
 8000312:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_ADC2_Init+0xb4>)
 8000316:	2200      	movs	r2, #0
 8000318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_ADC2_Init+0xb4>)
 800031e:	2204      	movs	r2, #4
 8000320:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_ADC2_Init+0xb4>)
 8000324:	2200      	movs	r2, #0
 8000326:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_ADC2_Init+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800032e:	4811      	ldr	r0, [pc, #68]	; (8000374 <MX_ADC2_Init+0xb4>)
 8000330:	f000 ff40 	bl	80011b4 <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800033a:	f000 fd07 	bl	8000d4c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800033e:	230c      	movs	r3, #12
 8000340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000342:	2301      	movs	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <MX_ADC2_Init+0xb4>)
 800035c:	f001 f8bc 	bl	80014d8 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000366:	f000 fcf1 	bl	8000d4c <Error_Handler>
  }

}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20001620 	.word	0x20001620
 8000378:	50000100 	.word	0x50000100

0800037c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08e      	sub	sp, #56	; 0x38
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800039c:	d16d      	bne.n	800047a <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800039e:	4b5e      	ldr	r3, [pc, #376]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a5c      	ldr	r2, [pc, #368]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 80003a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80003a8:	4b5b      	ldr	r3, [pc, #364]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10b      	bne.n	80003c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80003b0:	4b5a      	ldr	r3, [pc, #360]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a59      	ldr	r2, [pc, #356]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b57      	ldr	r3, [pc, #348]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c4:	623b      	str	r3, [r7, #32]
 80003c6:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b54      	ldr	r3, [pc, #336]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a53      	ldr	r2, [pc, #332]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d2:	6153      	str	r3, [r2, #20]
 80003d4:	4b51      	ldr	r3, [pc, #324]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003dc:	61fb      	str	r3, [r7, #28]
 80003de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b4e      	ldr	r3, [pc, #312]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a4d      	ldr	r2, [pc, #308]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b4b      	ldr	r3, [pc, #300]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003f4:	61bb      	str	r3, [r7, #24]
 80003f6:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003f8:	2303      	movs	r3, #3
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fc:	2303      	movs	r3, #3
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	4619      	mov	r1, r3
 800040a:	4845      	ldr	r0, [pc, #276]	; (8000520 <HAL_ADC_MspInit+0x1a4>)
 800040c:	f001 ff48 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000410:	2303      	movs	r3, #3
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000414:	2303      	movs	r3, #3
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000420:	4619      	mov	r1, r3
 8000422:	4840      	ldr	r0, [pc, #256]	; (8000524 <HAL_ADC_MspInit+0x1a8>)
 8000424:	f001 ff3c 	bl	80022a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000428:	4b3f      	ldr	r3, [pc, #252]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 800042a:	4a40      	ldr	r2, [pc, #256]	; (800052c <HAL_ADC_MspInit+0x1b0>)
 800042c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800042e:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000434:	4b3c      	ldr	r3, [pc, #240]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800043a:	4b3b      	ldr	r3, [pc, #236]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000440:	4b39      	ldr	r3, [pc, #228]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000446:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000448:	4b37      	ldr	r3, [pc, #220]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 800044a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000450:	4b35      	ldr	r3, [pc, #212]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000452:	2220      	movs	r2, #32
 8000454:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000456:	4b34      	ldr	r3, [pc, #208]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800045c:	4832      	ldr	r0, [pc, #200]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 800045e:	f001 fd05 	bl	8001e6c <HAL_DMA_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000468:	f000 fc70 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
 8000472:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <HAL_ADC_MspInit+0x1ac>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000478:	e049      	b.n	800050e <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <HAL_ADC_MspInit+0x1b4>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d144      	bne.n	800050e <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	4a23      	ldr	r2, [pc, #140]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 800048c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800048e:	4b22      	ldr	r3, [pc, #136]	; (8000518 <HAL_ADC_MspInit+0x19c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10b      	bne.n	80004ae <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a20      	ldr	r2, [pc, #128]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b1b      	ldr	r3, [pc, #108]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a1a      	ldr	r2, [pc, #104]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_ADC_MspInit+0x1a0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004de:	230c      	movs	r3, #12
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e2:	2303      	movs	r3, #3
 80004e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ee:	4619      	mov	r1, r3
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_ADC_MspInit+0x1a4>)
 80004f2:	f001 fed5 	bl	80022a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004f6:	2304      	movs	r3, #4
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fa:	2303      	movs	r3, #3
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000506:	4619      	mov	r1, r3
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <HAL_ADC_MspInit+0x1a8>)
 800050a:	f001 fec9 	bl	80022a0 <HAL_GPIO_Init>
}
 800050e:	bf00      	nop
 8000510:	3738      	adds	r7, #56	; 0x38
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000030 	.word	0x20000030
 800051c:	40021000 	.word	0x40021000
 8000520:	48000800 	.word	0x48000800
 8000524:	48000400 	.word	0x48000400
 8000528:	200016c0 	.word	0x200016c0
 800052c:	40020008 	.word	0x40020008
 8000530:	50000100 	.word	0x50000100

08000534 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_DMA_Init+0x58>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a13      	ldr	r2, [pc, #76]	; (800058c <MX_DMA_Init+0x58>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_DMA_Init+0x58>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2103      	movs	r1, #3
 8000556:	200b      	movs	r0, #11
 8000558:	f001 fc5e 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055c:	200b      	movs	r0, #11
 800055e:	f001 fc77 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2103      	movs	r1, #3
 8000566:	200e      	movs	r0, #14
 8000568:	f001 fc56 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800056c:	200e      	movs	r0, #14
 800056e:	f001 fc6f 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2103      	movs	r1, #3
 8000576:	200f      	movs	r0, #15
 8000578:	f001 fc4e 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800057c:	200f      	movs	r0, #15
 800057e:	f001 fc67 	bl	8001e50 <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000034 	.word	0x20000034
 80005c0:	20000088 	.word	0x20000088

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000288 	.word	0x20000288
 80005f4:	200002dc 	.word	0x200002dc

080005f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b09a      	sub	sp, #104	; 0x68
 80005fc:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_FREERTOS_Init+0x9c>)
 8000600:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 800060a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fa6e 	bl	8005af2 <osMessageCreate>
 8000616:	4602      	mov	r2, r0
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_FREERTOS_Init+0xa0>)
 800061a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FREERTOS_Init+0xa4>)
 800061e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f9fb 	bl	8005a32 <osThreadCreate>
 800063c:	4602      	mov	r2, r0
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_FREERTOS_Init+0xa8>)
 8000640:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityLow, 0, 128);
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_FREERTOS_Init+0xac>)
 8000644:	f107 0420 	add.w	r4, r7, #32
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f9e8 	bl	8005a32 <osThreadCreate>
 8000662:	4602      	mov	r2, r0
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_FREERTOS_Init+0xb0>)
 8000666:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityLow, 0, 128);
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_FREERTOS_Init+0xb4>)
 800066a:	1d3c      	adds	r4, r7, #4
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f005 f9d7 	bl	8005a32 <osThreadCreate>
 8000684:	4602      	mov	r2, r0
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_FREERTOS_Init+0xb8>)
 8000688:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800068a:	bf00      	nop
 800068c:	3768      	adds	r7, #104	; 0x68
 800068e:	46bd      	mov	sp, r7
 8000690:	bdb0      	pop	{r4, r5, r7, pc}
 8000692:	bf00      	nop
 8000694:	08008c34 	.word	0x08008c34
 8000698:	2000170c 	.word	0x2000170c
 800069c:	08008c50 	.word	0x08008c50
 80006a0:	20001708 	.word	0x20001708
 80006a4:	08008c7c 	.word	0x08008c7c
 80006a8:	20001710 	.word	0x20001710
 80006ac:	08008ca8 	.word	0x08008ca8
 80006b0:	20001704 	.word	0x20001704

080006b4 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <StartDefaultTask+0x5c>)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fa3c 	bl	8005b44 <osMessageGet>
	if (event.status == osEventMessage) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b10      	cmp	r3, #16
 80006d0:	d11a      	bne.n	8000708 <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 80006d2:	6939      	ldr	r1, [r7, #16]
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <StartDefaultTask+0x60>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	b2c9      	uxtb	r1, r1
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <StartDefaultTask+0x64>)
 80006de:	5499      	strb	r1, [r3, r2]
		num_cell++;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <StartDefaultTask+0x60>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <StartDefaultTask+0x60>)
 80006ea:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <StartDefaultTask+0x60>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <StartDefaultTask+0x64>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <StartDefaultTask+0x4e>
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <StartDefaultTask+0x60>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b64      	cmp	r3, #100	; 0x64
 8000700:	d102      	bne.n	8000708 <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <StartDefaultTask+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f005 f9de 	bl	8005aca <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 800070e:	e7d5      	b.n	80006bc <StartDefaultTask+0x8>
 8000710:	2000170c 	.word	0x2000170c
 8000714:	200006dc 	.word	0x200006dc
 8000718:	200006e0 	.word	0x200006e0

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_GPIO_Init+0x74>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <MX_GPIO_Init+0x74>)
 8000728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0x74>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0x74>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_GPIO_Init+0x74>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_GPIO_Init+0x74>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_GPIO_Init+0x74>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <MX_GPIO_Init+0x74>)
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_GPIO_Init+0x74>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_GPIO_Init+0x74>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <MX_GPIO_Init+0x74>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_GPIO_Init+0x74>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0a8      	sub	sp, #160	; 0xa0
 8000798:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800079a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80007a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ac:	2254      	movs	r2, #84	; 0x54
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f008 fa2a 	bl	8008c0a <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 fa23 	bl	8008c0a <memset>
  HRTIM_SimpleOCChannelCfgTypeDef pSimpleOCChannelCfg = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]

  hhrtim1.Instance = HRTIM1;
 80007dc:	4bc9      	ldr	r3, [pc, #804]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80007de:	4aca      	ldr	r2, [pc, #808]	; (8000b08 <MX_HRTIM1_Init+0x374>)
 80007e0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80007e2:	4bc8      	ldr	r3, [pc, #800]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80007e8:	4bc6      	ldr	r3, [pc, #792]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80007ee:	48c5      	ldr	r0, [pc, #788]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80007f0:	f001 fec8 	bl	8002584 <HAL_HRTIM_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_HRTIM1_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 faa7 	bl	8000d4c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 80007fe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800080c:	2305      	movs	r3, #5
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000812:	2308      	movs	r3, #8
 8000814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000818:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800081c:	461a      	mov	r2, r3
 800081e:	2105      	movs	r1, #5
 8000820:	48b8      	ldr	r0, [pc, #736]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000822:	f001 ff7b 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 800082c:	f000 fa8e 	bl	8000d4c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DMASrcAddress = 0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 800083c:	2300      	movs	r3, #0
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000840:	2301      	movs	r3, #1
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000844:	2300      	movs	r3, #0
 8000846:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000848:	2300      	movs	r3, #0
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800084c:	2300      	movs	r3, #0
 800084e:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000854:	2300      	movs	r3, #0
 8000856:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000858:	2300      	movs	r3, #0
 800085a:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800085c:	2300      	movs	r3, #0
 800085e:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000860:	2300      	movs	r3, #0
 8000862:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000868:	461a      	mov	r2, r3
 800086a:	2105      	movs	r1, #5
 800086c:	48a5      	ldr	r0, [pc, #660]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 800086e:	f002 f8e4 	bl	8002a3a <HAL_HRTIM_WaveformTimerConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8000878:	f000 fa68 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800087c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000880:	461a      	mov	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	489f      	ldr	r0, [pc, #636]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000886:	f001 ff49 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 8000890:	f000 fa5c 	bl	8000d4c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DMASrcAddress = 0x0000;
 800089c:	2300      	movs	r3, #0
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008a8:	2300      	movs	r3, #0
 80008aa:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80008b4:	2300      	movs	r3, #0
 80008b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80008d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008d4:	461a      	mov	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	488a      	ldr	r0, [pc, #552]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80008da:	f002 f8ae 	bl	8002a3a <HAL_HRTIM_WaveformTimerConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 80008e4:	f000 fa32 	bl	8000d4c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80008e8:	2300      	movs	r3, #0
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80008f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008f8:	461a      	mov	r2, r3
 80008fa:	2101      	movs	r1, #1
 80008fc:	4881      	ldr	r0, [pc, #516]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80008fe:	f002 f89c 	bl	8002a3a <HAL_HRTIM_WaveformTimerConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_HRTIM1_Init+0x178>
  {
    Error_Handler();
 8000908:	f000 fa20 	bl	8000d4c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 800090c:	2300      	movs	r3, #0
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000910:	2300      	movs	r3, #0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000914:	2301      	movs	r3, #1
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800091c:	461a      	mov	r2, r3
 800091e:	2102      	movs	r1, #2
 8000920:	4878      	ldr	r0, [pc, #480]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000922:	f002 f88a 	bl	8002a3a <HAL_HRTIM_WaveformTimerConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_HRTIM1_Init+0x19c>
  {
    Error_Handler();
 800092c:	f000 fa0e 	bl	8000d4c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000930:	2300      	movs	r3, #0
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000934:	2300      	movs	r3, #0
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000938:	2301      	movs	r3, #1
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000946:	461a      	mov	r2, r3
 8000948:	2103      	movs	r1, #3
 800094a:	486e      	ldr	r0, [pc, #440]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 800094c:	f002 f875 	bl	8002a3a <HAL_HRTIM_WaveformTimerConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 8000956:	f000 f9f9 	bl	8000d4c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2201      	movs	r2, #1
 8000980:	2100      	movs	r1, #0
 8000982:	4860      	ldr	r0, [pc, #384]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000984:	f002 f8cb 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_HRTIM1_Init+0x1fe>
  {
    Error_Handler();
 800098e:	f000 f9dd 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2204      	movs	r2, #4
 8000998:	2101      	movs	r1, #1
 800099a:	485a      	ldr	r0, [pc, #360]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 800099c:	f002 f8bf 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 80009a6:	f000 f9d1 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2210      	movs	r2, #16
 80009b0:	2102      	movs	r1, #2
 80009b2:	4854      	ldr	r0, [pc, #336]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80009b4:	f002 f8b3 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_HRTIM1_Init+0x22e>
  {
    Error_Handler();
 80009be:	f000 f9c5 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	2103      	movs	r1, #3
 80009ca:	484e      	ldr	r0, [pc, #312]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80009cc:	f002 f8a7 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_HRTIM1_Init+0x246>
  {
    Error_Handler();
 80009d6:	f000 f9b9 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2202      	movs	r2, #2
 80009e0:	2100      	movs	r1, #0
 80009e2:	4848      	ldr	r0, [pc, #288]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80009e4:	f002 f89b 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_HRTIM1_Init+0x25e>
  {
    Error_Handler();
 80009ee:	f000 f9ad 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2208      	movs	r2, #8
 80009f8:	2101      	movs	r1, #1
 80009fa:	4842      	ldr	r0, [pc, #264]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 80009fc:	f002 f88f 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_HRTIM1_Init+0x276>
  {
    Error_Handler();
 8000a06:	f000 f9a1 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2220      	movs	r2, #32
 8000a10:	2102      	movs	r1, #2
 8000a12:	483c      	ldr	r0, [pc, #240]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a14:	f002 f883 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8000a1e:	f000 f995 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	2103      	movs	r1, #3
 8000a2a:	4836      	ldr	r0, [pc, #216]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a2c:	f002 f877 	bl	8002b1e <HAL_HRTIM_WaveformOutputConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 8000a36:	f000 f989 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2101      	movs	r1, #1
 8000a42:	4830      	ldr	r0, [pc, #192]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a44:	f001 fe6a 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_HRTIM1_Init+0x2be>
  {
    Error_Handler();
 8000a4e:	f000 f97d 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000a52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a56:	461a      	mov	r2, r3
 8000a58:	2102      	movs	r1, #2
 8000a5a:	482a      	ldr	r0, [pc, #168]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a5c:	f001 fe5e 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8000a66:	f000 f971 	bl	8000d4c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000a6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2103      	movs	r1, #3
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a74:	f001 fe52 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_HRTIM1_Init+0x2ee>
  {
    Error_Handler();
 8000a7e:	f000 f965 	bl	8000d4c <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 8000a82:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000a8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2104      	movs	r1, #4
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000a94:	f001 fe42 	bl	800271c <HAL_HRTIM_TimeBaseConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_HRTIM1_Init+0x30e>
  {
    Error_Handler();
 8000a9e:	f000 f955 	bl	8000d4c <Error_Handler>
  }
  pSimpleOCChannelCfg.Mode = HRTIM_BASICOCMODE_TOGGLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
  pSimpleOCChannelCfg.Pulse = 0xFFFD;
 8000aa6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000aaa:	613b      	str	r3, [r7, #16]
  pSimpleOCChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  pSimpleOCChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pSimpleOCChannelCfg) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abc:	2104      	movs	r1, #4
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000ac0:	f001 fe54 	bl	800276c <HAL_HRTIM_SimpleOCChannelConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_HRTIM1_Init+0x33a>
  {
    Error_Handler();
 8000aca:	f000 f93f 	bl	8000d4c <Error_Handler>
  }
  pSimplePWMChannelCfg.Pulse = 0xFFFD;
 8000ace:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000ad2:	603b      	str	r3, [r7, #0]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pSimplePWMChannelCfg) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000ae6:	f001 ff00 	bl	80028ea <HAL_HRTIM_SimplePWMChannelConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_HRTIM1_Init+0x360>
  {
    Error_Handler();
 8000af0:	f000 f92c 	bl	8000d4c <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_HRTIM1_Init+0x370>)
 8000af6:	f000 f829 	bl	8000b4c <HAL_HRTIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	37a0      	adds	r7, #160	; 0xa0
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20001714 	.word	0x20001714
 8000b08:	40017400 	.word	0x40017400

08000b0c <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_HRTIM_MspInit+0x38>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d10b      	bne.n	8000b36 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_HRTIM_MspInit+0x3c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_HRTIM_MspInit+0x3c>)
 8000b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_HRTIM_MspInit+0x3c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40017400 	.word	0x40017400
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <HAL_HRTIM_MspPostInit+0xdc>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d157      	bne.n	8000c1e <HAL_HRTIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_HRTIM_MspPostInit+0xe0>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bb6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000bc8:	230d      	movs	r3, #13
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4817      	ldr	r0, [pc, #92]	; (8000c30 <HAL_HRTIM_MspPostInit+0xe4>)
 8000bd4:	f001 fb64 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8000bea:	2303      	movs	r3, #3
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <HAL_HRTIM_MspPostInit+0xe8>)
 8000bf6:	f001 fb53 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000bfa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000c0c:	230d      	movs	r3, #13
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f001 fb41 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40017400 	.word	0x40017400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 fa84 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f813 	bl	8000c6a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f7ff fd6a 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f7ff fc74 	bl	8000534 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c4c:	f000 f982 	bl	8000f54 <MX_USART1_UART_Init>
  MX_HRTIM1_Init();
 8000c50:	f7ff fda0 	bl	8000794 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fac4 	bl	80001e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c58:	f7ff fb32 	bl	80002c0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  init_uart_data_transfer();
 8000c5c:	f007 feb6 	bl	80089cc <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000c60:	f7ff fcca 	bl	80005f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c64:	f004 fede 	bl	8005a24 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x30>

08000c6a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b096      	sub	sp, #88	; 0x58
 8000c6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c74:	2228      	movs	r2, #40	; 0x28
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f007 ffc6 	bl	8008c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cb4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fa8c 	bl	80031dc <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000cca:	f000 f83f 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 f97e 	bl	8003fec <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cf6:	f000 f829 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 8000cfa:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cfe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fbd3 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d1c:	f000 f816 	bl	8000d4c <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3758      	adds	r7, #88	; 0x58
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fa1b 	bl	8001174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_MspInit+0x70>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_MspInit+0x70>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_MspInit+0x70>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_MspInit+0x70>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_MspInit+0x70>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_MspInit+0x70>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	f06f 0009 	mvn.w	r0, #9
 8000d9a:	f001 f83d 	bl	8001e18 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2101      	movs	r1, #1
 8000da2:	f06f 0004 	mvn.w	r0, #4
 8000da6:	f001 f837 	bl	8001e18 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2101      	movs	r1, #1
 8000dae:	f06f 0003 	mvn.w	r0, #3
 8000db2:	f001 f831 	bl	8001e18 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f001 f82b 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2019      	movs	r0, #25
 8000de6:	f001 f817 	bl	8001e18 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000dea:	2019      	movs	r0, #25
 8000dec:	f001 f830 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_InitTick+0x9c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_InitTick+0x9c>)
 8000df6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_InitTick+0x9c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fb20 	bl	8004458 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e18:	f003 fafc 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8000e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_InitTick+0xa0>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e4e:	f003 fc6b 	bl	8004728 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e5a:	f003 fc9b 	bl	8004794 <HAL_TIM_Base_Start_IT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	431bde83 	.word	0x431bde83
 8000e74:	200017f0 	.word	0x200017f0
 8000e78:	40012c00 	.word	0x40012c00

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA1_Channel1_IRQHandler+0x10>)
 8000eb6:	f001 f8f6 	bl	80020a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200016c0 	.word	0x200016c0

08000ec4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA1_Channel4_IRQHandler+0x10>)
 8000eca:	f001 f8ec 	bl	80020a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20001830 	.word	0x20001830

08000ed8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA1_Channel5_IRQHandler+0x10>)
 8000ede:	f001 f8e2 	bl	80020a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20001874 	.word	0x20001874

08000eec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ef2:	f003 fc79 	bl	80047e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200017f0 	.word	0x200017f0

08000f00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <USART1_IRQHandler+0x24>)
 8000f06:	f003 fff3 	bl	8004ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <USART1_IRQHandler+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d102      	bne.n	8000f1e <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <USART1_IRQHandler+0x24>)
 8000f1a:	f007 fd9f 	bl	8008a5c <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200018b8 	.word	0x200018b8

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0x28>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SystemInit+0x28>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x28>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART1_UART_Init+0x58>)
 8000f98:	f003 fe04 	bl	8004ba4 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f7ff fed3 	bl	8000d4c <Error_Handler>
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200018b8 	.word	0x200018b8
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a41      	ldr	r2, [pc, #260]	; (80010d8 <HAL_UART_MspInit+0x124>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d17b      	bne.n	80010ce <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_UART_MspInit+0x128>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001016:	2307      	movs	r3, #7
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	482f      	ldr	r0, [pc, #188]	; (80010e0 <HAL_UART_MspInit+0x12c>)
 8001022:	f001 f93d 	bl	80022a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <HAL_UART_MspInit+0x134>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_UART_MspInit+0x130>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_UART_MspInit+0x130>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_UART_MspInit+0x130>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001056:	4823      	ldr	r0, [pc, #140]	; (80010e4 <HAL_UART_MspInit+0x130>)
 8001058:	f000 ff08 	bl	8001e6c <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001062:	f7ff fe73 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0x130>)
 800106a:	66da      	str	r2, [r3, #108]	; 0x6c
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x130>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_UART_MspInit+0x138>)
 8001074:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_UART_MspInit+0x13c>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_UART_MspInit+0x138>)
 800107a:	2210      	movs	r2, #16
 800107c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_UART_MspInit+0x138>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_MspInit+0x138>)
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_UART_MspInit+0x138>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UART_MspInit+0x138>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_UART_MspInit+0x138>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_UART_MspInit+0x138>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <HAL_UART_MspInit+0x138>)
 80010a4:	f000 fee2 	bl	8001e6c <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80010ae:	f7ff fe4d 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_UART_MspInit+0x138>)
 80010b6:	669a      	str	r2, [r3, #104]	; 0x68
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <HAL_UART_MspInit+0x138>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2105      	movs	r1, #5
 80010c2:	2025      	movs	r0, #37	; 0x25
 80010c4:	f000 fea8 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010c8:	2025      	movs	r0, #37	; 0x25
 80010ca:	f000 fec1 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	20001874 	.word	0x20001874
 80010e8:	40020058 	.word	0x40020058
 80010ec:	20001830 	.word	0x20001830
 80010f0:	40020044 	.word	0x40020044

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800110a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
	ldr	r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001112:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopForever+0x16>)
	cmp	r2, r3
 800111a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff ff03 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f007 fd43 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fd87 	bl	8000c38 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800112c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001130:	08008d38 	.word	0x08008d38
	ldr	r0, =_sdata
 8001134:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001138:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800113c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001140:	2000197c 	.word	0x2000197c

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 fe52 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fe36 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdfa 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20001938 	.word	0x20001938

0800119c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;  
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20001938 	.word	0x20001938

080011b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09a      	sub	sp, #104	; 0x68
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e172      	b.n	80014ba <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d176      	bne.n	80012d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d152      	bne.n	8001294 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f8b7 	bl	800037c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d13b      	bne.n	8001294 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fce3 	bl	8001be8 <ADC_Disable>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d12f      	bne.n	8001294 <HAL_ADC_Init+0xe0>
 8001234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001238:	2b00      	cmp	r3, #0
 800123a:	d12b      	bne.n	8001294 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001244:	f023 0302 	bic.w	r3, r3, #2
 8001248:	f043 0202 	orr.w	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800125e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800126e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001270:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <HAL_ADC_Init+0x310>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_ADC_Init+0x314>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9a      	lsrs	r2, r3, #18
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001286:	e002      	b.n	800128e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3b01      	subs	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f9      	bne.n	8001288 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b0:	d110      	bne.n	80012d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f023 0312 	bic.w	r3, r3, #18
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f040 80df 	bne.w	80014a0 <HAL_ADC_Init+0x2ec>
 80012e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80da 	bne.w	80014a0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80d2 	bne.w	80014a0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001304:	f043 0202 	orr.w	r2, r3, #2
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_ADC_Init+0x318>)
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001318:	d102      	bne.n	8001320 <HAL_ADC_Init+0x16c>
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_ADC_Init+0x31c>)
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e002      	b.n	8001326 <HAL_ADC_Init+0x172>
 8001320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001324:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <HAL_ADC_Init+0x192>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x192>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_ADC_Init+0x194>
 8001346:	2300      	movs	r3, #0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11c      	bne.n	8001386 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800134c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d010      	beq.n	8001374 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_ADC_Init+0x1ba>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_Init+0x1ba>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_ADC_Init+0x1bc>
 800136e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001370:	2b00      	cmp	r3, #0
 8001372:	d108      	bne.n	8001386 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	431a      	orrs	r2, r3
 8001382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001384:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	035b      	lsls	r3, r3, #13
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001390:	2a01      	cmp	r2, #1
 8001392:	d002      	beq.n	800139a <HAL_ADC_Init+0x1e6>
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	e000      	b.n	800139c <HAL_ADC_Init+0x1e8>
 800139a:	2200      	movs	r2, #0
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ac:	4313      	orrs	r3, r2
 80013ae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d11b      	bne.n	80013f2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	3b01      	subs	r3, #1
 80013c8:	045a      	lsls	r2, r3, #17
 80013ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013cc:	4313      	orrs	r3, r2
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
 80013d4:	e00d      	b.n	80013f2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013de:	f043 0220 	orr.w	r2, r3, #32
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d007      	beq.n	800140a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	4313      	orrs	r3, r2
 8001404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001406:	4313      	orrs	r3, r2
 8001408:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b00      	cmp	r3, #0
 8001416:	d114      	bne.n	8001442 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
 8001430:	039a      	lsls	r2, r3, #14
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4313      	orrs	r3, r2
 800143c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800143e:	4313      	orrs	r3, r2
 8001440:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_ADC_Init+0x320>)
 800144a:	4013      	ands	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001452:	430b      	orrs	r3, r1
 8001454:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10c      	bne.n	8001478 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f023 010f 	bic.w	r1, r3, #15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
 8001476:	e007      	b.n	8001488 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 020f 	bic.w	r2, r2, #15
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
 800149e:	e00a      	b.n	80014b6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f023 0312 	bic.w	r3, r3, #18
 80014a8:	f043 0210 	orr.w	r2, r3, #16
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3768      	adds	r7, #104	; 0x68
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	50000300 	.word	0x50000300
 80014d0:	50000100 	.word	0x50000100
 80014d4:	fff0c007 	.word	0xfff0c007

080014d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d8:	b480      	push	{r7}
 80014da:	b09b      	sub	sp, #108	; 0x6c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x22>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e2a5      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x56e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f040 8289 	bne.w	8001a24 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d81c      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	461a      	mov	r2, r3
 800152e:	231f      	movs	r3, #31
 8001530:	4093      	lsls	r3, r2
 8001532:	43db      	mvns	r3, r3
 8001534:	4019      	ands	r1, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	e063      	b.n	800161c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b09      	cmp	r3, #9
 800155a:	d81e      	bhi.n	800159a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	3b1e      	subs	r3, #30
 8001570:	221f      	movs	r2, #31
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	4019      	ands	r1, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3b1e      	subs	r3, #30
 800158c:	fa00 f203 	lsl.w	r2, r0, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
 8001598:	e040      	b.n	800161c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b0e      	cmp	r3, #14
 80015a0:	d81e      	bhi.n	80015e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	3b3c      	subs	r3, #60	; 0x3c
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	4019      	ands	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	3b3c      	subs	r3, #60	; 0x3c
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
 80015de:	e01d      	b.n	800161c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	3b5a      	subs	r3, #90	; 0x5a
 80015f4:	221f      	movs	r2, #31
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4019      	ands	r1, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	3b5a      	subs	r3, #90	; 0x5a
 8001610:	fa00 f203 	lsl.w	r2, r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80e5 	bne.w	80017f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d91c      	bls.n	800166e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6999      	ldr	r1, [r3, #24]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	3b1e      	subs	r3, #30
 8001646:	2207      	movs	r2, #7
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	4019      	ands	r1, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6898      	ldr	r0, [r3, #8]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	3b1e      	subs	r3, #30
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	e019      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6959      	ldr	r1, [r3, #20]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	2207      	movs	r2, #7
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	4019      	ands	r1, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6898      	ldr	r0, [r3, #8]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	fa00 f203 	lsl.w	r2, r0, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	3b01      	subs	r3, #1
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d84f      	bhi.n	8001764 <HAL_ADC_ConfigChannel+0x28c>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_ADC_ConfigChannel+0x1f4>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016ff 	.word	0x080016ff
 80016d4:	08001721 	.word	0x08001721
 80016d8:	08001743 	.word	0x08001743
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016e2:	4b9e      	ldr	r3, [pc, #632]	; (800195c <HAL_ADC_ConfigChannel+0x484>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	0691      	lsls	r1, r2, #26
 80016ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ee:	430a      	orrs	r2, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016fc:	e07e      	b.n	80017fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001704:	4b95      	ldr	r3, [pc, #596]	; (800195c <HAL_ADC_ConfigChannel+0x484>)
 8001706:	4013      	ands	r3, r2
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	0691      	lsls	r1, r2, #26
 800170e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001710:	430a      	orrs	r2, r1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800171c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800171e:	e06d      	b.n	80017fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001726:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_ADC_ConfigChannel+0x484>)
 8001728:	4013      	ands	r3, r2
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	0691      	lsls	r1, r2, #26
 8001730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001732:	430a      	orrs	r2, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800173e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001740:	e05c      	b.n	80017fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_ADC_ConfigChannel+0x484>)
 800174a:	4013      	ands	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	0691      	lsls	r1, r2, #26
 8001752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001754:	430a      	orrs	r2, r1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001760:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001762:	e04b      	b.n	80017fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	069b      	lsls	r3, r3, #26
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001786:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800178e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	069b      	lsls	r3, r3, #26
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	069b      	lsls	r3, r3, #26
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	069b      	lsls	r3, r3, #26
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d10a      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80017f4:	e001      	b.n	80017fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80017fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_ADC_ConfigChannel+0x344>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x344>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_ADC_ConfigChannel+0x346>
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 810b 	bne.w	8001a3a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d00f      	beq.n	800184c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800184a:	e049      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b09      	cmp	r3, #9
 800186c:	d91c      	bls.n	80018a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6999      	ldr	r1, [r3, #24]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	3b1b      	subs	r3, #27
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	4019      	ands	r1, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6898      	ldr	r0, [r3, #8]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	3b1b      	subs	r3, #27
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	619a      	str	r2, [r3, #24]
 80018a6:	e01b      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6959      	ldr	r1, [r3, #20]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_ADC_ConfigChannel+0x488>)
 80018e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018fc:	2b11      	cmp	r3, #17
 80018fe:	d105      	bne.n	800190c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001910:	2b12      	cmp	r3, #18
 8001912:	f040 8092 	bne.w	8001a3a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 808b 	bne.w	8001a3a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192c:	d102      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x45c>
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_ADC_ConfigChannel+0x48c>)
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e002      	b.n	800193a <HAL_ADC_ConfigChannel+0x462>
 8001934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001938:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10f      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x490>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x490>
 8001956:	2301      	movs	r3, #1
 8001958:	e007      	b.n	800196a <HAL_ADC_ConfigChannel+0x492>
 800195a:	bf00      	nop
 800195c:	83fff000 	.word	0x83fff000
 8001960:	50000300 	.word	0x50000300
 8001964:	50000100 	.word	0x50000100
 8001968:	2300      	movs	r3, #0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d150      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800196e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x4b8>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x4b8>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_ADC_ConfigChannel+0x4ba>
 8001990:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001992:	2b00      	cmp	r3, #0
 8001994:	d13c      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d11d      	bne.n	80019da <HAL_ADC_ConfigChannel+0x502>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a6:	d118      	bne.n	80019da <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_ADC_ConfigChannel+0x57c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_ADC_ConfigChannel+0x580>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9a      	lsrs	r2, r3, #18
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ca:	e002      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019d8:	e02e      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b11      	cmp	r3, #17
 80019e0:	d10b      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x522>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019f8:	e01e      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d11a      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a0e:	e013      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a22:	e00a      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a38:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	376c      	adds	r7, #108	; 0x6c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b099      	sub	sp, #100	; 0x64
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a74:	d102      	bne.n	8001a7c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	e002      	b.n	8001a82 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a80:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0a2      	b.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e09b      	b.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d17f      	bne.n	8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d179      	bne.n	8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001abe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d040      	beq.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ada:	035b      	lsls	r3, r3, #13
 8001adc:	430b      	orrs	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d15c      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001b26:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d14b      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	6811      	ldr	r1, [r2, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6892      	ldr	r2, [r2, #8]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b46:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b48:	e03c      	b.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b54:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d123      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001b98:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d112      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ba6:	f023 030f 	bic.w	r3, r3, #15
 8001baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bac:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bae:	e009      	b.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bc4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3764      	adds	r7, #100	; 0x64
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	50000100 	.word	0x50000100
 8001be4:	50000300 	.word	0x50000300

08001be8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <ADC_Disable+0x2c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <ADC_Disable+0x2c>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <ADC_Disable+0x2e>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d040      	beq.n	8001c9c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030d 	and.w	r3, r3, #13
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10f      	bne.n	8001c48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0202 	orr.w	r2, r2, #2
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c40:	f7ff faac 	bl	800119c <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c46:	e022      	b.n	8001c8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f043 0210 	orr.w	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e01c      	b.n	8001c9e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c64:	f7ff fa9a 	bl	800119c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d90d      	bls.n	8001c8e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e007      	b.n	8001c9e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d0e3      	beq.n	8001c64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2a:	f7ff ff61 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff ffb1 	bl	8001d9c <NVIC_EncodePriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff54 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e037      	b.n	8001ef2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e98:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e9c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f9c3 	bl	8002260 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}  
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Start_IT+0x20>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e04a      	b.n	8001fb0 <HAL_DMA_Start_IT+0xb6>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d13a      	bne.n	8001fa2 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f957 	bl	8002204 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 020e 	orr.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e00f      	b.n	8001f90 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 020a 	orr.w	r2, r2, #10
 8001f7e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d008      	beq.n	8001fdc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e020      	b.n	800201e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020e 	bic.w	r2, r2, #14
 8001fea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800203c:	2b02      	cmp	r3, #2
 800203e:	d005      	beq.n	800204c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2204      	movs	r2, #4
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	e027      	b.n	800209c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 020e 	bic.w	r2, r2, #14
 800205a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
    } 
  }
  return status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2204      	movs	r2, #4
 80020c4:	409a      	lsls	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d024      	beq.n	8002118 <HAL_DMA_IRQHandler+0x72>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01f      	beq.n	8002118 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0204 	bic.w	r2, r2, #4
 80020f4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	2104      	movs	r1, #4
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002116:	e065      	b.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	2202      	movs	r2, #2
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_IRQHandler+0xdc>
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d027      	beq.n	8002182 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020a 	bic.w	r2, r2, #10
 800214e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	2102      	movs	r1, #2
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d035      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002180:	e030      	b.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2208      	movs	r2, #8
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d028      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 020e 	bic.w	r2, r2, #14
 80021aa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
    }
  }
}  
 80021e2:	e7ff      	b.n	80021e4 <HAL_DMA_IRQHandler+0x13e>
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d108      	bne.n	8002244 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002242:	e007      	b.n	8002254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <DMA_CalcBaseAndBitshift+0x34>)
 8002270:	4413      	add	r3, r2
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <DMA_CalcBaseAndBitshift+0x38>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	009a      	lsls	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <DMA_CalcBaseAndBitshift+0x3c>)
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	bffdfff8 	.word	0xbffdfff8
 8002298:	cccccccd 	.word	0xcccccccd
 800229c:	40020000 	.word	0x40020000

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	e14e      	b.n	800254e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8140 	beq.w	8002548 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x38>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	6939      	ldr	r1, [r7, #16]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d00b      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002368:	2b11      	cmp	r3, #17
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b12      	cmp	r3, #18
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0201 	and.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 809a 	beq.w	8002548 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_GPIO_Init+0x2cc>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_GPIO_Init+0x2cc>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2cc>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800242c:	4a50      	ldr	r2, [pc, #320]	; (8002570 <HAL_GPIO_Init+0x2d0>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x1e0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a46      	ldr	r2, [pc, #280]	; (8002574 <HAL_GPIO_Init+0x2d4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1dc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a45      	ldr	r2, [pc, #276]	; (8002578 <HAL_GPIO_Init+0x2d8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1d8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_GPIO_Init+0x2dc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1d4>
 8002470:	2303      	movs	r3, #3
 8002472:	e006      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002474:	2305      	movs	r3, #5
 8002476:	e004      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002478:	2302      	movs	r3, #2
 800247a:	e002      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002480:	2300      	movs	r3, #0
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	f002 0203 	and.w	r2, r2, #3
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	4093      	lsls	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002492:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_GPIO_Init+0x2d0>)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024c4:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f aea9 	bne.w	80022b0 <HAL_GPIO_Init+0x10>
  }
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000800 	.word	0x48000800
 800257c:	48000c00 	.word	0x48000c00
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0ba      	b.n	800270c <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02e      	beq.n	8002638 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <HAL_HRTIM_Init+0x190>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10b      	bne.n	80025fc <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80025e4:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_HRTIM_Init+0x194>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <HAL_HRTIM_Init+0x194>)
 80025ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b49      	ldr	r3, [pc, #292]	; (8002718 <HAL_HRTIM_Init+0x194>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800260a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002620:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe fa67 	bl	8000b0c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]
 8002684:	e03e      	b.n	8002704 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002686:	7dfa      	ldrb	r2, [r7, #23]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3318      	adds	r3, #24
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800269a:	7dfa      	ldrb	r2, [r7, #23]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	331c      	adds	r3, #28
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80026ae:	7dfa      	ldrb	r2, [r7, #23]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3320      	adds	r3, #32
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80026c2:	7dfa      	ldrb	r2, [r7, #23]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3324      	adds	r3, #36	; 0x24
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80026d6:	7dfa      	ldrb	r2, [r7, #23]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3328      	adds	r3, #40	; 0x28
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80026ea:	7dfa      	ldrb	r2, [r7, #23]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3330      	adds	r3, #48	; 0x30
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	3301      	adds	r3, #1
 8002702:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d9bd      	bls.n	8002686 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40017400 	.word	0x40017400
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d101      	bne.n	8002738 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
 8002736:	e015      	b.n	8002764 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d104      	bne.n	8002750 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fa19 	bl	8002b80 <HRTIM_MasterBase_Config>
 800274e:	e004      	b.n	800275a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fa42 	bl	8002bde <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_HRTIM_SimpleOCChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleOCChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t OCChannel,
                                                 HRTIM_SimpleOCChannelCfgTypeDef* pSimpleOCChannelCfg)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  uint32_t CompareUnit = (uint32_t)RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_HRTIM_BASICOCMODE(pSimpleOCChannelCfg->Mode));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimpleOCChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimpleOCChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimpleOCChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d101      	bne.n	800278e <HAL_HRTIM_SimpleOCChannelConfig+0x22>
  {
     return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	e0a9      	b.n	80028e2 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer compare unit */
  switch (OCChannel)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d01d      	beq.n	80027d8 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 800279c:	2b10      	cmp	r3, #16
 800279e:	d80b      	bhi.n	80027b8 <HAL_HRTIM_SimpleOCChannelConfig+0x4c>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d025      	beq.n	80027f0 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d802      	bhi.n	80027ae <HAL_HRTIM_SimpleOCChannelConfig+0x42>
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d015      	beq.n	80027d8 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 80027ac:	e02c      	b.n	8002808 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d012      	beq.n	80027d8 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d01c      	beq.n	80027f0 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 80027b6:	e027      	b.n	8002808 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d019      	beq.n	80027f0 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d804      	bhi.n	80027ca <HAL_HRTIM_SimpleOCChannelConfig+0x5e>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d015      	beq.n	80027f0 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d007      	beq.n	80027d8 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 80027c8:	e01e      	b.n	8002808 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ce:	d003      	beq.n	80027d8 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d4:	d00c      	beq.n	80027f0 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 80027d6:	e017      	b.n	8002808 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      CompareUnit = HRTIM_COMPAREUNIT_1;
 80027d8:	2301      	movs	r3, #1
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimpleOCChannelCfg->Pulse;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	440b      	add	r3, r1
 80027ea:	339c      	adds	r3, #156	; 0x9c
 80027ec:	601a      	str	r2, [r3, #0]
      break;
 80027ee:	e014      	b.n	800281a <HAL_HRTIM_SimpleOCChannelConfig+0xae>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      CompareUnit = HRTIM_COMPAREUNIT_2;
 80027f0:	2302      	movs	r3, #2
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimpleOCChannelCfg->Pulse;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	440b      	add	r3, r1
 8002802:	33a4      	adds	r3, #164	; 0xa4
 8002804:	601a      	str	r2, [r3, #0]
      break;
 8002806:	e008      	b.n	800281a <HAL_HRTIM_SimpleOCChannelConfig+0xae>
    }
  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2207      	movs	r2, #7
 800280c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002818:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b07      	cmp	r3, #7
 8002824:	d101      	bne.n	800282a <HAL_HRTIM_SimpleOCChannelConfig+0xbe>
  {
     return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e05b      	b.n	80028e2 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimpleOCChannelCfg->Polarity & HRTIM_OUTR_POL1);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimpleOCChannelCfg->IdleLevel & HRTIM_OUTR_IDLES1);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (pSimpleOCChannelCfg->Mode)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d019      	beq.n	800288a <HAL_HRTIM_SimpleOCChannelConfig+0x11e>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d00c      	beq.n	8002874 <HAL_HRTIM_SimpleOCChannelConfig+0x108>
 800285a:	2b01      	cmp	r3, #1
 800285c:	d120      	bne.n	80028a0 <HAL_HRTIM_SimpleOCChannelConfig+0x134>
  {
  case HRTIM_BASICOCMODE_TOGGLE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_HRTIM_SimpleOCChannelConfig+0xfe>
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002864:	2308      	movs	r3, #8
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e001      	b.n	800286e <HAL_HRTIM_SimpleOCChannelConfig+0x102>
      }
      else
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 800286a:	2310      	movs	r3, #16
 800286c:	61bb      	str	r3, [r7, #24]
      }
      OutputCfg.ResetSource = OutputCfg.SetSource;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	61fb      	str	r3, [r7, #28]
      break;
 8002872:	e022      	b.n	80028ba <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  case HRTIM_BASICOCMODE_ACTIVE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x114>
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 800287a:	2308      	movs	r3, #8
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e001      	b.n	8002884 <HAL_HRTIM_SimpleOCChannelConfig+0x118>
      }
      else
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002880:	2310      	movs	r3, #16
 8002882:	61bb      	str	r3, [r7, #24]
      }
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
      break;
 8002888:	e017      	b.n	80028ba <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  case HRTIM_BASICOCMODE_INACTIVE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	2b01      	cmp	r3, #1
 800288e:	d102      	bne.n	8002896 <HAL_HRTIM_SimpleOCChannelConfig+0x12a>
      {
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002890:	2308      	movs	r3, #8
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e001      	b.n	800289a <HAL_HRTIM_SimpleOCChannelConfig+0x12e>
      }
      else
      {
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002896:	2310      	movs	r3, #16
 8002898:	61fb      	str	r3, [r7, #28]
      }
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
      break;
 800289e:	e00c      	b.n	80028ba <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2207      	movs	r2, #7
 80028a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
      OutputCfg.SetSource   = HRTIM_OUTPUTSET_NONE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80028b8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b07      	cmp	r3, #7
 80028c4:	d101      	bne.n	80028ca <HAL_HRTIM_SimpleOCChannelConfig+0x15e>
  {
     return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00b      	b.n	80028e2 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  HRTIM_OutputConfig(hhrtim,
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb6a 	bl	8002fac <HRTIM_OutputConfig>
                     TimerIdx,
                     OCChannel,
                     &OutputCfg);

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3738      	adds	r7, #56	; 0x38
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08e      	sub	sp, #56	; 0x38
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d101      	bne.n	8002908 <HAL_HRTIM_SimplePWMChannelConfig+0x1e>
  {
     return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	e094      	b.n	8002a32 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_HRTIM_SimplePWMChannelConfig+0x2c>
 8002912:	2302      	movs	r3, #2
 8002914:	e08d      	b.n	8002a32 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer compare unit */
  switch (PWMChannel)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b10      	cmp	r3, #16
 800292a:	d01d      	beq.n	8002968 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 800292c:	2b10      	cmp	r3, #16
 800292e:	d80b      	bhi.n	8002948 <HAL_HRTIM_SimplePWMChannelConfig+0x5e>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d025      	beq.n	8002980 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 8002934:	2b02      	cmp	r3, #2
 8002936:	d802      	bhi.n	800293e <HAL_HRTIM_SimplePWMChannelConfig+0x54>
 8002938:	2b01      	cmp	r3, #1
 800293a:	d015      	beq.n	8002968 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 800293c:	e02c      	b.n	8002998 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d012      	beq.n	8002968 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d01c      	beq.n	8002980 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 8002946:	e027      	b.n	8002998 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d019      	beq.n	8002980 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d804      	bhi.n	800295a <HAL_HRTIM_SimplePWMChannelConfig+0x70>
 8002950:	2b20      	cmp	r3, #32
 8002952:	d015      	beq.n	8002980 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d007      	beq.n	8002968 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 8002958:	e01e      	b.n	8002998 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 800295a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295e:	d003      	beq.n	8002968 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d00c      	beq.n	8002980 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 8002966:	e017      	b.n	8002998 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	01db      	lsls	r3, r3, #7
 8002974:	440b      	add	r3, r1
 8002976:	339c      	adds	r3, #156	; 0x9c
 8002978:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 800297a:	2308      	movs	r3, #8
 800297c:	61bb      	str	r3, [r7, #24]
      break;
 800297e:	e018      	b.n	80029b2 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	440b      	add	r3, r1
 800298e:	33a4      	adds	r3, #164	; 0xa4
 8002990:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002992:	2310      	movs	r3, #16
 8002994:	61bb      	str	r3, [r7, #24]
      break;
 8002996:	e00c      	b.n	80029b2 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
    }
  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2207      	movs	r2, #7
 800299c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
      OutputCfg.SetSource   = HRTIM_OUTPUTSET_NONE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80029b0:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	d101      	bne.n	80029c2 <HAL_HRTIM_SimplePWMChannelConfig+0xd8>
  {
     return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e037      	b.n	8002a32 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80029de:	2300      	movs	r3, #0
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80029e2:	2300      	movs	r3, #0
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 80029e6:	2304      	movs	r3, #4
 80029e8:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fada 	bl	8002fac <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	01db      	lsls	r3, r3, #7
 8002a02:	4413      	add	r3, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	3301      	adds	r3, #1
 8002a18:	01db      	lsls	r3, r3, #7
 8002a1a:	4413      	add	r3, r2
 8002a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a1e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3738      	adds	r7, #56	; 0x38
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d101      	bne.n	8002a56 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	e05f      	b.n	8002b16 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e058      	b.n	8002b16 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d104      	bne.n	8002a84 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f8ee 	bl	8002c5e <HRTIM_MasterWaveform_Config>
 8002a82:	e004      	b.n	8002a8e <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f94f 	bl	8002d2c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3320      	adds	r3, #32
 8002aa2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3324      	adds	r3, #36	; 0x24
 8002ab8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	3328      	adds	r3, #40	; 0x28
 8002ace:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4403      	add	r3, r0
 8002ae2:	332c      	adds	r3, #44	; 0x2c
 8002ae4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6919      	ldr	r1, [r3, #16]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4403      	add	r3, r0
 8002af8:	3330      	adds	r3, #48	; 0x30
 8002afa:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fb0a 	bl	8003118 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d101      	bne.n	8002b3c <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e01d      	b.n	8002b78 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e016      	b.n	8002b78 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa23 	bl	8002fac <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 0307 	bic.w	r3, r3, #7
 8002b98:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0318 	bic.w	r3, r3, #24
 8002baa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6852      	ldr	r2, [r2, #4]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0307 	bic.w	r3, r3, #7
 8002c00:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0318 	bic.w	r3, r3, #24
 8002c12:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	4413      	add	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	01db      	lsls	r3, r3, #7
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3394      	adds	r3, #148	; 0x94
 8002c3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	01db      	lsls	r3, r3, #7
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3398      	adds	r3, #152	; 0x98
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002c78:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f023 0320 	bic.w	r3, r3, #32
 8002c80:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c92:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cb6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002cc8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002cda:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002cee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	01db      	lsls	r3, r3, #7
 8002d42:	4413      	add	r3, r2
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	440b      	add	r3, r1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	01db      	lsls	r3, r3, #7
 8002d70:	4413      	add	r3, r2
 8002d72:	33e8      	adds	r3, #232	; 0xe8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	01db      	lsls	r3, r3, #7
 8002d80:	4413      	add	r3, r2
 8002d82:	33e4      	adds	r3, #228	; 0xe4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002d90:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f023 0320 	bic.w	r3, r3, #32
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4313      	orrs	r3, r2
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4313      	orrs	r3, r2
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	4313      	orrs	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0e:	d103      	bne.n	8002e18 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	4313      	orrs	r3, r2
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f023 031f 	bic.w	r3, r3, #31
 8002e54:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e6a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d108      	bne.n	8002e90 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e84:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	6a3a      	ldr	r2, [r7, #32]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002e98:	d004      	beq.n	8002ea4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8002ea2:	d103      	bne.n	8002eac <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d108      	bne.n	8002ebe <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8002eb2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d843      	bhi.n	8002f52 <HRTIM_TimingUnitWaveform_Config+0x226>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee5 	.word	0x08002ee5
 8002ed4:	08002efb 	.word	0x08002efb
 8002ed8:	08002f11 	.word	0x08002f11
 8002edc:	08002f27 	.word	0x08002f27
 8002ee0:	08002f3d 	.word	0x08002f3d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002eea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61fb      	str	r3, [r7, #28]
      break;
 8002ef8:	e02c      	b.n	8002f54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f00:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61fb      	str	r3, [r7, #28]
      break;
 8002f0e:	e021      	b.n	8002f54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002f16:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]
      break;
 8002f24:	e016      	b.n	8002f54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f2c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61fb      	str	r3, [r7, #28]
      break;
 8002f3a:	e00b      	b.n	8002f54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f42:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61fb      	str	r3, [r7, #28]
      break;
 8002f50:	e000      	b.n	8002f54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002f52:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	01db      	lsls	r3, r3, #7
 8002f5e:	4413      	add	r3, r2
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	01db      	lsls	r3, r3, #7
 8002f6c:	4413      	add	r3, r2
 8002f6e:	33e8      	adds	r3, #232	; 0xe8
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	4413      	add	r3, r2
 8002f7e:	33e4      	adds	r3, #228	; 0xe4
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	4413      	add	r3, r2
 8002f8e:	33d4      	adds	r3, #212	; 0xd4
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	; 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop

08002fac <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	01db      	lsls	r3, r3, #7
 8002fc6:	4413      	add	r3, r2
 8002fc8:	33e4      	adds	r3, #228	; 0xe4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	01db      	lsls	r3, r3, #7
 8002fd6:	4413      	add	r3, r2
 8002fd8:	33b8      	adds	r3, #184	; 0xb8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]

  switch (Output)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d01d      	beq.n	8003020 <HRTIM_OutputConfig+0x74>
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d80b      	bhi.n	8003000 <HRTIM_OutputConfig+0x54>
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d02c      	beq.n	8003046 <HRTIM_OutputConfig+0x9a>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d802      	bhi.n	8002ff6 <HRTIM_OutputConfig+0x4a>
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d015      	beq.n	8003020 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 8002ff4:	e03c      	b.n	8003070 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d012      	beq.n	8003020 <HRTIM_OutputConfig+0x74>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d023      	beq.n	8003046 <HRTIM_OutputConfig+0x9a>
    break;
 8002ffe:	e037      	b.n	8003070 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d020      	beq.n	8003046 <HRTIM_OutputConfig+0x9a>
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d804      	bhi.n	8003012 <HRTIM_OutputConfig+0x66>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d01c      	beq.n	8003046 <HRTIM_OutputConfig+0x9a>
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d007      	beq.n	8003020 <HRTIM_OutputConfig+0x74>
    break;
 8003010:	e02e      	b.n	8003070 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003016:	d003      	beq.n	8003020 <HRTIM_OutputConfig+0x74>
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d013      	beq.n	8003046 <HRTIM_OutputConfig+0x9a>
    break;
 800301e:	e027      	b.n	8003070 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	01db      	lsls	r3, r3, #7
 800302c:	440b      	add	r3, r1
 800302e:	33bc      	adds	r3, #188	; 0xbc
 8003030:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	01db      	lsls	r3, r3, #7
 800303e:	440b      	add	r3, r1
 8003040:	33c0      	adds	r3, #192	; 0xc0
 8003042:	601a      	str	r2, [r3, #0]
      break;
 8003044:	e014      	b.n	8003070 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	440b      	add	r3, r1
 8003054:	33c4      	adds	r3, #196	; 0xc4
 8003056:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	01db      	lsls	r3, r3, #7
 8003064:	440b      	add	r3, r1
 8003066:	33c8      	adds	r3, #200	; 0xc8
 8003068:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800306a:	2310      	movs	r3, #16
 800306c:	61bb      	str	r3, [r7, #24]
      break;
 800306e:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003070:	22fe      	movs	r2, #254	; 0xfe
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003078:	43db      	mvns	r3, r3
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	4013      	ands	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4313      	orrs	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4313      	orrs	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d111      	bne.n	80030fc <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	01db      	lsls	r3, r3, #7
 8003104:	4413      	add	r3, r2
 8003106:	33e4      	adds	r3, #228	; 0xe4
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3724      	adds	r7, #36	; 0x24
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d851      	bhi.n	80031cc <HRTIM_ForceRegistersUpdate+0xb4>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HRTIM_ForceRegistersUpdate+0x18>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	0800315f 	.word	0x0800315f
 8003134:	08003175 	.word	0x08003175
 8003138:	0800318b 	.word	0x0800318b
 800313c:	080031a1 	.word	0x080031a1
 8003140:	080031b7 	.word	0x080031b7
 8003144:	08003149 	.word	0x08003149
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800315c:	e037      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0202 	orr.w	r2, r2, #2
 800316e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003172:	e02c      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0204 	orr.w	r2, r2, #4
 8003184:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003188:	e021      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800319e:	e016      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0210 	orr.w	r2, r2, #16
 80031b0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80031b4:	e00b      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80031ca:	e000      	b.n	80031ce <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80031cc:	bf00      	nop
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f000 bef4 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 816a 	beq.w	80034da <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003206:	4bb3      	ldr	r3, [pc, #716]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d00c      	beq.n	800322c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003212:	4bb0      	ldr	r3, [pc, #704]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d159      	bne.n	80032d2 <HAL_RCC_OscConfig+0xf6>
 800321e:	4bad      	ldr	r3, [pc, #692]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d152      	bne.n	80032d2 <HAL_RCC_OscConfig+0xf6>
 800322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003230:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003240:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d102      	bne.n	800325e <HAL_RCC_OscConfig+0x82>
 8003258:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0xae>
 800325e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003262:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003276:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800327a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003286:	4b93      	ldr	r3, [pc, #588]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003292:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800329e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 810c 	beq.w	80034d8 <HAL_RCC_OscConfig+0x2fc>
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 8106 	bne.w	80034d8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f000 be86 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x110>
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7c      	ldr	r2, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e030      	b.n	800334e <HAL_RCC_OscConfig+0x172>
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x134>
 80032f6:	4b77      	ldr	r3, [pc, #476]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a76      	ldr	r2, [pc, #472]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b74      	ldr	r3, [pc, #464]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a73      	ldr	r2, [pc, #460]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01e      	b.n	800334e <HAL_RCC_OscConfig+0x172>
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x15a>
 800331c:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6c      	ldr	r2, [pc, #432]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a69      	ldr	r2, [pc, #420]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0x172>
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a66      	ldr	r2, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800334e:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	f023 020f 	bic.w	r2, r3, #15
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	495d      	ldr	r1, [pc, #372]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d059      	beq.n	8003420 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd ff16 	bl	800119c <HAL_GetTick>
 8003370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003376:	f7fd ff11 	bl	800119c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d902      	bls.n	800338c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	f000 be29 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
 800338c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003390:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x1e2>
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x20e>
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033fe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0ab      	beq.n	8003376 <HAL_RCC_OscConfig+0x19a>
 800341e:	e05c      	b.n	80034da <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd febc 	bl	800119c <HAL_GetTick>
 8003424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342a:	f7fd feb7 	bl	800119c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d902      	bls.n	8003440 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	f000 bdcf 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
 8003440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003444:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800344c:	fa93 f3a3 	rbit	r3, r3
 8003450:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003454:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_RCC_OscConfig+0x296>
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x2c2>
 8003472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003476:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800348a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800348e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCC_OscConfig+0x2f8>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034b2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f002 021f 	and.w	r2, r2, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ab      	bne.n	800342a <HAL_RCC_OscConfig+0x24e>
 80034d2:	e002      	b.n	80034da <HAL_RCC_OscConfig+0x2fe>
 80034d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 816f 	beq.w	80037c8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034ea:	4bd0      	ldr	r3, [pc, #832]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f6:	4bcd      	ldr	r3, [pc, #820]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d16c      	bne.n	80035dc <HAL_RCC_OscConfig+0x400>
 8003502:	4bca      	ldr	r3, [pc, #808]	; (800382c <HAL_RCC_OscConfig+0x650>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d166      	bne.n	80035dc <HAL_RCC_OscConfig+0x400>
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003520:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0x362>
 8003538:	4bbc      	ldr	r3, [pc, #752]	; (800382c <HAL_RCC_OscConfig+0x650>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	e013      	b.n	8003566 <HAL_RCC_OscConfig+0x38a>
 800353e:	2302      	movs	r3, #2
 8003540:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003550:	2302      	movs	r3, #2
 8003552:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003556:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003562:	4bb2      	ldr	r3, [pc, #712]	; (800382c <HAL_RCC_OscConfig+0x650>)
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2202      	movs	r2, #2
 8003568:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800356c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003578:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3cc>
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f000 bd1b 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4ba0      	ldr	r3, [pc, #640]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	21f8      	movs	r1, #248	; 0xf8
 80035b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035c0:	fa91 f1a1 	rbit	r1, r1
 80035c4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035cc:	fab1 f181 	clz	r1, r1
 80035d0:	b2c9      	uxtb	r1, r1
 80035d2:	408b      	lsls	r3, r1
 80035d4:	4995      	ldr	r1, [pc, #596]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e0f5      	b.n	80037c8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8085 	beq.w	80036f2 <HAL_RCC_OscConfig+0x516>
 80035e8:	2301      	movs	r3, #1
 80035ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003608:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	461a      	mov	r2, r3
 8003610:	2301      	movs	r3, #1
 8003612:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fdc2 	bl	800119c <HAL_GetTick>
 8003618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361e:	f7fd fdbd 	bl	800119c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d902      	bls.n	8003634 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	f000 bcd5 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
 8003634:	2302      	movs	r3, #2
 8003636:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003646:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d102      	bne.n	8003664 <HAL_RCC_OscConfig+0x488>
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x650>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	e013      	b.n	800368c <HAL_RCC_OscConfig+0x4b0>
 8003664:	2302      	movs	r3, #2
 8003666:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003676:	2302      	movs	r3, #2
 8003678:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800367c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003688:	4b68      	ldr	r3, [pc, #416]	; (800382c <HAL_RCC_OscConfig+0x650>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2202      	movs	r2, #2
 800368e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003692:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003696:	fa92 f2a2 	rbit	r2, r2
 800369a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800369e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036a2:	fab2 f282 	clz	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f042 0220 	orr.w	r2, r2, #32
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f002 021f 	and.w	r2, r2, #31
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f202 	lsl.w	r2, r1, r2
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0af      	beq.n	800361e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036be:	4b5b      	ldr	r3, [pc, #364]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	21f8      	movs	r1, #248	; 0xf8
 80036ce:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036d6:	fa91 f1a1 	rbit	r1, r1
 80036da:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036de:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036e2:	fab1 f181 	clz	r1, r1
 80036e6:	b2c9      	uxtb	r1, r1
 80036e8:	408b      	lsls	r3, r1
 80036ea:	4950      	ldr	r1, [pc, #320]	; (800382c <HAL_RCC_OscConfig+0x650>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e06a      	b.n	80037c8 <HAL_RCC_OscConfig+0x5ec>
 80036f2:	2301      	movs	r3, #1
 80036f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003704:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fd fd3d 	bl	800119c <HAL_GetTick>
 8003722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fd fd38 	bl	800119c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d902      	bls.n	800373e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	f000 bc50 	b.w	8003fde <HAL_RCC_OscConfig+0xe02>
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x592>
 8003768:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_OscConfig+0x650>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	e013      	b.n	8003796 <HAL_RCC_OscConfig+0x5ba>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003780:	2302      	movs	r3, #2
 8003782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003786:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <HAL_RCC_OscConfig+0x650>)
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2202      	movs	r2, #2
 8003798:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800379c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037ac:	fab2 f282 	clz	r2, r2
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f042 0220 	orr.w	r2, r2, #32
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f002 021f 	and.w	r2, r2, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1af      	bne.n	8003728 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80da 	beq.w	800398c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d069      	beq.n	80038b6 <HAL_RCC_OscConfig+0x6da>
 80037e2:	2301      	movs	r3, #1
 80037e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_OscConfig+0x654>)
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	2301      	movs	r3, #1
 800380a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380c:	f7fd fcc6 	bl	800119c <HAL_GetTick>
 8003810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003814:	e00e      	b.n	8003834 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd fcc1 	bl	800119c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d906      	bls.n	8003834 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e3d9      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	10908120 	.word	0x10908120
 8003834:	2302      	movs	r3, #2
 8003836:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003846:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800384a:	2202      	movs	r2, #2
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003862:	2202      	movs	r2, #2
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003874:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4ba5      	ldr	r3, [pc, #660]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800387e:	2102      	movs	r1, #2
 8003880:	6019      	str	r1, [r3, #0]
 8003882:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f1a3 	rbit	r1, r3
 800388c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003890:	6019      	str	r1, [r3, #0]
  return result;
 8003892:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0b0      	beq.n	8003816 <HAL_RCC_OscConfig+0x63a>
 80038b4:	e06a      	b.n	800398c <HAL_RCC_OscConfig+0x7b0>
 80038b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038cc:	601a      	str	r2, [r3, #0]
  return result;
 80038ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	4b8c      	ldr	r3, [pc, #560]	; (8003b10 <HAL_RCC_OscConfig+0x934>)
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fc58 	bl	800119c <HAL_GetTick>
 80038ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	e009      	b.n	8003906 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fd fc53 	bl	800119c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e36b      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003906:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800393a:	2202      	movs	r2, #2
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	fa93 f2a3 	rbit	r2, r3
 8003948:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800394c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003952:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003956:	2102      	movs	r1, #2
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f1a3 	rbit	r1, r3
 8003964:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003968:	6019      	str	r1, [r3, #0]
  return result;
 800396a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1b2      	bne.n	80038f2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8158 	beq.w	8003c4c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4a56      	ldr	r2, [pc, #344]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	61d3      	str	r3, [r2, #28]
 80039ba:	4b54      	ldr	r3, [pc, #336]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039c2:	f107 0308 	add.w	r3, r7, #8
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f107 0308 	add.w	r3, r7, #8
 80039cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCC_OscConfig+0x938>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11a      	bne.n	8003a16 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <HAL_RCC_OscConfig+0x938>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_RCC_OscConfig+0x938>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ec:	f7fd fbd6 	bl	800119c <HAL_GetTick>
 80039f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	e009      	b.n	8003a0a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fd fbd1 	bl	800119c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e2e9      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <HAL_RCC_OscConfig+0x938>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x852>
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	e02f      	b.n	8003a8e <HAL_RCC_OscConfig+0x8b2>
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x876>
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a33      	ldr	r2, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a30      	ldr	r2, [pc, #192]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	e01d      	b.n	8003a8e <HAL_RCC_OscConfig+0x8b2>
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d10c      	bne.n	8003a76 <HAL_RCC_OscConfig+0x89a>
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4a2a      	ldr	r2, [pc, #168]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6213      	str	r3, [r2, #32]
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	e00b      	b.n	8003a8e <HAL_RCC_OscConfig+0x8b2>
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d06b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fd fb80 	bl	800119c <HAL_GetTick>
 8003a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00b      	b.n	8003aba <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fb7b 	bl	800119c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e291      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003aba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ae8:	601a      	str	r2, [r3, #0]
  return result;
 8003aea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d109      	bne.n	8003b18 <HAL_RCC_OscConfig+0x93c>
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <HAL_RCC_OscConfig+0x930>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x958>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	10908120 	.word	0x10908120
 8003b14:	40007000 	.word	0x40007000
 8003b18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	4bbb      	ldr	r3, [pc, #748]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b38:	2102      	movs	r1, #2
 8003b3a:	6011      	str	r1, [r2, #0]
 8003b3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	fa92 f1a2 	rbit	r1, r2
 8003b46:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b4a:	6011      	str	r1, [r2, #0]
  return result;
 8003b4c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	f002 021f 	and.w	r2, r2, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f202 	lsl.w	r2, r1, r2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d099      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x8c6>
 8003b6e:	e063      	b.n	8003c38 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b70:	f7fd fb14 	bl	800119c <HAL_GetTick>
 8003b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	e00b      	b.n	8003b92 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fb0f 	bl	800119c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e225      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003b92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b96:	2202      	movs	r2, #2
 8003b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bae:	2202      	movs	r2, #2
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fa93 f2a3 	rbit	r2, r3
 8003bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bc0:	601a      	str	r2, [r3, #0]
  return result;
 8003bc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d102      	bne.n	8003be2 <HAL_RCC_OscConfig+0xa06>
 8003bdc:	4b90      	ldr	r3, [pc, #576]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	e00d      	b.n	8003bfe <HAL_RCC_OscConfig+0xa22>
 8003be2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003be6:	2202      	movs	r2, #2
 8003be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c02:	2102      	movs	r1, #2
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	fa92 f1a2 	rbit	r1, r2
 8003c10:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c14:	6011      	str	r1, [r2, #0]
  return result;
 8003c16:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	fab2 f282 	clz	r2, r2
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f002 021f 	and.w	r2, r2, #31
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1a0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a76      	ldr	r2, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 81c2 	beq.w	8003fdc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c58:	4b71      	ldr	r3, [pc, #452]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f000 819c 	beq.w	8003f9e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	f040 8114 	bne.w	8003e9a <HAL_RCC_OscConfig+0xcbe>
 8003c72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c8a:	601a      	str	r2, [r3, #0]
  return result;
 8003c8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c90:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fa78 	bl	800119c <HAL_GetTick>
 8003cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb0:	e009      	b.n	8003cc6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fa73 	bl	800119c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e18b      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003cc6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cde:	601a      	str	r2, [r3, #0]
  return result;
 8003ce0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_RCC_OscConfig+0xb24>
 8003cfa:	4b49      	ldr	r3, [pc, #292]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e01b      	b.n	8003d38 <HAL_RCC_OscConfig+0xb5c>
 8003d00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fa93 f2a3 	rbit	r2, r3
 8003d14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	fa92 f1a2 	rbit	r1, r2
 8003d4c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d50:	6011      	str	r1, [r2, #0]
  return result;
 8003d52:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f042 0220 	orr.w	r2, r2, #32
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f002 021f 	and.w	r2, r2, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d19e      	bne.n	8003cb2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4925      	ldr	r1, [pc, #148]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003da8:	601a      	str	r2, [r3, #0]
  return result;
 8003daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd f9e9 	bl	800119c <HAL_GetTick>
 8003dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dce:	e009      	b.n	8003de4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd f9e4 	bl	800119c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0fc      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	fa93 f2a3 	rbit	r2, r3
 8003df8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dfc:	601a      	str	r2, [r3, #0]
  return result;
 8003dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0xc48>
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <HAL_RCC_OscConfig+0xc44>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	e01e      	b.n	8003e5c <HAL_RCC_OscConfig+0xc80>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	fa93 f2a3 	rbit	r2, r3
 8003e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	4b63      	ldr	r3, [pc, #396]	; (8003fe8 <HAL_RCC_OscConfig+0xe0c>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fa92 f1a2 	rbit	r1, r2
 8003e70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e74:	6011      	str	r1, [r2, #0]
  return result;
 8003e76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f042 0220 	orr.w	r2, r2, #32
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	f002 021f 	and.w	r2, r2, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d09b      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xbf4>
 8003e98:	e0a0      	b.n	8003fdc <HAL_RCC_OscConfig+0xe00>
 8003e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	fa93 f2a3 	rbit	r2, r3
 8003eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb2:	601a      	str	r2, [r3, #0]
  return result;
 8003eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f964 	bl	800119c <HAL_GetTick>
 8003ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd f95f 	bl	800119c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e077      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
 8003eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f06:	601a      	str	r2, [r3, #0]
  return result;
 8003f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d102      	bne.n	8003f28 <HAL_RCC_OscConfig+0xd4c>
 8003f22:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCC_OscConfig+0xe0c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0xd84>
 8003f28:	f107 0320 	add.w	r3, r7, #32
 8003f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f107 0320 	add.w	r3, r7, #32
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f107 0318 	add.w	r3, r7, #24
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	fa93 f2a3 	rbit	r2, r3
 8003f56:	f107 0314 	add.w	r3, r7, #20
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_RCC_OscConfig+0xe0c>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f107 0210 	add.w	r2, r7, #16
 8003f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	f107 0210 	add.w	r2, r7, #16
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	fa92 f1a2 	rbit	r1, r2
 8003f74:	f107 020c 	add.w	r2, r7, #12
 8003f78:	6011      	str	r1, [r2, #0]
  return result;
 8003f7a:	f107 020c 	add.w	r2, r7, #12
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	fab2 f282 	clz	r2, r2
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	f042 0220 	orr.w	r2, r2, #32
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f002 021f 	and.w	r2, r2, #31
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f202 	lsl.w	r2, r1, r2
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d19e      	bne.n	8003eda <HAL_RCC_OscConfig+0xcfe>
 8003f9c:	e01e      	b.n	8003fdc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e018      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_RCC_OscConfig+0xe0c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b09e      	sub	sp, #120	; 0x78
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e162      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4b90      	ldr	r3, [pc, #576]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d910      	bls.n	8004034 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b8d      	ldr	r3, [pc, #564]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 0207 	bic.w	r2, r3, #7
 800401a:	498b      	ldr	r1, [pc, #556]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b89      	ldr	r3, [pc, #548]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e14a      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b82      	ldr	r3, [pc, #520]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	497f      	ldr	r1, [pc, #508]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80dc 	beq.w	8004218 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d13c      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xf6>
 8004068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <HAL_RCC_ClockConfig+0xa6>
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	e00f      	b.n	80040b2 <HAL_RCC_ClockConfig+0xc6>
 8004092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004096:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	667b      	str	r3, [r7, #100]	; 0x64
 80040a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a4:	663b      	str	r3, [r7, #96]	; 0x60
 80040a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	4b67      	ldr	r3, [pc, #412]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80040b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ba:	fa92 f2a2 	rbit	r2, r2
 80040be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040c2:	fab2 f282 	clz	r2, r2
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	f042 0220 	orr.w	r2, r2, #32
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f002 021f 	and.w	r2, r2, #31
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f202 	lsl.w	r2, r1, r2
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d17b      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0f3      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d13c      	bne.n	8004164 <HAL_RCC_ClockConfig+0x178>
 80040ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <HAL_RCC_ClockConfig+0x128>
 800410e:	4b4f      	ldr	r3, [pc, #316]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	e00f      	b.n	8004134 <HAL_RCC_ClockConfig+0x148>
 8004114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
 8004122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004126:	643b      	str	r3, [r7, #64]	; 0x40
 8004128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004130:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004138:	63ba      	str	r2, [r7, #56]	; 0x38
 800413a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413c:	fa92 f2a2 	rbit	r2, r2
 8004140:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004144:	fab2 f282 	clz	r2, r2
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	f042 0220 	orr.w	r2, r2, #32
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f002 021f 	and.w	r2, r2, #31
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f202 	lsl.w	r2, r1, r2
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13a      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b2      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
 8004164:	2302      	movs	r3, #2
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_RCC_ClockConfig+0x1a0>
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	e00d      	b.n	80041a8 <HAL_RCC_ClockConfig+0x1bc>
 800418c:	2302      	movs	r3, #2
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	4b29      	ldr	r3, [pc, #164]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2202      	movs	r2, #2
 80041aa:	61ba      	str	r2, [r7, #24]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	fa92 f2a2 	rbit	r2, r2
 80041b2:	617a      	str	r2, [r7, #20]
  return result;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	fab2 f282 	clz	r2, r2
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f042 0220 	orr.w	r2, r2, #32
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f002 021f 	and.w	r2, r2, #31
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e079      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f023 0203 	bic.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	491a      	ldr	r1, [pc, #104]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e8:	f7fc ffd8 	bl	800119c <HAL_GetTick>
 80041ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f0:	f7fc ffd4 	bl	800119c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e061      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_ClockConfig+0x260>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 020c 	and.w	r2, r3, #12
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d1eb      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d214      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 0207 	bic.w	r2, r3, #7
 800422e:	4906      	ldr	r1, [pc, #24]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_RCC_ClockConfig+0x25c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e040      	b.n	80042ca <HAL_RCC_ClockConfig+0x2de>
 8004248:	40022000 	.word	0x40022000
 800424c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCC_ClockConfig+0x2e8>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	491a      	ldr	r1, [pc, #104]	; (80042d4 <HAL_RCC_ClockConfig+0x2e8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <HAL_RCC_ClockConfig+0x2e8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4912      	ldr	r1, [pc, #72]	; (80042d4 <HAL_RCC_ClockConfig+0x2e8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800428e:	f000 f829 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8004292:	4601      	mov	r1, r0
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCC_ClockConfig+0x2e8>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	22f0      	movs	r2, #240	; 0xf0
 800429e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	fa92 f2a2 	rbit	r2, r2
 80042a6:	60fa      	str	r2, [r7, #12]
  return result;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	fab2 f282 	clz	r2, r2
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	40d3      	lsrs	r3, r2
 80042b2:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <HAL_RCC_ClockConfig+0x2ec>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <HAL_RCC_ClockConfig+0x2f0>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RCC_ClockConfig+0x2f4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc fd84 	bl	8000dd0 <HAL_InitTick>
  
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3778      	adds	r7, #120	; 0x78
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	08008cf8 	.word	0x08008cf8
 80042dc:	20000000 	.word	0x20000000
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b08b      	sub	sp, #44	; 0x2c
 80042e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d002      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x30>
 800430e:	2b08      	cmp	r3, #8
 8004310:	d003      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x36>
 8004312:	e03c      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004316:	623b      	str	r3, [r7, #32]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004320:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004324:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	fa92 f2a2 	rbit	r2, r2
 800432c:	607a      	str	r2, [r7, #4]
  return result;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	fab2 f282 	clz	r2, r2
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	40d3      	lsrs	r3, r2
 8004338:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800433a:	5cd3      	ldrb	r3, [r2, r3]
 800433c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800433e:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	220f      	movs	r2, #15
 8004348:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	fa92 f2a2 	rbit	r2, r2
 8004350:	60fa      	str	r2, [r7, #12]
  return result;
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	fab2 f282 	clz	r2, r2
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	40d3      	lsrs	r3, r2
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800435e:	5cd3      	ldrb	r3, [r2, r3]
 8004360:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	fbb2 f2f3 	udiv	r2, r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e004      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	623b      	str	r3, [r7, #32]
      break;
 800438c:	e002      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004390:	623b      	str	r3, [r7, #32]
      break;
 8004392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004394:	6a3b      	ldr	r3, [r7, #32]
}
 8004396:	4618      	mov	r0, r3
 8004398:	372c      	adds	r7, #44	; 0x2c
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	007a1200 	.word	0x007a1200
 80043ac:	08008d10 	.word	0x08008d10
 80043b0:	08008d20 	.word	0x08008d20
 80043b4:	003d0900 	.word	0x003d0900

080043b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCC_GetHCLKFreq+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043d6:	f7ff ffef 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	603a      	str	r2, [r7, #0]
  return result;
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	fab2 f282 	clz	r2, r2
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	40d3      	lsrs	r3, r2
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	08008d08 	.word	0x08008d08

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800441a:	f7ff ffcd 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 800441e:	4601      	mov	r1, r0
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004428:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800442c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	fa92 f2a2 	rbit	r2, r2
 8004434:	603a      	str	r2, [r7, #0]
  return result;
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	fab2 f282 	clz	r2, r2
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	40d3      	lsrs	r3, r2
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	08008d08 	.word	0x08008d08

08004458 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	220f      	movs	r2, #15
 8004466:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004474:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RCC_GetClockConfig+0x60>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0207 	and.w	r2, r3, #7
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	601a      	str	r2, [r3, #0]
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40022000 	.word	0x40022000

080044bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b092      	sub	sp, #72	; 0x48
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80d0 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e0:	4b8e      	ldr	r3, [pc, #568]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10e      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b8b      	ldr	r3, [pc, #556]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4a8a      	ldr	r2, [pc, #552]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	61d3      	str	r3, [r2, #28]
 80044f8:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b85      	ldr	r3, [pc, #532]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b82      	ldr	r3, [pc, #520]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a81      	ldr	r2, [pc, #516]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fc fe3b 	bl	800119c <HAL_GetTick>
 8004526:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fc fe37 	bl	800119c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b64      	cmp	r3, #100	; 0x64
 8004536:	d901      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0ea      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b78      	ldr	r3, [pc, #480]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004548:	4b74      	ldr	r3, [pc, #464]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d07d      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004562:	429a      	cmp	r2, r3
 8004564:	d076      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	4b66      	ldr	r3, [pc, #408]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	461a      	mov	r2, r3
 8004590:	2301      	movs	r3, #1
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d045      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fc fde8 	bl	800119c <HAL_GetTick>
 80045cc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	e00a      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fc fde4 	bl	800119c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e095      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80045e6:	2302      	movs	r3, #2
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	2302      	movs	r3, #2
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	61fb      	str	r3, [r7, #28]
  return result;
 80045fe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f043 0302 	orr.w	r3, r3, #2
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d102      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004614:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	e007      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800461a:	2302      	movs	r3, #2
 800461c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2202      	movs	r2, #2
 800462c:	613a      	str	r2, [r7, #16]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	fa92 f2a2 	rbit	r2, r2
 8004634:	60fa      	str	r2, [r7, #12]
  return result;
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	fab2 f282 	clz	r2, r2
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	f002 021f 	and.w	r2, r2, #31
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f202 	lsl.w	r2, r1, r2
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0bd      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004654:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	492e      	ldr	r1, [pc, #184]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	4313      	orrs	r3, r2
 8004664:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	4a2a      	ldr	r2, [pc, #168]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004678:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004686:	4b25      	ldr	r3, [pc, #148]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4922      	ldr	r1, [pc, #136]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004694:	4313      	orrs	r3, r2
 8004696:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	491a      	ldr	r1, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4913      	ldr	r1, [pc, #76]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	490b      	ldr	r1, [pc, #44]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3748      	adds	r7, #72	; 0x48
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	40007000 	.word	0x40007000
 8004724:	10908100 	.word	0x10908100

08004728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e01d      	b.n	8004776 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f815 	bl	800477e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 f986 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_TIM_Base_Start_IT+0x50>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d00b      	beq.n	80047d6 <HAL_TIM_Base_Start_IT+0x42>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	00010007 	.word	0x00010007

080047e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0202 	mvn.w	r2, #2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f905 	bl	8004a3a <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8f7 	bl	8004a26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f908 	bl	8004a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d122      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d11b      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0204 	mvn.w	r2, #4
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8db 	bl	8004a3a <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8cd 	bl	8004a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8de 	bl	8004a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0208 	mvn.w	r2, #8
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2204      	movs	r2, #4
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8b1 	bl	8004a3a <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8a3 	bl	8004a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8b4 	bl	8004a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2208      	movs	r2, #8
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f887 	bl	8004a3a <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f879 	bl	8004a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f88a 	bl	8004a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0201 	mvn.w	r2, #1
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc f9de 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8f2 	bl	8004b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8e5 	bl	8004b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d10e      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f838 	bl	8004a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0220 	mvn.w	r2, #32
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8a5 	bl	8004b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a32      	ldr	r2, [pc, #200]	; (8004b54 <TIM_Base_SetConfig+0xdc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_Base_SetConfig+0x28>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x28>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <TIM_Base_SetConfig+0xe0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <TIM_Base_SetConfig+0xdc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <TIM_Base_SetConfig+0x6a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d00f      	beq.n	8004ae2 <TIM_Base_SetConfig+0x6a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <TIM_Base_SetConfig+0xe0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0x6a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a23      	ldr	r2, [pc, #140]	; (8004b5c <TIM_Base_SetConfig+0xe4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0x6a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <TIM_Base_SetConfig+0xe8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0x6a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <TIM_Base_SetConfig+0xec>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <TIM_Base_SetConfig+0xdc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0xc0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <TIM_Base_SetConfig+0xe4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0xc0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0d      	ldr	r2, [pc, #52]	; (8004b60 <TIM_Base_SetConfig+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0xc0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <TIM_Base_SetConfig+0xec>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800

08004b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e040      	b.n	8004c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc f9f4 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 faf2 	bl	80051cc <UART_SetConfig>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e022      	b.n	8004c38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fc68 	bl	80054d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fcef 	bl	8005614 <UART_CheckIdleState>
 8004c36:	4603      	mov	r3, r0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d164      	bne.n	8004d20 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_Transmit_DMA+0x22>
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e05d      	b.n	8004d22 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Transmit_DMA+0x34>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e056      	b.n	8004d22 <HAL_UART_Transmit_DMA+0xe2>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2221      	movs	r2, #33	; 0x21
 8004c9c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02a      	beq.n	8004cfc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_UART_Transmit_DMA+0xec>)
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_UART_Transmit_DMA+0xf0>)
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_UART_Transmit_DMA+0xf4>)
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4619      	mov	r1, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3328      	adds	r3, #40	; 0x28
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	f7fd f90e 	bl	8001efa <HAL_DMA_Start_IT>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e012      	b.n	8004d22 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d1a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e000      	b.n	8004d22 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	080057ff 	.word	0x080057ff
 8004d30:	0800584d 	.word	0x0800584d
 8004d34:	080058e7 	.word	0x080058e7

08004d38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d16c      	bne.n	8004e28 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_UART_Receive_DMA+0x22>
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e065      	b.n	8004e2a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Receive_DMA+0x34>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e05e      	b.n	8004e2a <HAL_UART_Receive_DMA+0xf2>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	88fa      	ldrh	r2, [r7, #6]
 8004d7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2222      	movs	r2, #34	; 0x22
 8004d8c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02a      	beq.n	8004dec <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <HAL_UART_Receive_DMA+0xfc>)
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <HAL_UART_Receive_DMA+0x100>)
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <HAL_UART_Receive_DMA+0x104>)
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	2200      	movs	r2, #0
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3324      	adds	r3, #36	; 0x24
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	f7fd f896 	bl	8001efa <HAL_DMA_Start_IT>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e01e      	b.n	8004e2a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e02:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e22:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	08005869 	.word	0x08005869
 8004e38:	080058cb 	.word	0x080058cb
 8004e3c:	080058e7 	.word	0x080058e7

08004e40 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d124      	bne.n	8004ec0 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e84:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d018      	beq.n	8004ec0 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e92:	2200      	movs	r2, #0
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fd f88c 	bl	8001fb8 <HAL_DMA_Abort>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd f99e 	bl	80021ec <HAL_DMA_GetError>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d104      	bne.n	8004ec0 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2210      	movs	r2, #16
 8004eba:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e013      	b.n	8004ee8 <HAL_UART_AbortReceive+0xa8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	220f      	movs	r2, #15
 8004ece:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0208 	orr.w	r2, r2, #8
 8004ede:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f16:	4013      	ands	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d113      	bne.n	8004f48 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8114 	beq.w	8005166 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
      }
      return;
 8004f46:	e10e      	b.n	8005166 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80d6 	beq.w	80050fc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80cb 	beq.w	80050fc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <HAL_UART_IRQHandler+0x9e>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xc6>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <HAL_UART_IRQHandler+0xee>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd6:	f043 0202 	orr.w	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d013      	beq.n	8005010 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005008:	f043 0208 	orr.w	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <HAL_UART_IRQHandler+0x14a>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8093 	beq.w	800516a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800506c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d004      	beq.n	8005086 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005082:	2b00      	cmp	r3, #0
 8005084:	d031      	beq.n	80050ea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fb99 	bl	80057be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d123      	bne.n	80050e2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b6:	4a30      	ldr	r2, [pc, #192]	; (8005178 <HAL_UART_IRQHandler+0x288>)
 80050b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc ffb3 	bl	800202a <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00e      	b.n	80050f8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f86c 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00a      	b.n	80050f8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f868 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e006      	b.n	80050f8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f864 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80050f6:	e038      	b.n	800516a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	bf00      	nop
    return;
 80050fa:	e036      	b.n	800516a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00d      	beq.n	8005122 <HAL_UART_IRQHandler+0x232>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc4e 	bl	80059bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005120:	e026      	b.n	8005170 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
    }
    return;
 8005146:	e012      	b.n	800516e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <HAL_UART_IRQHandler+0x280>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fc14 	bl	800598a <UART_EndTransmit_IT>
    return;
 8005162:	bf00      	nop
 8005164:	e004      	b.n	8005170 <HAL_UART_IRQHandler+0x280>
      return;
 8005166:	bf00      	nop
 8005168:	e002      	b.n	8005170 <HAL_UART_IRQHandler+0x280>
    return;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <HAL_UART_IRQHandler+0x280>
    return;
 800516e:	bf00      	nop
  }

}
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	0800595f 	.word	0x0800595f

0800517c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4ba2      	ldr	r3, [pc, #648]	; (8005484 <UART_SetConfig+0x2b8>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	430b      	orrs	r3, r1
 8005206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a90      	ldr	r2, [pc, #576]	; (8005488 <UART_SetConfig+0x2bc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d121      	bne.n	8005290 <UART_SetConfig+0xc4>
 800524c:	4b8f      	ldr	r3, [pc, #572]	; (800548c <UART_SetConfig+0x2c0>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d817      	bhi.n	8005288 <UART_SetConfig+0xbc>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0x94>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005271 	.word	0x08005271
 8005264:	0800527d 	.word	0x0800527d
 8005268:	08005283 	.word	0x08005283
 800526c:	08005277 	.word	0x08005277
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e01e      	b.n	80052b4 <UART_SetConfig+0xe8>
 8005276:	2302      	movs	r3, #2
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e01b      	b.n	80052b4 <UART_SetConfig+0xe8>
 800527c:	2304      	movs	r3, #4
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e018      	b.n	80052b4 <UART_SetConfig+0xe8>
 8005282:	2308      	movs	r3, #8
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	e015      	b.n	80052b4 <UART_SetConfig+0xe8>
 8005288:	2310      	movs	r3, #16
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	bf00      	nop
 800528e:	e011      	b.n	80052b4 <UART_SetConfig+0xe8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a7e      	ldr	r2, [pc, #504]	; (8005490 <UART_SetConfig+0x2c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d102      	bne.n	80052a0 <UART_SetConfig+0xd4>
 800529a:	2300      	movs	r3, #0
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e009      	b.n	80052b4 <UART_SetConfig+0xe8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7b      	ldr	r2, [pc, #492]	; (8005494 <UART_SetConfig+0x2c8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d102      	bne.n	80052b0 <UART_SetConfig+0xe4>
 80052aa:	2300      	movs	r3, #0
 80052ac:	77fb      	strb	r3, [r7, #31]
 80052ae:	e001      	b.n	80052b4 <UART_SetConfig+0xe8>
 80052b0:	2310      	movs	r3, #16
 80052b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	f040 8082 	bne.w	80053c4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d85e      	bhi.n	8005384 <UART_SetConfig+0x1b8>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x100>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005331 	.word	0x08005331
 80052d8:	08005385 	.word	0x08005385
 80052dc:	0800534d 	.word	0x0800534d
 80052e0:	08005385 	.word	0x08005385
 80052e4:	08005385 	.word	0x08005385
 80052e8:	08005385 	.word	0x08005385
 80052ec:	0800536d 	.word	0x0800536d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7ff f86e 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80052f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	005a      	lsls	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	b29b      	uxth	r3, r3
 800530c:	61bb      	str	r3, [r7, #24]
        break;
 800530e:	e03c      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7ff f880 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005314:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	005a      	lsls	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	61bb      	str	r3, [r7, #24]
        break;
 800532e:	e02c      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800533a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6852      	ldr	r2, [r2, #4]
 8005342:	fbb3 f3f2 	udiv	r3, r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	61bb      	str	r3, [r7, #24]
        break;
 800534a:	e01e      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534c:	f7fe ffca 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8005350:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	005a      	lsls	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	441a      	add	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	b29b      	uxth	r3, r3
 8005368:	61bb      	str	r3, [r7, #24]
        break;
 800536a:	e00e      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	fbb2 f3f3 	udiv	r3, r2, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	61bb      	str	r3, [r7, #24]
        break;
 8005382:	e002      	b.n	800538a <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
        break;
 8005388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d916      	bls.n	80053be <UART_SetConfig+0x1f2>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d212      	bcs.n	80053be <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f023 030f 	bic.w	r3, r3, #15
 80053a0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	897a      	ldrh	r2, [r7, #10]
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	e07d      	b.n	80054ba <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
 80053c2:	e07a      	b.n	80054ba <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d866      	bhi.n	8005498 <UART_SetConfig+0x2cc>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x204>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	08005413 	.word	0x08005413
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005499 	.word	0x08005499
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	08005499 	.word	0x08005499
 80053e8:	08005499 	.word	0x08005499
 80053ec:	08005499 	.word	0x08005499
 80053f0:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7fe ffec 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80053f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	085a      	lsrs	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	441a      	add	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	61bb      	str	r3, [r7, #24]
        break;
 8005410:	e045      	b.n	800549e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005412:	f7fe ffff 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005416:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	085a      	lsrs	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	61bb      	str	r3, [r7, #24]
        break;
 800542e:	e036      	b.n	800549e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800543a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6852      	ldr	r2, [r2, #4]
 8005442:	fbb3 f3f2 	udiv	r3, r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	61bb      	str	r3, [r7, #24]
        break;
 800544a:	e028      	b.n	800549e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544c:	f7fe ff4a 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8005450:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	085a      	lsrs	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	441a      	add	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	b29b      	uxth	r3, r3
 8005466:	61bb      	str	r3, [r7, #24]
        break;
 8005468:	e019      	b.n	800549e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	61bb      	str	r3, [r7, #24]
        break;
 8005480:	e00d      	b.n	800549e <UART_SetConfig+0x2d2>
 8005482:	bf00      	nop
 8005484:	efff69f3 	.word	0xefff69f3
 8005488:	40013800 	.word	0x40013800
 800548c:	40021000 	.word	0x40021000
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
        break;
 800549c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b0f      	cmp	r3, #15
 80054a2:	d908      	bls.n	80054b6 <UART_SetConfig+0x2ea>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d204      	bcs.n	80054b6 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	60da      	str	r2, [r3, #12]
 80054b4:	e001      	b.n	80054ba <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d10a      	bne.n	80055e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005622:	f7fb fdbb 	bl	800119c <HAL_GetTick>
 8005626:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10e      	bne.n	8005654 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f82a 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e020      	b.n	8005696 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d10e      	bne.n	8005680 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f814 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e00a      	b.n	8005696 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ae:	e05d      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d059      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fb fd70 	bl	800119c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <UART_WaitOnFlagUntilTimeout+0x30>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11b      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e042      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02b      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d123      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e00f      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d092      	beq.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b20      	cmp	r3, #32
 8005812:	d014      	beq.n	800583e <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800582a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800583c:	e002      	b.n	8005844 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f003 f944 	bl	8008acc <HAL_UART_TxCpltCallback>
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff fc8e 	bl	800517c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b20      	cmp	r3, #32
 800587c:	d01e      	beq.n	80058bc <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005894:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fc67 	bl	8005190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fc63 	bl	80051a4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d109      	bne.n	8005922 <UART_DMAError+0x3c>
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b21      	cmp	r3, #33	; 0x21
 8005912:	d106      	bne.n	8005922 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	f7ff ff39 	bl	8005794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d109      	bne.n	8005944 <UART_DMAError+0x5e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d106      	bne.n	8005944 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ff3d 	bl	80057be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005948:	f043 0210 	orr.w	r2, r3, #16
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f7ff fc31 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff fc1b 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f003 f88c 	bl	8008acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e2:	2b84      	cmp	r3, #132	; 0x84
 80059e4:	d005      	beq.n	80059f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	3303      	adds	r3, #3
 80059f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a06:	f3ef 8305 	mrs	r3, IPSR
 8005a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8005a0c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a28:	f001 fa94 	bl	8006f54 <vTaskStartScheduler>
  
  return osOK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a34:	b089      	sub	sp, #36	; 0x24
 8005a36:	af04      	add	r7, sp, #16
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <osThreadCreate+0x54>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01c      	beq.n	8005a86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685c      	ldr	r4, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681d      	ldr	r5, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691e      	ldr	r6, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ffb6 	bl	80059d0 <makeFreeRtosPriority>
 8005a64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6e:	9202      	str	r2, [sp, #8]
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	9100      	str	r1, [sp, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4632      	mov	r2, r6
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f001 f8b0 	bl	8006be0 <xTaskCreateStatic>
 8005a80:	4603      	mov	r3, r0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e01c      	b.n	8005ac0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685c      	ldr	r4, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a92:	b29e      	uxth	r6, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff98 	bl	80059d0 <makeFreeRtosPriority>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	9200      	str	r2, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	4632      	mov	r2, r6
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f001 f8ee 	bl	8006c92 <xTaskCreate>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d001      	beq.n	8005ac0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <osDelay+0x16>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	e000      	b.n	8005ae2 <osDelay+0x18>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fa02 	bl	8006eec <vTaskDelay>
  
  return osOK;
 8005ae8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005af2:	b590      	push	{r4, r7, lr}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d012      	beq.n	8005b2a <osMessageCreate+0x38>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68dc      	ldr	r4, [r3, #12]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4623      	mov	r3, r4
 8005b22:	f000 fb3b 	bl	800619c <xQueueGenericCreateStatic>
 8005b26:	4603      	mov	r3, r0
 8005b28:	e008      	b.n	8005b3c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	4619      	mov	r1, r3
 8005b36:	f000 fba3 	bl	8006280 <xQueueGenericCreate>
 8005b3a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd90      	pop	{r4, r7, pc}

08005b44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005b44:	b590      	push	{r4, r7, lr}
 8005b46:	b08b      	sub	sp, #44	; 0x2c
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	617b      	str	r3, [r7, #20]
    return event;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	461c      	mov	r4, r3
 8005b66:	f107 0314 	add.w	r3, r7, #20
 8005b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b72:	e054      	b.n	8005c1e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d103      	bne.n	8005b8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8a:	e009      	b.n	8005ba0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <osMessageGet+0x5c>
      ticks = 1;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ba0:	f7ff ff2e 	bl	8005a00 <inHandlerMode>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01c      	beq.n	8005be4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005baa:	f107 0220 	add.w	r2, r7, #32
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f000 fe28 	bl	800680c <xQueueReceiveFromISR>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d102      	bne.n	8005bc8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005bc2:	2310      	movs	r3, #16
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e001      	b.n	8005bcc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01d      	beq.n	8005c0e <osMessageGet+0xca>
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <osMessageGet+0xe4>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	e014      	b.n	8005c0e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005be4:	f107 0314 	add.w	r3, r7, #20
 8005be8:	3304      	adds	r3, #4
 8005bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bec:	4619      	mov	r1, r3
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f000 fd30 	bl	8006654 <xQueueReceive>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d102      	bne.n	8005c00 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e006      	b.n	8005c0e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <osMessageGet+0xc6>
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <osMessageGet+0xc8>
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	461c      	mov	r4, r3
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	372c      	adds	r7, #44	; 0x2c
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd90      	pop	{r4, r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005c32:	201c      	movs	r0, #28
 8005c34:	f002 fcf4 	bl	8008620 <pvPortMalloc>
 8005c38:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f98a 	bl	8005f64 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005c56:	687b      	ldr	r3, [r7, #4]
	}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b090      	sub	sp, #64	; 0x40
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	e7fe      	b.n	8005c92 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <xEventGroupWaitBits+0x52>
 8005c9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e7fe      	b.n	8005cb0 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <xEventGroupWaitBits+0x6c>
 8005cb8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e7fe      	b.n	8005cca <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ccc:	f001 fe1a 	bl	8007904 <xTaskGetSchedulerState>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <xEventGroupWaitBits+0x7c>
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <xEventGroupWaitBits+0x80>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <xEventGroupWaitBits+0x82>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <xEventGroupWaitBits+0x9a>
 8005ce6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e7fe      	b.n	8005cf8 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005cfa:	f001 f98f 	bl	800701c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0a:	f000 f909 	bl	8005f20 <prvTestWaitCondition>
 8005d0e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d028      	beq.n	8005d76 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e020      	b.n	8005d76 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
 8005d42:	e018      	b.n	8005d76 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d5e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d62:	1d18      	adds	r0, r3, #4
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f001 fb49 	bl	8007404 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005d76:	f001 f95f 	bl	8007038 <xTaskResumeAll>
 8005d7a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d031      	beq.n	8005de6 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d107      	bne.n	8005d98 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <xEventGroupWaitBits+0x190>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005d98:	f001 fe56 	bl	8007a48 <uxTaskResetEventItemValue>
 8005d9c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005da8:	f002 fb20 	bl	80083ec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005db8:	f000 f8b2 	bl	8005f20 <prvTestWaitCondition>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005dda:	f002 fb35 	bl	8008448 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3740      	adds	r7, #64	; 0x40
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <xEventGroupSetBits+0x30>
 8005e10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e7fe      	b.n	8005e22 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <xEventGroupSetBits+0x4e>
 8005e2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e7fe      	b.n	8005e40 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	3304      	adds	r3, #4
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005e4e:	f001 f8e5 	bl	800701c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005e64:	e03c      	b.n	8005ee0 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e84:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea0:	e008      	b.n	8005eb4 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d101      	bne.n	8005eb4 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d010      	beq.n	8005edc <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ed8:	f001 fb5a 	bl	8007590 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d1be      	bne.n	8005e66 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	401a      	ands	r2, r3
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005ef6:	f001 f89f 	bl	8007038 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	681b      	ldr	r3, [r3, #0]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3738      	adds	r7, #56	; 0x38
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff6e 	bl	8005df4 <xEventGroupSetBits>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e007      	b.n	8005f56 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d101      	bne.n	8005f56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005f56:	697b      	ldr	r3, [r7, #20]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 0208 	add.w	r2, r3, #8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f103 0208 	add.w	r2, r3, #8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f103 0208 	add.w	r2, r3, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d103      	bne.n	8006026 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e00c      	b.n	8006040 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3308      	adds	r3, #8
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e002      	b.n	8006034 <vListInsert+0x2e>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	d2f6      	bcs.n	800602e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6892      	ldr	r2, [r2, #8]
 800608e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6852      	ldr	r2, [r2, #4]
 8006098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d103      	bne.n	80060ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	1e5a      	subs	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <xQueueGenericReset+0x28>
 80060e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	e7fe      	b.n	80060f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80060f4:	f002 f97a 	bl	80083ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	441a      	add	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	3b01      	subs	r3, #1
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d114      	bne.n	8006174 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01a      	beq.n	8006188 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3310      	adds	r3, #16
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f9b8 	bl	80074cc <xTaskRemoveFromEventList>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d012      	beq.n	8006188 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <xQueueGenericReset+0xcc>)
 8006164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	e009      	b.n	8006188 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3310      	adds	r3, #16
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fef3 	bl	8005f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff feee 	bl	8005f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006188:	f002 f95e 	bl	8008448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800618c:	2301      	movs	r3, #1
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <xQueueGenericCreateStatic+0x28>
 80061b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c2:	e7fe      	b.n	80061c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <xQueueGenericCreateStatic+0x42>
 80061ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <xQueueGenericCreateStatic+0x4e>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <xQueueGenericCreateStatic+0x52>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <xQueueGenericCreateStatic+0x54>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <xQueueGenericCreateStatic+0x6c>
 80061f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e7fe      	b.n	8006206 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d102      	bne.n	8006214 <xQueueGenericCreateStatic+0x78>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <xQueueGenericCreateStatic+0x7c>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <xQueueGenericCreateStatic+0x7e>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <xQueueGenericCreateStatic+0x96>
 800621e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e7fe      	b.n	8006230 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006232:	2348      	movs	r3, #72	; 0x48
 8006234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b48      	cmp	r3, #72	; 0x48
 800623a:	d009      	beq.n	8006250 <xQueueGenericCreateStatic+0xb4>
 800623c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e7fe      	b.n	800624e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006262:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f842 	bl	80062fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006278:	4618      	mov	r0, r3
 800627a:	3730      	adds	r7, #48	; 0x30
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <xQueueGenericCreate+0x28>
 8006294:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	e7fe      	b.n	80062a6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e004      	b.n	80062be <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	fb02 f303 	mul.w	r3, r2, r3
 80062bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3348      	adds	r3, #72	; 0x48
 80062c2:	4618      	mov	r0, r3
 80062c4:	f002 f9ac 	bl	8008620 <pvPortMalloc>
 80062c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	3348      	adds	r3, #72	; 0x48
 80062d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062de:	79fa      	ldrb	r2, [r7, #7]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f805 	bl	80062fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80062f0:	69bb      	ldr	r3, [r7, #24]
	}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e002      	b.n	800631c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006328:	2101      	movs	r1, #1
 800632a:	69b8      	ldr	r0, [r7, #24]
 800632c:	f7ff fece 	bl	80060cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08e      	sub	sp, #56	; 0x38
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006346:	2300      	movs	r3, #0
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <xQueueGenericSend+0x30>
 8006354:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
 8006366:	e7fe      	b.n	8006366 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <xQueueGenericSend+0x3e>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <xQueueGenericSend+0x42>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <xQueueGenericSend+0x44>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <xQueueGenericSend+0x5c>
 8006380:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e7fe      	b.n	8006392 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d103      	bne.n	80063a2 <xQueueGenericSend+0x6a>
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <xQueueGenericSend+0x6e>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <xQueueGenericSend+0x70>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <xQueueGenericSend+0x88>
 80063ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	e7fe      	b.n	80063be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063c0:	f001 faa0 	bl	8007904 <xTaskGetSchedulerState>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <xQueueGenericSend+0x98>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueGenericSend+0x9c>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueGenericSend+0x9e>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <xQueueGenericSend+0xb6>
 80063da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ee:	f001 fffd 	bl	80083ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xQueueGenericSend+0xcc>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d129      	bne.n	8006458 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640a:	f000 fa7c 	bl	8006906 <prvCopyDataToQueue>
 800640e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f855 	bl	80074cc <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <xQueueGenericSend+0x1f0>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e00a      	b.n	8006450 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <xQueueGenericSend+0x1f0>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006450:	f001 fffa 	bl	8008448 <vPortExitCritical>
				return pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	e063      	b.n	8006520 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800645e:	f001 fff3 	bl	8008448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	e05c      	b.n	8006520 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f8ed 	bl	8007650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647a:	f001 ffe5 	bl	8008448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647e:	f000 fdcd 	bl	800701c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006482:	f001 ffb3 	bl	80083ec <vPortEnterCritical>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800648c:	b25b      	sxtb	r3, r3
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x164>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x17a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b2:	f001 ffc9 	bl	8008448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f8dc 	bl	800767c <xTaskCheckForTimeOut>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064cc:	f000 fb13 	bl	8006af6 <prvIsQueueFull>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 ff6c 	bl	80073bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e6:	f000 fa9e 	bl	8006a26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ea:	f000 fda5 	bl	8007038 <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af7c 	bne.w	80063ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <xQueueGenericSend+0x1f0>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e772      	b.n	80063ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650a:	f000 fa8c 	bl	8006a26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650e:	f000 fd93 	bl	8007038 <xTaskResumeAll>
 8006512:	e76c      	b.n	80063ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006516:	f000 fa86 	bl	8006a26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651a:	f000 fd8d 	bl	8007038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800651e:	2300      	movs	r3, #0
		}
	}
}
 8006520:	4618      	mov	r0, r3
 8006522:	3738      	adds	r7, #56	; 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08e      	sub	sp, #56	; 0x38
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <xQueueGenericSendFromISR+0x2c>
 8006544:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e7fe      	b.n	8006556 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <xQueueGenericSendFromISR+0x3a>
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <xQueueGenericSendFromISR+0x3e>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueGenericSendFromISR+0x40>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <xQueueGenericSendFromISR+0x58>
 8006570:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	e7fe      	b.n	8006582 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d103      	bne.n	8006592 <xQueueGenericSendFromISR+0x66>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <xQueueGenericSendFromISR+0x6a>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericSendFromISR+0x6c>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <xQueueGenericSendFromISR+0x84>
 800659c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065b0:	f001 fff8 	bl	80085a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065b4:	f3ef 8211 	mrs	r2, BASEPRI
 80065b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	61ba      	str	r2, [r7, #24]
 80065ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <xQueueGenericSendFromISR+0xb6>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d12c      	bne.n	800663c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f2:	f000 f988 	bl	8006906 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d112      	bne.n	8006626 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d016      	beq.n	8006636 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	3324      	adds	r3, #36	; 0x24
 800660c:	4618      	mov	r0, r3
 800660e:	f000 ff5d 	bl	80074cc <xTaskRemoveFromEventList>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00e      	beq.n	8006636 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e007      	b.n	8006636 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800662a:	3301      	adds	r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	b25a      	sxtb	r2, r3
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006636:	2301      	movs	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800663a:	e001      	b.n	8006640 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800663c:	2300      	movs	r3, #0
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800664c:	4618      	mov	r0, r3
 800664e:	3738      	adds	r7, #56	; 0x38
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <xQueueReceive+0x2e>
	__asm volatile
 800666e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	e7fe      	b.n	8006680 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <xQueueReceive+0x3c>
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <xQueueReceive+0x40>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <xQueueReceive+0x42>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <xQueueReceive+0x5a>
 800669a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	e7fe      	b.n	80066ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ae:	f001 f929 	bl	8007904 <xTaskGetSchedulerState>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <xQueueReceive+0x6a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <xQueueReceive+0x6e>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <xQueueReceive+0x70>
 80066c2:	2300      	movs	r3, #0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <xQueueReceive+0x88>
 80066c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	e7fe      	b.n	80066da <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80066dc:	f001 fe86 	bl	80083ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01f      	beq.n	800672c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f0:	f000 f973 	bl	80069da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	1e5a      	subs	r2, r3, #1
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00f      	beq.n	8006724 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	3310      	adds	r3, #16
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fedf 	bl	80074cc <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006714:	4b3c      	ldr	r3, [pc, #240]	; (8006808 <xQueueReceive+0x1b4>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006724:	f001 fe90 	bl	8008448 <vPortExitCritical>
				return pdPASS;
 8006728:	2301      	movs	r3, #1
 800672a:	e069      	b.n	8006800 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006732:	f001 fe89 	bl	8008448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006736:	2300      	movs	r3, #0
 8006738:	e062      	b.n	8006800 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	4618      	mov	r0, r3
 8006746:	f000 ff83 	bl	8007650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800674e:	f001 fe7b 	bl	8008448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006752:	f000 fc63 	bl	800701c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006756:	f001 fe49 	bl	80083ec <vPortEnterCritical>
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006760:	b25b      	sxtb	r3, r3
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d103      	bne.n	8006770 <xQueueReceive+0x11c>
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006776:	b25b      	sxtb	r3, r3
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d103      	bne.n	8006786 <xQueueReceive+0x132>
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006786:	f001 fe5f 	bl	8008448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800678a:	1d3a      	adds	r2, r7, #4
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f000 ff72 	bl	800767c <xTaskCheckForTimeOut>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d123      	bne.n	80067e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800679e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a0:	f000 f993 	bl	8006aca <prvIsQueueEmpty>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d017      	beq.n	80067da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	3324      	adds	r3, #36	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fe02 	bl	80073bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ba:	f000 f934 	bl	8006a26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067be:	f000 fc3b 	bl	8007038 <xTaskResumeAll>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d189      	bne.n	80066dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <xQueueReceive+0x1b4>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	e780      	b.n	80066dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067dc:	f000 f923 	bl	8006a26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067e0:	f000 fc2a 	bl	8007038 <xTaskResumeAll>
 80067e4:	e77a      	b.n	80066dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e8:	f000 f91d 	bl	8006a26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ec:	f000 fc24 	bl	8007038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f2:	f000 f96a 	bl	8006aca <prvIsQueueEmpty>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f43f af6f 	beq.w	80066dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006800:	4618      	mov	r0, r3
 8006802:	3730      	adds	r7, #48	; 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08e      	sub	sp, #56	; 0x38
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <xQueueReceiveFromISR+0x2a>
 8006822:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e7fe      	b.n	8006834 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d103      	bne.n	8006844 <xQueueReceiveFromISR+0x38>
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <xQueueReceiveFromISR+0x3c>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <xQueueReceiveFromISR+0x3e>
 8006848:	2300      	movs	r3, #0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <xQueueReceiveFromISR+0x56>
 800684e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e7fe      	b.n	8006860 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006862:	f001 fe9f 	bl	80085a4 <vPortValidateInterruptPriority>
	__asm volatile
 8006866:	f3ef 8211 	mrs	r2, BASEPRI
 800686a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	61ba      	str	r2, [r7, #24]
 800687c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800687e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d02f      	beq.n	80068ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689c:	f000 f89d 	bl	80069da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	1e5a      	subs	r2, r3, #1
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d112      	bne.n	80068d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	3310      	adds	r3, #16
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fe04 	bl	80074cc <xTaskRemoveFromEventList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e007      	b.n	80068e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068dc:	3301      	adds	r3, #1
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	b25a      	sxtb	r2, r3
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80068e8:	2301      	movs	r3, #1
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	e001      	b.n	80068f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3738      	adds	r7, #56	; 0x38
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10d      	bne.n	8006940 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d14d      	bne.n	80069c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	f001 f805 	bl	8007940 <xTaskPriorityDisinherit>
 8006936:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e043      	b.n	80069c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d119      	bne.n	800697a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6898      	ldr	r0, [r3, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	461a      	mov	r2, r3
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	f002 f94f 	bl	8008bf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	441a      	add	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d32b      	bcc.n	80069c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	e026      	b.n	80069c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68d8      	ldr	r0, [r3, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	461a      	mov	r2, r3
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	f002 f935 	bl	8008bf4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	425b      	negs	r3, r3
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d207      	bcs.n	80069b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	425b      	negs	r3, r3
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d105      	bne.n	80069c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069d0:	697b      	ldr	r3, [r7, #20]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d018      	beq.n	8006a1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d303      	bcc.n	8006a0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68d9      	ldr	r1, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	461a      	mov	r2, r3
 8006a18:	6838      	ldr	r0, [r7, #0]
 8006a1a:	f002 f8eb 	bl	8008bf4 <memcpy>
	}
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a2e:	f001 fcdd 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3a:	e011      	b.n	8006a60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd3f 	bl	80074cc <xTaskRemoveFromEventList>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a54:	f000 fe72 	bl	800773c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dce9      	bgt.n	8006a3c <prvUnlockQueue+0x16>
 8006a68:	e000      	b.n	8006a6c <prvUnlockQueue+0x46>
					break;
 8006a6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	22ff      	movs	r2, #255	; 0xff
 8006a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a74:	f001 fce8 	bl	8008448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a78:	f001 fcb8 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a84:	e011      	b.n	8006aaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d012      	beq.n	8006ab4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3310      	adds	r3, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fd1a 	bl	80074cc <xTaskRemoveFromEventList>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a9e:	f000 fe4d 	bl	800773c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dce9      	bgt.n	8006a86 <prvUnlockQueue+0x60>
 8006ab2:	e000      	b.n	8006ab6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ab4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 fcc3 	bl	8008448 <vPortExitCritical>
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad2:	f001 fc8b 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e001      	b.n	8006ae8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ae8:	f001 fcae 	bl	8008448 <vPortExitCritical>

	return xReturn;
 8006aec:	68fb      	ldr	r3, [r7, #12]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006afe:	f001 fc75 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d102      	bne.n	8006b14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e001      	b.n	8006b18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b18:	f001 fc96 	bl	8008448 <vPortExitCritical>

	return xReturn;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e014      	b.n	8006b62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b38:	4a0e      	ldr	r2, [pc, #56]	; (8006b74 <vQueueAddToRegistry+0x4c>)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b44:	490b      	ldr	r1, [pc, #44]	; (8006b74 <vQueueAddToRegistry+0x4c>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <vQueueAddToRegistry+0x4c>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b5a:	e005      	b.n	8006b68 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b07      	cmp	r3, #7
 8006b66:	d9e7      	bls.n	8006b38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	2000193c 	.word	0x2000193c

08006b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b88:	f001 fc30 	bl	80083ec <vPortEnterCritical>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <vQueueWaitForMessageRestricted+0x2a>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d103      	bne.n	8006bb8 <vQueueWaitForMessageRestricted+0x40>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb8:	f001 fc46 	bl	8008448 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3324      	adds	r3, #36	; 0x24
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fc53 	bl	8007478 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff27 	bl	8006a26 <prvUnlockQueue>
	}
 8006bd8:	bf00      	nop
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08e      	sub	sp, #56	; 0x38
 8006be4:	af04      	add	r7, sp, #16
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <xTaskCreateStatic+0x28>
	__asm volatile
 8006bf4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	e7fe      	b.n	8006c06 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <xTaskCreateStatic+0x42>
 8006c0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e7fe      	b.n	8006c20 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c22:	2354      	movs	r3, #84	; 0x54
 8006c24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b54      	cmp	r3, #84	; 0x54
 8006c2a:	d009      	beq.n	8006c40 <xTaskCreateStatic+0x60>
 8006c2c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	e7fe      	b.n	8006c3e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01e      	beq.n	8006c84 <xTaskCreateStatic+0xa4>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	f107 0314 	add.w	r3, r7, #20
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f850 	bl	8006d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c7e:	f000 f8cb 	bl	8006e18 <prvAddNewTaskToReadyList>
 8006c82:	e001      	b.n	8006c88 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c88:	697b      	ldr	r3, [r7, #20]
	}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b08c      	sub	sp, #48	; 0x30
 8006c96:	af04      	add	r7, sp, #16
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fcba 	bl	8008620 <pvPortMalloc>
 8006cac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006cb4:	2054      	movs	r0, #84	; 0x54
 8006cb6:	f001 fcb3 	bl	8008620 <pvPortMalloc>
 8006cba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc8:	e005      	b.n	8006cd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cca:	6978      	ldr	r0, [r7, #20]
 8006ccc:	f001 fd6a 	bl	80087a4 <vPortFree>
 8006cd0:	e001      	b.n	8006cd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ce4:	88fa      	ldrh	r2, [r7, #6]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f80e 	bl	8006d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d00:	69f8      	ldr	r0, [r7, #28]
 8006d02:	f000 f889 	bl	8006e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d06:	2301      	movs	r3, #1
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e002      	b.n	8006d12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d12:	69bb      	ldr	r3, [r7, #24]
	}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d34:	3b01      	subs	r3, #1
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <prvInitialiseNewTask+0x46>
 8006d4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e7fe      	b.n	8006d60 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e012      	b.n	8006d8e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	7819      	ldrb	r1, [r3, #0]
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	3334      	adds	r3, #52	; 0x34
 8006d78:	460a      	mov	r2, r1
 8006d7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9e9      	bls.n	8006d68 <prvInitialiseNewTask+0x4c>
 8006d94:	e000      	b.n	8006d98 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006d96:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d901      	bls.n	8006daa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006da6:	2306      	movs	r3, #6
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	2200      	movs	r2, #0
 8006dba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff f8ef 	bl	8005fa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	3318      	adds	r3, #24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f8ea 	bl	8005fa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	f1c3 0207 	rsb	r2, r3, #7
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	69b8      	ldr	r0, [r7, #24]
 8006dfa:	f001 f9cd 	bl	8008198 <pxPortInitialiseStack>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e10:	bf00      	nop
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e20:	f001 fae4 	bl	80083ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	4a29      	ldr	r2, [pc, #164]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e2e:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e36:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e3c:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d110      	bne.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e44:	f000 fc9e 	bl	8007784 <prvInitialiseTaskLists>
 8006e48:	e00d      	b.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <prvAddNewTaskToReadyList+0xc0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e52:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d802      	bhi.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e60:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <prvAddNewTaskToReadyList+0xc4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <prvAddNewTaskToReadyList+0xc4>)
 8006e6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	2201      	movs	r2, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <prvAddNewTaskToReadyList+0xc8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <prvAddNewTaskToReadyList+0xc8>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <prvAddNewTaskToReadyList+0xcc>)
 8006e90:	441a      	add	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7ff f890 	bl	8005fbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e9e:	f001 fad3 	bl	8008448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <prvAddNewTaskToReadyList+0xc0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d207      	bcs.n	8006ec8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <prvAddNewTaskToReadyList+0xd0>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000844 	.word	0x20000844
 8006ed4:	20000744 	.word	0x20000744
 8006ed8:	20000850 	.word	0x20000850
 8006edc:	20000860 	.word	0x20000860
 8006ee0:	2000084c 	.word	0x2000084c
 8006ee4:	20000748 	.word	0x20000748
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <vTaskDelay+0x60>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <vTaskDelay+0x2e>
 8006f06:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	e7fe      	b.n	8006f18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006f1a:	f000 f87f 	bl	800701c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fda9 	bl	8007a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f26:	f000 f887 	bl	8007038 <xTaskResumeAll>
 8006f2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <vTaskDelay+0x64>)
 8006f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000086c 	.word	0x2000086c
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f62:	463a      	mov	r2, r7
 8006f64:	1d39      	adds	r1, r7, #4
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 fb10 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	9202      	str	r2, [sp, #8]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	460a      	mov	r2, r1
 8006f82:	4920      	ldr	r1, [pc, #128]	; (8007004 <vTaskStartScheduler+0xb0>)
 8006f84:	4820      	ldr	r0, [pc, #128]	; (8007008 <vTaskStartScheduler+0xb4>)
 8006f86:	f7ff fe2b 	bl	8006be0 <xTaskCreateStatic>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b1f      	ldr	r3, [pc, #124]	; (800700c <vTaskStartScheduler+0xb8>)
 8006f8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f90:	4b1e      	ldr	r3, [pc, #120]	; (800700c <vTaskStartScheduler+0xb8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e001      	b.n	8006fa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fa8:	f000 fdcc 	bl	8007b44 <xTimerCreateTimerTask>
 8006fac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d115      	bne.n	8006fe0 <vTaskStartScheduler+0x8c>
 8006fb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <vTaskStartScheduler+0xbc>)
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <vTaskStartScheduler+0xc0>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <vTaskStartScheduler+0xc4>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fda:	f001 f969 	bl	80082b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fde:	e00d      	b.n	8006ffc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe6:	d109      	bne.n	8006ffc <vTaskStartScheduler+0xa8>
 8006fe8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e7fe      	b.n	8006ffa <vTaskStartScheduler+0xa6>
}
 8006ffc:	bf00      	nop
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	08008cc4 	.word	0x08008cc4
 8007008:	08007755 	.word	0x08007755
 800700c:	20000868 	.word	0x20000868
 8007010:	20000864 	.word	0x20000864
 8007014:	20000850 	.word	0x20000850
 8007018:	20000848 	.word	0x20000848

0800701c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <vTaskSuspendAll+0x18>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a03      	ldr	r2, [pc, #12]	; (8007034 <vTaskSuspendAll+0x18>)
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	2000086c 	.word	0x2000086c

08007038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007046:	4b41      	ldr	r3, [pc, #260]	; (800714c <xTaskResumeAll+0x114>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <xTaskResumeAll+0x2a>
 800704e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	e7fe      	b.n	8007060 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007062:	f001 f9c3 	bl	80083ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <xTaskResumeAll+0x114>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3b01      	subs	r3, #1
 800706c:	4a37      	ldr	r2, [pc, #220]	; (800714c <xTaskResumeAll+0x114>)
 800706e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007070:	4b36      	ldr	r3, [pc, #216]	; (800714c <xTaskResumeAll+0x114>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d161      	bne.n	800713c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007078:	4b35      	ldr	r3, [pc, #212]	; (8007150 <xTaskResumeAll+0x118>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d05d      	beq.n	800713c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007080:	e02e      	b.n	80070e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007082:	4b34      	ldr	r3, [pc, #208]	; (8007154 <xTaskResumeAll+0x11c>)
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3318      	adds	r3, #24
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fff2 	bl	8006078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe ffed 	bl	8006078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	2201      	movs	r2, #1
 80070a4:	409a      	lsls	r2, r3
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <xTaskResumeAll+0x120>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	4a2a      	ldr	r2, [pc, #168]	; (8007158 <xTaskResumeAll+0x120>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <xTaskResumeAll+0x124>)
 80070be:	441a      	add	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe ff79 	bl	8005fbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4b23      	ldr	r3, [pc, #140]	; (8007160 <xTaskResumeAll+0x128>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80070da:	4b22      	ldr	r3, [pc, #136]	; (8007164 <xTaskResumeAll+0x12c>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070e0:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <xTaskResumeAll+0x11c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1cc      	bne.n	8007082 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070ee:	f000 fbe3 	bl	80078b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <xTaskResumeAll+0x130>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d010      	beq.n	8007120 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070fe:	f000 f847 	bl	8007190 <xTaskIncrementTick>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007108:	4b16      	ldr	r3, [pc, #88]	; (8007164 <xTaskResumeAll+0x12c>)
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3b01      	subs	r3, #1
 8007112:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f1      	bne.n	80070fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <xTaskResumeAll+0x130>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <xTaskResumeAll+0x12c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <xTaskResumeAll+0x134>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800713c:	f001 f984 	bl	8008448 <vPortExitCritical>

	return xAlreadyYielded;
 8007140:	68bb      	ldr	r3, [r7, #8]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	2000086c 	.word	0x2000086c
 8007150:	20000844 	.word	0x20000844
 8007154:	20000804 	.word	0x20000804
 8007158:	2000084c 	.word	0x2000084c
 800715c:	20000748 	.word	0x20000748
 8007160:	20000744 	.word	0x20000744
 8007164:	20000858 	.word	0x20000858
 8007168:	20000854 	.word	0x20000854
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <xTaskGetTickCount+0x1c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800717c:	687b      	ldr	r3, [r7, #4]
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000848 	.word	0x20000848

08007190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800719a:	4b50      	ldr	r3, [pc, #320]	; (80072dc <xTaskIncrementTick+0x14c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 808c 	bne.w	80072bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071a4:	4b4e      	ldr	r3, [pc, #312]	; (80072e0 <xTaskIncrementTick+0x150>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071ac:	4a4c      	ldr	r2, [pc, #304]	; (80072e0 <xTaskIncrementTick+0x150>)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11f      	bne.n	80071f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80071b8:	4b4a      	ldr	r3, [pc, #296]	; (80072e4 <xTaskIncrementTick+0x154>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <xTaskIncrementTick+0x46>
 80071c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	e7fe      	b.n	80071d4 <xTaskIncrementTick+0x44>
 80071d6:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <xTaskIncrementTick+0x154>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <xTaskIncrementTick+0x158>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <xTaskIncrementTick+0x154>)
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	4a40      	ldr	r2, [pc, #256]	; (80072e8 <xTaskIncrementTick+0x158>)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	4b40      	ldr	r3, [pc, #256]	; (80072ec <xTaskIncrementTick+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	4a3e      	ldr	r2, [pc, #248]	; (80072ec <xTaskIncrementTick+0x15c>)
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	f000 fb60 	bl	80078b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071f8:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <xTaskIncrementTick+0x160>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d34d      	bcc.n	800729e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007202:	4b38      	ldr	r3, [pc, #224]	; (80072e4 <xTaskIncrementTick+0x154>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <xTaskIncrementTick+0x80>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <xTaskIncrementTick+0x82>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <xTaskIncrementTick+0x160>)
 8007218:	f04f 32ff 	mov.w	r2, #4294967295
 800721c:	601a      	str	r2, [r3, #0]
					break;
 800721e:	e03e      	b.n	800729e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007220:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <xTaskIncrementTick+0x154>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d203      	bcs.n	8007240 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007238:	4a2d      	ldr	r2, [pc, #180]	; (80072f0 <xTaskIncrementTick+0x160>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6013      	str	r3, [r2, #0]
						break;
 800723e:	e02e      	b.n	800729e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe ff17 	bl	8006078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3318      	adds	r3, #24
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe ff0e 	bl	8006078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <xTaskIncrementTick+0x164>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <xTaskIncrementTick+0x164>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <xTaskIncrementTick+0x168>)
 800727c:	441a      	add	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fe fe9a 	bl	8005fbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <xTaskIncrementTick+0x16c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	429a      	cmp	r2, r3
 8007296:	d3b4      	bcc.n	8007202 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729c:	e7b1      	b.n	8007202 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800729e:	4b17      	ldr	r3, [pc, #92]	; (80072fc <xTaskIncrementTick+0x16c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4914      	ldr	r1, [pc, #80]	; (80072f8 <xTaskIncrementTick+0x168>)
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d907      	bls.n	80072c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e004      	b.n	80072c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <xTaskIncrementTick+0x170>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <xTaskIncrementTick+0x170>)
 80072c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <xTaskIncrementTick+0x174>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	2000086c 	.word	0x2000086c
 80072e0:	20000848 	.word	0x20000848
 80072e4:	200007fc 	.word	0x200007fc
 80072e8:	20000800 	.word	0x20000800
 80072ec:	2000085c 	.word	0x2000085c
 80072f0:	20000864 	.word	0x20000864
 80072f4:	2000084c 	.word	0x2000084c
 80072f8:	20000748 	.word	0x20000748
 80072fc:	20000744 	.word	0x20000744
 8007300:	20000854 	.word	0x20000854
 8007304:	20000858 	.word	0x20000858

08007308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <vTaskSwitchContext+0xa0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007316:	4b25      	ldr	r3, [pc, #148]	; (80073ac <vTaskSwitchContext+0xa4>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800731c:	e03e      	b.n	800739c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800731e:	4b23      	ldr	r3, [pc, #140]	; (80073ac <vTaskSwitchContext+0xa4>)
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007324:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <vTaskSwitchContext+0xa8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	f1c3 031f 	rsb	r3, r3, #31
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	491e      	ldr	r1, [pc, #120]	; (80073b4 <vTaskSwitchContext+0xac>)
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <vTaskSwitchContext+0x5a>
	__asm volatile
 800734e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e7fe      	b.n	8007360 <vTaskSwitchContext+0x58>
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <vTaskSwitchContext+0xac>)
 800736e:	4413      	add	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3308      	adds	r3, #8
 8007384:	429a      	cmp	r2, r3
 8007386:	d104      	bne.n	8007392 <vTaskSwitchContext+0x8a>
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <vTaskSwitchContext+0xb0>)
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	2000086c 	.word	0x2000086c
 80073ac:	20000858 	.word	0x20000858
 80073b0:	2000084c 	.word	0x2000084c
 80073b4:	20000748 	.word	0x20000748
 80073b8:	20000744 	.word	0x20000744

080073bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <vTaskPlaceOnEventList+0x24>
 80073cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e7fe      	b.n	80073de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vTaskPlaceOnEventList+0x44>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3318      	adds	r3, #24
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fe fe0c 	bl	8006006 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073ee:	2101      	movs	r1, #1
 80073f0:	6838      	ldr	r0, [r7, #0]
 80073f2:	f000 fb41 	bl	8007a78 <prvAddCurrentTaskToDelayedList>
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000744 	.word	0x20000744

08007404 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <vTaskPlaceOnUnorderedEventList+0x26>
 8007416:	f04f 0330 	mov.w	r3, #48	; 0x30
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e7fe      	b.n	8007428 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <vTaskPlaceOnUnorderedEventList+0x42>
 8007432:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	e7fe      	b.n	8007444 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007450:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3318      	adds	r3, #24
 8007458:	4619      	mov	r1, r3
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7fe fdaf 	bl	8005fbe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007460:	2101      	movs	r1, #1
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb08 	bl	8007a78 <prvAddCurrentTaskToDelayedList>
}
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	2000086c 	.word	0x2000086c
 8007474:	20000744 	.word	0x20000744

08007478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <vTaskPlaceOnEventListRestricted+0x26>
 800748a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e7fe      	b.n	800749c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3318      	adds	r3, #24
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7fe fd89 	bl	8005fbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	68b8      	ldr	r0, [r7, #8]
 80074bc:	f000 fadc 	bl	8007a78 <prvAddCurrentTaskToDelayedList>
	}
 80074c0:	bf00      	nop
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000744 	.word	0x20000744

080074cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <xTaskRemoveFromEventList+0x2a>
 80074e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e7fe      	b.n	80074f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3318      	adds	r3, #24
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fdbc 	bl	8006078 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007500:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <xTaskRemoveFromEventList+0xac>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11c      	bne.n	8007542 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fdb3 	bl	8006078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	2201      	movs	r2, #1
 8007518:	409a      	lsls	r2, r3
 800751a:	4b18      	ldr	r3, [pc, #96]	; (800757c <xTaskRemoveFromEventList+0xb0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4313      	orrs	r3, r2
 8007520:	4a16      	ldr	r2, [pc, #88]	; (800757c <xTaskRemoveFromEventList+0xb0>)
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4a13      	ldr	r2, [pc, #76]	; (8007580 <xTaskRemoveFromEventList+0xb4>)
 8007532:	441a      	add	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f7fe fd3f 	bl	8005fbe <vListInsertEnd>
 8007540:	e005      	b.n	800754e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3318      	adds	r3, #24
 8007546:	4619      	mov	r1, r3
 8007548:	480e      	ldr	r0, [pc, #56]	; (8007584 <xTaskRemoveFromEventList+0xb8>)
 800754a:	f7fe fd38 	bl	8005fbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <xTaskRemoveFromEventList+0xbc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d905      	bls.n	8007568 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <xTaskRemoveFromEventList+0xc0>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e001      	b.n	800756c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800756c:	697b      	ldr	r3, [r7, #20]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	2000086c 	.word	0x2000086c
 800757c:	2000084c 	.word	0x2000084c
 8007580:	20000748 	.word	0x20000748
 8007584:	20000804 	.word	0x20000804
 8007588:	20000744 	.word	0x20000744
 800758c:	20000858 	.word	0x20000858

08007590 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800759a:	4b28      	ldr	r3, [pc, #160]	; (800763c <vTaskRemoveFromUnorderedEventList+0xac>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <vTaskRemoveFromUnorderedEventList+0x26>
 80075a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	e7fe      	b.n	80075b4 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <vTaskRemoveFromUnorderedEventList+0x50>
 80075cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	e7fe      	b.n	80075de <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7fe fd49 	bl	8006078 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fd44 	bl	8006078 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	2201      	movs	r2, #1
 80075f6:	409a      	lsls	r2, r3
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	4a10      	ldr	r2, [pc, #64]	; (8007640 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a0d      	ldr	r2, [pc, #52]	; (8007644 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007610:	441a      	add	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7fe fcd0 	bl	8005fbe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d902      	bls.n	8007632 <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
	}
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000086c 	.word	0x2000086c
 8007640:	2000084c 	.word	0x2000084c
 8007644:	20000748 	.word	0x20000748
 8007648:	20000744 	.word	0x20000744
 800764c:	20000858 	.word	0x20000858

08007650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <vTaskInternalSetTimeOutState+0x24>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <vTaskInternalSetTimeOutState+0x28>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	605a      	str	r2, [r3, #4]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	2000085c 	.word	0x2000085c
 8007678:	20000848 	.word	0x20000848

0800767c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <xTaskCheckForTimeOut+0x24>
 800768c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	e7fe      	b.n	800769e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <xTaskCheckForTimeOut+0x3e>
 80076a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e7fe      	b.n	80076b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80076ba:	f000 fe97 	bl	80083ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <xTaskCheckForTimeOut+0xb8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d102      	bne.n	80076de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	e023      	b.n	8007726 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <xTaskCheckForTimeOut+0xbc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d007      	beq.n	80076fa <xTaskCheckForTimeOut+0x7e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d302      	bcc.n	80076fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e015      	b.n	8007726 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	d20b      	bcs.n	800771c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	1ad2      	subs	r2, r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff ff9d 	bl	8007650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	e004      	b.n	8007726 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007726:	f000 fe8f 	bl	8008448 <vPortExitCritical>

	return xReturn;
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000848 	.word	0x20000848
 8007738:	2000085c 	.word	0x2000085c

0800773c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007740:	4b03      	ldr	r3, [pc, #12]	; (8007750 <vTaskMissedYield+0x14>)
 8007742:	2201      	movs	r2, #1
 8007744:	601a      	str	r2, [r3, #0]
}
 8007746:	bf00      	nop
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20000858 	.word	0x20000858

08007754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800775c:	f000 f852 	bl	8007804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <prvIdleTask+0x28>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d9f9      	bls.n	800775c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <prvIdleTask+0x2c>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007778:	e7f0      	b.n	800775c <prvIdleTask+0x8>
 800777a:	bf00      	nop
 800777c:	20000748 	.word	0x20000748
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	e00c      	b.n	80077aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <prvInitialiseTaskLists+0x60>)
 800779c:	4413      	add	r3, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fbe0 	bl	8005f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3301      	adds	r3, #1
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	d9ef      	bls.n	8007790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077b0:	480d      	ldr	r0, [pc, #52]	; (80077e8 <prvInitialiseTaskLists+0x64>)
 80077b2:	f7fe fbd7 	bl	8005f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077b6:	480d      	ldr	r0, [pc, #52]	; (80077ec <prvInitialiseTaskLists+0x68>)
 80077b8:	f7fe fbd4 	bl	8005f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077bc:	480c      	ldr	r0, [pc, #48]	; (80077f0 <prvInitialiseTaskLists+0x6c>)
 80077be:	f7fe fbd1 	bl	8005f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077c2:	480c      	ldr	r0, [pc, #48]	; (80077f4 <prvInitialiseTaskLists+0x70>)
 80077c4:	f7fe fbce 	bl	8005f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077c8:	480b      	ldr	r0, [pc, #44]	; (80077f8 <prvInitialiseTaskLists+0x74>)
 80077ca:	f7fe fbcb 	bl	8005f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <prvInitialiseTaskLists+0x78>)
 80077d0:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <prvInitialiseTaskLists+0x64>)
 80077d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <prvInitialiseTaskLists+0x7c>)
 80077d6:	4a05      	ldr	r2, [pc, #20]	; (80077ec <prvInitialiseTaskLists+0x68>)
 80077d8:	601a      	str	r2, [r3, #0]
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000748 	.word	0x20000748
 80077e8:	200007d4 	.word	0x200007d4
 80077ec:	200007e8 	.word	0x200007e8
 80077f0:	20000804 	.word	0x20000804
 80077f4:	20000818 	.word	0x20000818
 80077f8:	20000830 	.word	0x20000830
 80077fc:	200007fc 	.word	0x200007fc
 8007800:	20000800 	.word	0x20000800

08007804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800780a:	e019      	b.n	8007840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800780c:	f000 fdee 	bl	80083ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <prvCheckTasksWaitingTermination+0x4c>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fc2b 	bl	8006078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <prvCheckTasksWaitingTermination+0x50>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	4a0a      	ldr	r2, [pc, #40]	; (8007854 <prvCheckTasksWaitingTermination+0x50>)
 800782a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <prvCheckTasksWaitingTermination+0x54>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3b01      	subs	r3, #1
 8007832:	4a09      	ldr	r2, [pc, #36]	; (8007858 <prvCheckTasksWaitingTermination+0x54>)
 8007834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007836:	f000 fe07 	bl	8008448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f80e 	bl	800785c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <prvCheckTasksWaitingTermination+0x54>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e1      	bne.n	800780c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000818 	.word	0x20000818
 8007854:	20000844 	.word	0x20000844
 8007858:	2000082c 	.word	0x2000082c

0800785c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786a:	2b00      	cmp	r3, #0
 800786c:	d108      	bne.n	8007880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4618      	mov	r0, r3
 8007874:	f000 ff96 	bl	80087a4 <vPortFree>
				vPortFree( pxTCB );
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 ff93 	bl	80087a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800787e:	e017      	b.n	80078b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007886:	2b01      	cmp	r3, #1
 8007888:	d103      	bne.n	8007892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 ff8a 	bl	80087a4 <vPortFree>
	}
 8007890:	e00e      	b.n	80078b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007898:	2b02      	cmp	r3, #2
 800789a:	d009      	beq.n	80078b0 <prvDeleteTCB+0x54>
 800789c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e7fe      	b.n	80078ae <prvDeleteTCB+0x52>
	}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <prvResetNextTaskUnblockTime+0x44>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <prvResetNextTaskUnblockTime+0x14>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <prvResetNextTaskUnblockTime+0x16>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <prvResetNextTaskUnblockTime+0x48>)
 80078d4:	f04f 32ff 	mov.w	r2, #4294967295
 80078d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078da:	e008      	b.n	80078ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <prvResetNextTaskUnblockTime+0x44>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	4a05      	ldr	r2, [pc, #20]	; (8007900 <prvResetNextTaskUnblockTime+0x48>)
 80078ec:	6013      	str	r3, [r2, #0]
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	200007fc 	.word	0x200007fc
 8007900:	20000864 	.word	0x20000864

08007904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <xTaskGetSchedulerState+0x34>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007912:	2301      	movs	r3, #1
 8007914:	607b      	str	r3, [r7, #4]
 8007916:	e008      	b.n	800792a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <xTaskGetSchedulerState+0x38>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007920:	2302      	movs	r3, #2
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	e001      	b.n	800792a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800792a:	687b      	ldr	r3, [r7, #4]
	}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20000850 	.word	0x20000850
 800793c:	2000086c 	.word	0x2000086c

08007940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d06c      	beq.n	8007a30 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <xTaskPriorityDisinherit+0xfc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d009      	beq.n	8007974 <xTaskPriorityDisinherit+0x34>
 8007960:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e7fe      	b.n	8007972 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <xTaskPriorityDisinherit+0x50>
 800797c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	e7fe      	b.n	800798e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007994:	1e5a      	subs	r2, r3, #1
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d044      	beq.n	8007a30 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d140      	bne.n	8007a30 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fb60 	bl	8006078 <uxListRemove>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d115      	bne.n	80079ea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	491f      	ldr	r1, [pc, #124]	; (8007a40 <xTaskPriorityDisinherit+0x100>)
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xTaskPriorityDisinherit+0xaa>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	2201      	movs	r2, #1
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43da      	mvns	r2, r3
 80079e0:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <xTaskPriorityDisinherit+0x104>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4013      	ands	r3, r2
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <xTaskPriorityDisinherit+0x104>)
 80079e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	f1c3 0207 	rsb	r2, r3, #7
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	2201      	movs	r2, #1
 8007a04:	409a      	lsls	r2, r3
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskPriorityDisinherit+0x104>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	4a0d      	ldr	r2, [pc, #52]	; (8007a44 <xTaskPriorityDisinherit+0x104>)
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <xTaskPriorityDisinherit+0x100>)
 8007a1e:	441a      	add	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f7fe fac9 	bl	8005fbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a30:	697b      	ldr	r3, [r7, #20]
	}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000744 	.word	0x20000744
 8007a40:	20000748 	.word	0x20000748
 8007a44:	2000084c 	.word	0x2000084c

08007a48 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <uxTaskResetEventItemValue+0x2c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a56:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <uxTaskResetEventItemValue+0x2c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <uxTaskResetEventItemValue+0x2c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f1c2 0207 	rsb	r2, r2, #7
 8007a64:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007a66:	687b      	ldr	r3, [r7, #4]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20000744 	.word	0x20000744

08007a78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a82:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a88:	4b28      	ldr	r3, [pc, #160]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe faf2 	bl	8006078 <uxListRemove>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43da      	mvns	r2, r3
 8007aa8:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4013      	ands	r3, r2
 8007aae:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ab0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d10a      	bne.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x58>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac0:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	481a      	ldr	r0, [pc, #104]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007aca:	f7fe fa78 	bl	8005fbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ace:	e026      	b.n	8007b1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad8:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d209      	bcs.n	8007afc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae8:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fe fa86 	bl	8006006 <vListInsert>
}
 8007afa:	e010      	b.n	8007b1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afc:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7fe fa7c 	bl	8006006 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d202      	bcs.n	8007b1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6013      	str	r3, [r2, #0]
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000848 	.word	0x20000848
 8007b2c:	20000744 	.word	0x20000744
 8007b30:	2000084c 	.word	0x2000084c
 8007b34:	20000830 	.word	0x20000830
 8007b38:	20000800 	.word	0x20000800
 8007b3c:	200007fc 	.word	0x200007fc
 8007b40:	20000864 	.word	0x20000864

08007b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b4e:	f000 fac3 	bl	80080d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <xTimerCreateTimerTask+0x80>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d021      	beq.n	8007b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b62:	1d3a      	adds	r2, r7, #4
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	f107 030c 	add.w	r3, r7, #12
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7f8 fd29 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	9202      	str	r2, [sp, #8]
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	460a      	mov	r2, r1
 8007b84:	4910      	ldr	r1, [pc, #64]	; (8007bc8 <xTimerCreateTimerTask+0x84>)
 8007b86:	4811      	ldr	r0, [pc, #68]	; (8007bcc <xTimerCreateTimerTask+0x88>)
 8007b88:	f7ff f82a 	bl	8006be0 <xTaskCreateStatic>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <xTimerCreateTimerTask+0x8c>)
 8007b90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <xTimerCreateTimerTask+0x8c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <xTimerCreateTimerTask+0x74>
 8007ba4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e7fe      	b.n	8007bb6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007bb8:	697b      	ldr	r3, [r7, #20]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200008a0 	.word	0x200008a0
 8007bc8:	08008ccc 	.word	0x08008ccc
 8007bcc:	08007ced 	.word	0x08007ced
 8007bd0:	200008a4 	.word	0x200008a4

08007bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <xTimerGenericCommand+0x2c>
 8007bec:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	623b      	str	r3, [r7, #32]
 8007bfe:	e7fe      	b.n	8007bfe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <xTimerGenericCommand+0x94>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02a      	beq.n	8007c5e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	dc18      	bgt.n	8007c4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c1a:	f7ff fe73 	bl	8007904 <xTaskGetSchedulerState>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d109      	bne.n	8007c38 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <xTimerGenericCommand+0x94>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f107 0110 	add.w	r1, r7, #16
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c30:	f7fe fb82 	bl	8006338 <xQueueGenericSend>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24
 8007c36:	e012      	b.n	8007c5e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <xTimerGenericCommand+0x94>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	f107 0110 	add.w	r1, r7, #16
 8007c40:	2300      	movs	r3, #0
 8007c42:	2200      	movs	r2, #0
 8007c44:	f7fe fb78 	bl	8006338 <xQueueGenericSend>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24
 8007c4a:	e008      	b.n	8007c5e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <xTimerGenericCommand+0x94>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	f107 0110 	add.w	r1, r7, #16
 8007c54:	2300      	movs	r3, #0
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	f7fe fc68 	bl	800652c <xQueueGenericSendFromISR>
 8007c5c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3728      	adds	r7, #40	; 0x28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	200008a0 	.word	0x200008a0

08007c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <prvProcessExpiredTimer+0x7c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe f9f7 	bl	8006078 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d121      	bne.n	8007cd6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	18d1      	adds	r1, r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f000 f8c8 	bl	8007e34 <prvInsertTimerInActiveList>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007caa:	2300      	movs	r3, #0
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6978      	ldr	r0, [r7, #20]
 8007cb6:	f7ff ff8d 	bl	8007bd4 <xTimerGenericCommand>
 8007cba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <prvProcessExpiredTimer+0x6a>
 8007cc2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e7fe      	b.n	8007cd4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	6978      	ldr	r0, [r7, #20]
 8007cdc:	4798      	blx	r3
}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000898 	.word	0x20000898

08007cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f857 	bl	8007dac <prvGetNextExpireTime>
 8007cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f803 	bl	8007d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d0a:	f000 f8d5 	bl	8007eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d0e:	e7f1      	b.n	8007cf4 <prvTimerTask+0x8>

08007d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d1a:	f7ff f97f 	bl	800701c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d1e:	f107 0308 	add.w	r3, r7, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f866 	bl	8007df4 <prvSampleTimeNow>
 8007d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d130      	bne.n	8007d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <prvProcessTimerOrBlockTask+0x3c>
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d806      	bhi.n	8007d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d3e:	f7ff f97b 	bl	8007038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff91 	bl	8007c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d4a:	e024      	b.n	8007d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <prvProcessTimerOrBlockTask+0x90>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf0c      	ite	eq
 8007d5c:	2301      	moveq	r3, #1
 8007d5e:	2300      	movne	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d64:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <prvProcessTimerOrBlockTask+0x94>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7fe ff01 	bl	8006b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d76:	f7ff f95f 	bl	8007038 <xTaskResumeAll>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <prvProcessTimerOrBlockTask+0x98>)
 8007d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
}
 8007d90:	e001      	b.n	8007d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d92:	f7ff f951 	bl	8007038 <xTaskResumeAll>
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000089c 	.word	0x2000089c
 8007da4:	200008a0 	.word	0x200008a0
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <prvGetNextExpireTime+0x44>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <prvGetNextExpireTime+0x44>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e001      	b.n	8007de2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007de2:	68fb      	ldr	r3, [r7, #12]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000898 	.word	0x20000898

08007df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007dfc:	f7ff f9b8 	bl	8007170 <xTaskGetTickCount>
 8007e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <prvSampleTimeNow+0x3c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d205      	bcs.n	8007e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e0c:	f000 f904 	bl	8008018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e1e:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <prvSampleTimeNow+0x3c>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e24:	68fb      	ldr	r3, [r7, #12]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200008a8 	.word	0x200008a8

08007e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d812      	bhi.n	8007e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e01b      	b.n	8007ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e6e:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <prvInsertTimerInActiveList+0x7c>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f7fe f8c4 	bl	8006006 <vListInsert>
 8007e7e:	e012      	b.n	8007ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d206      	bcs.n	8007e96 <prvInsertTimerInActiveList+0x62>
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d302      	bcc.n	8007e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e007      	b.n	8007ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <prvInsertTimerInActiveList+0x80>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f7fe f8b0 	bl	8006006 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ea6:	697b      	ldr	r3, [r7, #20]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	2000089c 	.word	0x2000089c
 8007eb4:	20000898 	.word	0x20000898

08007eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08e      	sub	sp, #56	; 0x38
 8007ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ebe:	e099      	b.n	8007ff4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da17      	bge.n	8007ef6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	3304      	adds	r3, #4
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <prvProcessReceivedCommands+0x2e>
 8007ed2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e7fe      	b.n	8007ee4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eec:	6850      	ldr	r0, [r2, #4]
 8007eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef0:	6892      	ldr	r2, [r2, #8]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db7a      	blt.n	8007ff2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe f8b3 	bl	8006078 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f12:	463b      	mov	r3, r7
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff ff6d 	bl	8007df4 <prvSampleTimeNow>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	d868      	bhi.n	8007ff4 <prvProcessReceivedCommands+0x13c>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <prvProcessReceivedCommands+0x70>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f51 	.word	0x08007f51
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f51 	.word	0x08007f51
 8007f34:	08007ff5 	.word	0x08007ff5
 8007f38:	08007fab 	.word	0x08007fab
 8007f3c:	08007fe1 	.word	0x08007fe1
 8007f40:	08007f51 	.word	0x08007f51
 8007f44:	08007f51 	.word	0x08007f51
 8007f48:	08007ff5 	.word	0x08007ff5
 8007f4c:	08007fab 	.word	0x08007fab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	18d1      	adds	r1, r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f7ff ff69 	bl	8007e34 <prvInsertTimerInActiveList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d045      	beq.n	8007ff4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d13d      	bne.n	8007ff4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	441a      	add	r2, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8a:	f7ff fe23 	bl	8007bd4 <xTimerGenericCommand>
 8007f8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d12e      	bne.n	8007ff4 <prvProcessReceivedCommands+0x13c>
 8007f96:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	e7fe      	b.n	8007fa8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <prvProcessReceivedCommands+0x114>
 8007fb8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e7fe      	b.n	8007fca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	699a      	ldr	r2, [r3, #24]
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	18d1      	adds	r1, r2, r3
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fda:	f7ff ff2b 	bl	8007e34 <prvInsertTimerInActiveList>
					break;
 8007fde:	e009      	b.n	8007ff4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fec:	f000 fbda 	bl	80087a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ff0:	e000      	b.n	8007ff4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ff2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ff4:	4b07      	ldr	r3, [pc, #28]	; (8008014 <prvProcessReceivedCommands+0x15c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	1d39      	adds	r1, r7, #4
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fb29 	bl	8006654 <xQueueReceive>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	f47f af5b 	bne.w	8007ec0 <prvProcessReceivedCommands+0x8>
	}
}
 800800a:	bf00      	nop
 800800c:	3730      	adds	r7, #48	; 0x30
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200008a0 	.word	0x200008a0

08008018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800801e:	e044      	b.n	80080aa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800802a:	4b29      	ldr	r3, [pc, #164]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3304      	adds	r3, #4
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe f81d 	bl	8006078 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d12d      	bne.n	80080aa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4413      	add	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d90e      	bls.n	800807e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800806c:	4b18      	ldr	r3, [pc, #96]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7fd ffc5 	bl	8006006 <vListInsert>
 800807c:	e015      	b.n	80080aa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800807e:	2300      	movs	r3, #0
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	2300      	movs	r3, #0
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	2100      	movs	r1, #0
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff fda3 	bl	8007bd4 <xTimerGenericCommand>
 800808e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <prvSwitchTimerLists+0x92>
 8008096:	f04f 0330 	mov.w	r3, #48	; 0x30
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	e7fe      	b.n	80080a8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1b5      	bne.n	8008020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <prvSwitchTimerLists+0xbc>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <prvSwitchTimerLists+0xb8>)
 80080c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080c2:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <prvSwitchTimerLists+0xbc>)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6013      	str	r3, [r2, #0]
}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000898 	.word	0x20000898
 80080d4:	2000089c 	.word	0x2000089c

080080d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080de:	f000 f985 	bl	80083ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d120      	bne.n	800812c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080ea:	4814      	ldr	r0, [pc, #80]	; (800813c <prvCheckForValidListAndQueue+0x64>)
 80080ec:	f7fd ff3a 	bl	8005f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080f0:	4813      	ldr	r0, [pc, #76]	; (8008140 <prvCheckForValidListAndQueue+0x68>)
 80080f2:	f7fd ff37 	bl	8005f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <prvCheckForValidListAndQueue+0x6c>)
 80080f8:	4a10      	ldr	r2, [pc, #64]	; (800813c <prvCheckForValidListAndQueue+0x64>)
 80080fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvCheckForValidListAndQueue+0x70>)
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <prvCheckForValidListAndQueue+0x68>)
 8008100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008102:	2300      	movs	r3, #0
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <prvCheckForValidListAndQueue+0x74>)
 8008108:	4a11      	ldr	r2, [pc, #68]	; (8008150 <prvCheckForValidListAndQueue+0x78>)
 800810a:	2110      	movs	r1, #16
 800810c:	200a      	movs	r0, #10
 800810e:	f7fe f845 	bl	800619c <xQueueGenericCreateStatic>
 8008112:	4602      	mov	r2, r0
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 8008116:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	490b      	ldr	r1, [pc, #44]	; (8008154 <prvCheckForValidListAndQueue+0x7c>)
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fcfe 	bl	8006b28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800812c:	f000 f98c 	bl	8008448 <vPortExitCritical>
}
 8008130:	bf00      	nop
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200008a0 	.word	0x200008a0
 800813c:	20000870 	.word	0x20000870
 8008140:	20000884 	.word	0x20000884
 8008144:	20000898 	.word	0x20000898
 8008148:	2000089c 	.word	0x2000089c
 800814c:	2000094c 	.word	0x2000094c
 8008150:	200008ac 	.word	0x200008ac
 8008154:	08008cd4 	.word	0x08008cd4

08008158 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008166:	f06f 0301 	mvn.w	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008178:	4b06      	ldr	r3, [pc, #24]	; (8008194 <xTimerPendFunctionCallFromISR+0x3c>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	f107 0114 	add.w	r1, r7, #20
 8008180:	2300      	movs	r3, #0
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	f7fe f9d2 	bl	800652c <xQueueGenericSendFromISR>
 8008188:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800818c:	4618      	mov	r0, r3
 800818e:	3728      	adds	r7, #40	; 0x28
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	200008a0 	.word	0x200008a0

08008198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3b04      	subs	r3, #4
 80081a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b04      	subs	r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f023 0201 	bic.w	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081c8:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <pxPortInitialiseStack+0x64>)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3b14      	subs	r3, #20
 80081d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3b04      	subs	r3, #4
 80081de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f06f 0202 	mvn.w	r2, #2
 80081e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3b20      	subs	r3, #32
 80081ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081ee:	68fb      	ldr	r3, [r7, #12]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	08008201 	.word	0x08008201

08008200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <prvTaskExitError+0x50>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d009      	beq.n	8008228 <prvTaskExitError+0x28>
 8008214:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e7fe      	b.n	8008226 <prvTaskExitError+0x26>
 8008228:	f04f 0330 	mov.w	r3, #48	; 0x30
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800823a:	bf00      	nop
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0fc      	beq.n	800823c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	2000000c 	.word	0x2000000c
	...

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008288:	4808      	ldr	r0, [pc, #32]	; (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082aa:	bf00      	nop
 80082ac:	e000ed08 	.word	0xe000ed08

080082b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082b6:	4b44      	ldr	r3, [pc, #272]	; (80083c8 <xPortStartScheduler+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a44      	ldr	r2, [pc, #272]	; (80083cc <xPortStartScheduler+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d109      	bne.n	80082d4 <xPortStartScheduler+0x24>
 80082c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	e7fe      	b.n	80082d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082d4:	4b3c      	ldr	r3, [pc, #240]	; (80083c8 <xPortStartScheduler+0x118>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a3d      	ldr	r2, [pc, #244]	; (80083d0 <xPortStartScheduler+0x120>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d109      	bne.n	80082f2 <xPortStartScheduler+0x42>
 80082de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e7fe      	b.n	80082f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082f2:	4b38      	ldr	r3, [pc, #224]	; (80083d4 <xPortStartScheduler+0x124>)
 80082f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <xPortStartScheduler+0x128>)
 8008318:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800831a:	4b30      	ldr	r3, [pc, #192]	; (80083dc <xPortStartScheduler+0x12c>)
 800831c:	2207      	movs	r2, #7
 800831e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008320:	e009      	b.n	8008336 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008322:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <xPortStartScheduler+0x12c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a2c      	ldr	r2, [pc, #176]	; (80083dc <xPortStartScheduler+0x12c>)
 800832a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	b2db      	uxtb	r3, r3
 8008334:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d0ef      	beq.n	8008322 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <xPortStartScheduler+0x12c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f1c3 0307 	rsb	r3, r3, #7
 800834a:	2b04      	cmp	r3, #4
 800834c:	d009      	beq.n	8008362 <xPortStartScheduler+0xb2>
 800834e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	e7fe      	b.n	8008360 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008362:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <xPortStartScheduler+0x12c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <xPortStartScheduler+0x12c>)
 800836a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800836c:	4b1b      	ldr	r3, [pc, #108]	; (80083dc <xPortStartScheduler+0x12c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008374:	4a19      	ldr	r2, [pc, #100]	; (80083dc <xPortStartScheduler+0x12c>)
 8008376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	b2da      	uxtb	r2, r3
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <xPortStartScheduler+0x130>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <xPortStartScheduler+0x130>)
 8008386:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800838a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800838c:	4b14      	ldr	r3, [pc, #80]	; (80083e0 <xPortStartScheduler+0x130>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <xPortStartScheduler+0x130>)
 8008392:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8008396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008398:	f000 f8d6 	bl	8008548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <xPortStartScheduler+0x134>)
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083a2:	f000 f8f5 	bl	8008590 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <xPortStartScheduler+0x138>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0f      	ldr	r2, [pc, #60]	; (80083e8 <xPortStartScheduler+0x138>)
 80083ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083b2:	f7ff ff69 	bl	8008288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083b6:	f7fe ffa7 	bl	8007308 <vTaskSwitchContext>
	prvTaskExitError();
 80083ba:	f7ff ff21 	bl	8008200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed00 	.word	0xe000ed00
 80083cc:	410fc271 	.word	0x410fc271
 80083d0:	410fc270 	.word	0x410fc270
 80083d4:	e000e400 	.word	0xe000e400
 80083d8:	20000994 	.word	0x20000994
 80083dc:	20000998 	.word	0x20000998
 80083e0:	e000ed20 	.word	0xe000ed20
 80083e4:	2000000c 	.word	0x2000000c
 80083e8:	e000ef34 	.word	0xe000ef34

080083ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <vPortEnterCritical+0x54>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <vPortEnterCritical+0x54>)
 800840c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800840e:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <vPortEnterCritical+0x54>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10e      	bne.n	8008434 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortEnterCritical+0x58>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <vPortEnterCritical+0x48>
 8008420:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	e7fe      	b.n	8008432 <vPortEnterCritical+0x46>
	}
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	2000000c 	.word	0x2000000c
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800844e:	4b11      	ldr	r3, [pc, #68]	; (8008494 <vPortExitCritical+0x4c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <vPortExitCritical+0x22>
 8008456:	f04f 0330 	mov.w	r3, #48	; 0x30
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	e7fe      	b.n	8008468 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <vPortExitCritical+0x4c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3b01      	subs	r3, #1
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <vPortExitCritical+0x4c>)
 8008472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <vPortExitCritical+0x4c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <vPortExitCritical+0x3e>
 800847c:	2300      	movs	r3, #0
 800847e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	2000000c 	.word	0x2000000c
	...

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	f01e 0f10 	tst.w	lr, #16
 80084b0:	bf08      	it	eq
 80084b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	6010      	str	r0, [r2, #0]
 80084bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084c0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80084c4:	f380 8811 	msr	BASEPRI, r0
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f7fe ff1a 	bl	8007308 <vTaskSwitchContext>
 80084d4:	f04f 0000 	mov.w	r0, #0
 80084d8:	f380 8811 	msr	BASEPRI, r0
 80084dc:	bc09      	pop	{r0, r3}
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	6808      	ldr	r0, [r1, #0]
 80084e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e6:	f01e 0f10 	tst.w	lr, #16
 80084ea:	bf08      	it	eq
 80084ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084f0:	f380 8809 	msr	PSP, r0
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst>:
 8008500:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008520:	f7fe fe36 	bl	8007190 <xTaskIncrementTick>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <SysTick_Handler+0x3c>)
 800852c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <vPortSetupTimerInterrupt+0x34>)
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <vPortSetupTimerInterrupt+0x38>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <vPortSetupTimerInterrupt+0x3c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <vPortSetupTimerInterrupt+0x40>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <vPortSetupTimerInterrupt+0x44>)
 8008566:	3b01      	subs	r3, #1
 8008568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856a:	4b04      	ldr	r3, [pc, #16]	; (800857c <vPortSetupTimerInterrupt+0x34>)
 800856c:	2207      	movs	r2, #7
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e010 	.word	0xe000e010
 8008580:	e000e018 	.word	0xe000e018
 8008584:	20000000 	.word	0x20000000
 8008588:	10624dd3 	.word	0x10624dd3
 800858c:	e000e014 	.word	0xe000e014

08008590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085a0 <vPortEnableVFP+0x10>
 8008594:	6801      	ldr	r1, [r0, #0]
 8008596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800859a:	6001      	str	r1, [r0, #0]
 800859c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800859e:	bf00      	nop
 80085a0:	e000ed88 	.word	0xe000ed88

080085a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085aa:	f3ef 8305 	mrs	r3, IPSR
 80085ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d913      	bls.n	80085de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085b6:	4a16      	ldr	r2, [pc, #88]	; (8008610 <vPortValidateInterruptPriority+0x6c>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085c0:	4b14      	ldr	r3, [pc, #80]	; (8008614 <vPortValidateInterruptPriority+0x70>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	7afa      	ldrb	r2, [r7, #11]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d209      	bcs.n	80085de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80085ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	607b      	str	r3, [r7, #4]
 80085dc:	e7fe      	b.n	80085dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <vPortValidateInterruptPriority+0x74>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085e6:	4b0d      	ldr	r3, [pc, #52]	; (800861c <vPortValidateInterruptPriority+0x78>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d909      	bls.n	8008602 <vPortValidateInterruptPriority+0x5e>
 80085ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	e7fe      	b.n	8008600 <vPortValidateInterruptPriority+0x5c>
	}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	e000e3f0 	.word	0xe000e3f0
 8008614:	20000994 	.word	0x20000994
 8008618:	e000ed0c 	.word	0xe000ed0c
 800861c:	20000998 	.word	0x20000998

08008620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800862c:	f7fe fcf6 	bl	800701c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008630:	4b57      	ldr	r3, [pc, #348]	; (8008790 <pvPortMalloc+0x170>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008638:	f000 f90c 	bl	8008854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800863c:	4b55      	ldr	r3, [pc, #340]	; (8008794 <pvPortMalloc+0x174>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4013      	ands	r3, r2
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 808c 	bne.w	8008762 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01c      	beq.n	800868a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008650:	2208      	movs	r2, #8
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4413      	add	r3, r2
 8008656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b00      	cmp	r3, #0
 8008660:	d013      	beq.n	800868a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f023 0307 	bic.w	r3, r3, #7
 8008668:	3308      	adds	r3, #8
 800866a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <pvPortMalloc+0x6a>
 8008676:	f04f 0330 	mov.w	r3, #48	; 0x30
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e7fe      	b.n	8008688 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d068      	beq.n	8008762 <pvPortMalloc+0x142>
 8008690:	4b41      	ldr	r3, [pc, #260]	; (8008798 <pvPortMalloc+0x178>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d863      	bhi.n	8008762 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800869a:	4b40      	ldr	r3, [pc, #256]	; (800879c <pvPortMalloc+0x17c>)
 800869c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800869e:	4b3f      	ldr	r3, [pc, #252]	; (800879c <pvPortMalloc+0x17c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086a4:	e004      	b.n	80086b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d903      	bls.n	80086c2 <pvPortMalloc+0xa2>
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f1      	bne.n	80086a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086c2:	4b33      	ldr	r3, [pc, #204]	; (8008790 <pvPortMalloc+0x170>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d04a      	beq.n	8008762 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2208      	movs	r2, #8
 80086d2:	4413      	add	r3, r2
 80086d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	2308      	movs	r3, #8
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d91e      	bls.n	800872c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <pvPortMalloc+0xf4>
 8008700:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	e7fe      	b.n	8008712 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	1ad2      	subs	r2, r2, r3
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008726:	69b8      	ldr	r0, [r7, #24]
 8008728:	f000 f8f6 	bl	8008918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <pvPortMalloc+0x178>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	4a18      	ldr	r2, [pc, #96]	; (8008798 <pvPortMalloc+0x178>)
 8008738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800873a:	4b17      	ldr	r3, [pc, #92]	; (8008798 <pvPortMalloc+0x178>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <pvPortMalloc+0x180>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d203      	bcs.n	800874e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <pvPortMalloc+0x178>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <pvPortMalloc+0x180>)
 800874c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	4b10      	ldr	r3, [pc, #64]	; (8008794 <pvPortMalloc+0x174>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	431a      	orrs	r2, r3
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008762:	f7fe fc69 	bl	8007038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <pvPortMalloc+0x164>
 8008770:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	e7fe      	b.n	8008782 <pvPortMalloc+0x162>
	return pvReturn;
 8008784:	69fb      	ldr	r3, [r7, #28]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3728      	adds	r7, #40	; 0x28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	200015a4 	.word	0x200015a4
 8008794:	200015b0 	.word	0x200015b0
 8008798:	200015a8 	.word	0x200015a8
 800879c:	2000159c 	.word	0x2000159c
 80087a0:	200015ac 	.word	0x200015ac

080087a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d046      	beq.n	8008844 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087b6:	2308      	movs	r3, #8
 80087b8:	425b      	negs	r3, r3
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	4b20      	ldr	r3, [pc, #128]	; (800884c <vPortFree+0xa8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4013      	ands	r3, r2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <vPortFree+0x42>
 80087d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e7fe      	b.n	80087e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <vPortFree+0x5e>
 80087ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60bb      	str	r3, [r7, #8]
 8008800:	e7fe      	b.n	8008800 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <vPortFree+0xa8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d019      	beq.n	8008844 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d115      	bne.n	8008844 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <vPortFree+0xa8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008828:	f7fe fbf8 	bl	800701c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <vPortFree+0xac>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4413      	add	r3, r2
 8008836:	4a06      	ldr	r2, [pc, #24]	; (8008850 <vPortFree+0xac>)
 8008838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f000 f86c 	bl	8008918 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008840:	f7fe fbfa 	bl	8007038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008844:	bf00      	nop
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200015b0 	.word	0x200015b0
 8008850:	200015a8 	.word	0x200015a8

08008854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800885a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800885e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <prvHeapInit+0xac>)
 8008862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00c      	beq.n	8008888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3307      	adds	r3, #7
 8008872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0307 	bic.w	r3, r3, #7
 800887a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	4a1f      	ldr	r2, [pc, #124]	; (8008900 <prvHeapInit+0xac>)
 8008884:	4413      	add	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800888c:	4a1d      	ldr	r2, [pc, #116]	; (8008904 <prvHeapInit+0xb0>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008892:	4b1c      	ldr	r3, [pc, #112]	; (8008904 <prvHeapInit+0xb0>)
 8008894:	2200      	movs	r2, #0
 8008896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	4413      	add	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088a0:	2208      	movs	r2, #8
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0307 	bic.w	r3, r3, #7
 80088ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4a15      	ldr	r2, [pc, #84]	; (8008908 <prvHeapInit+0xb4>)
 80088b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <prvHeapInit+0xb4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2200      	movs	r2, #0
 80088bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088be:	4b12      	ldr	r3, [pc, #72]	; (8008908 <prvHeapInit+0xb4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <prvHeapInit+0xb4>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <prvHeapInit+0xb8>)
 80088e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4a09      	ldr	r2, [pc, #36]	; (8008910 <prvHeapInit+0xbc>)
 80088ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088ec:	4b09      	ldr	r3, [pc, #36]	; (8008914 <prvHeapInit+0xc0>)
 80088ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	2000099c 	.word	0x2000099c
 8008904:	2000159c 	.word	0x2000159c
 8008908:	200015a4 	.word	0x200015a4
 800890c:	200015ac 	.word	0x200015ac
 8008910:	200015a8 	.word	0x200015a8
 8008914:	200015b0 	.word	0x200015b0

08008918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <prvInsertBlockIntoFreeList+0xac>)
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e002      	b.n	800892c <prvInsertBlockIntoFreeList+0x14>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d8f7      	bhi.n	8008926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d108      	bne.n	800895a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	441a      	add	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	441a      	add	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d118      	bne.n	80089a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d00d      	beq.n	8008996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	441a      	add	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e008      	b.n	80089a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e003      	b.n	80089a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d002      	beq.n	80089b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000159c 	.word	0x2000159c
 80089c8:	200015a4 	.word	0x200015a4

080089cc <init_uart_data_transfer>:
uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0,
		tx_complete = true;

void init_uart_data_transfer (void) {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	uart_data_transfer_events = xEventGroupCreate();
 80089d0:	f7fd f92c 	bl	8005c2c <xEventGroupCreate>
 80089d4:	4602      	mov	r2, r0
 80089d6:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <init_uart_data_transfer+0x34>)
 80089d8:	601a      	str	r2, [r3, #0]

	enable_idle_flag_interrupt = true;
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <init_uart_data_transfer+0x38>)
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <init_uart_data_transfer+0x3c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <init_uart_data_transfer+0x3c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0210 	orr.w	r2, r2, #16
 80089ee:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 80089f0:	2264      	movs	r2, #100	; 0x64
 80089f2:	4906      	ldr	r1, [pc, #24]	; (8008a0c <init_uart_data_transfer+0x40>)
 80089f4:	4804      	ldr	r0, [pc, #16]	; (8008a08 <init_uart_data_transfer+0x3c>)
 80089f6:	f7fc f99f 	bl	8004d38 <HAL_UART_Receive_DMA>
}
 80089fa:	bf00      	nop
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20001618 	.word	0x20001618
 8008a04:	2000161c 	.word	0x2000161c
 8008a08:	200018b8 	.word	0x200018b8
 8008a0c:	200015b4 	.word	0x200015b4

08008a10 <event_group_set_bit_from_isr>:

void transmit_data_by_uart (void) {
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
}

void event_group_set_bit_from_isr (EventGroupHandle_t event_group, uint32_t bit_to_set) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]

	xResult = xEventGroupSetBitsFromISR (event_group, bit_to_set, & xHigherPriorityTaskWoken);
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	480b      	ldr	r0, [pc, #44]	; (8008a54 <event_group_set_bit_from_isr+0x44>)
 8008a28:	f7ff fb96 	bl	8008158 <xTimerPendFunctionCallFromISR>
 8008a2c:	60f8      	str	r0, [r7, #12]

	if (xResult != pdFAIL) {
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <event_group_set_bit_from_isr+0x3a>
	  portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d007      	beq.n	8008a4a <event_group_set_bit_from_isr+0x3a>
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <event_group_set_bit_from_isr+0x48>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
	}
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	08005f07 	.word	0x08005f07
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2210      	movs	r2, #16
 8008a6a:	621a      	str	r2, [r3, #32]

	if(enable_idle_flag_interrupt){
 8008a6c:	4b13      	ldr	r3, [pc, #76]	; (8008abc <HAL_UART_IDLE_Callback+0x60>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_UART_IDLE_Callback+0x20>
		enable_idle_flag_interrupt = false;
 8008a74:	4b11      	ldr	r3, [pc, #68]	; (8008abc <HAL_UART_IDLE_Callback+0x60>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
		return;
 8008a7a:	e01c      	b.n	8008ab6 <HAL_UART_IDLE_Callback+0x5a>
	}

	if(tx_complete == false)
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <HAL_UART_IDLE_Callback+0x64>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	f083 0301 	eor.w	r3, r3, #1
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d114      	bne.n	8008ab4 <HAL_UART_IDLE_Callback+0x58>
		return;
	else
		tx_complete = false;
 8008a8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ac0 <HAL_UART_IDLE_Callback+0x64>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]

	HAL_UART_AbortReceive(huart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fc f9d5 	bl	8004e40 <HAL_UART_AbortReceive>
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <HAL_UART_IDLE_Callback+0x68>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <HAL_UART_IDLE_Callback+0x68>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0210 	bic.w	r2, r2, #16
 8008aa4:	601a      	str	r2, [r3, #0]

	event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 8008aa6:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <HAL_UART_IDLE_Callback+0x6c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff ffaf 	bl	8008a10 <event_group_set_bit_from_isr>
 8008ab2:	e000      	b.n	8008ab6 <HAL_UART_IDLE_Callback+0x5a>
		return;
 8008ab4:	bf00      	nop
}
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	2000161c 	.word	0x2000161c
 8008ac0:	20000010 	.word	0x20000010
 8008ac4:	200018b8 	.word	0x200018b8
 8008ac8:	20001618 	.word	0x20001618

08008acc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	event_group_set_bit_from_isr(uart_data_transfer_events, TX_DATA_COMPLETE);
 8008ad4:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <HAL_UART_TxCpltCallback+0x1c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2102      	movs	r1, #2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff ff98 	bl	8008a10 <event_group_set_bit_from_isr>
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20001618 	.word	0x20001618

08008aec <rx_uart_data_task>:

void rx_uart_data_task (void const * argument) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 8008af4:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <rx_uart_data_task+0x2c>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	2301      	movs	r3, #1
 8008b00:	2201      	movs	r2, #1
 8008b02:	2101      	movs	r1, #1
 8008b04:	f7fd f8ac 	bl	8005c60 <xEventGroupWaitBits>



*/
		// while not have parse call
		xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 8008b08:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <rx_uart_data_task+0x2c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2104      	movs	r1, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd f970 	bl	8005df4 <xEventGroupSetBits>
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 8008b14:	e7ee      	b.n	8008af4 <rx_uart_data_task+0x8>
 8008b16:	bf00      	nop
 8008b18:	20001618 	.word	0x20001618

08008b1c <tx_uart_data_task>:
	}
}

void tx_uart_data_task(void const * argument) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 8008b28:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <tx_uart_data_task+0x7c>)
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	2301      	movs	r3, #1
 8008b34:	2201      	movs	r2, #1
 8008b36:	2104      	movs	r1, #4
 8008b38:	f7fd f892 	bl	8005c60 <xEventGroupWaitBits>

		//get pointer tx_data
		//	tx_data = GET_POINTER_FUNCTION

		if(tx_data != 0)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <tx_uart_data_task+0x3c>
			HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7f7 fb44 	bl	80001d0 <strlen>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	4812      	ldr	r0, [pc, #72]	; (8008b9c <tx_uart_data_task+0x80>)
 8008b52:	f7fc f875 	bl	8004c40 <HAL_UART_Transmit_DMA>
 8008b56:	e004      	b.n	8008b62 <tx_uart_data_task+0x46>
		else
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error\r\n", strlen("debug message or error\r\n"));
 8008b58:	2218      	movs	r2, #24
 8008b5a:	4911      	ldr	r1, [pc, #68]	; (8008ba0 <tx_uart_data_task+0x84>)
 8008b5c:	480f      	ldr	r0, [pc, #60]	; (8008b9c <tx_uart_data_task+0x80>)
 8008b5e:	f7fc f86f 	bl	8004c40 <HAL_UART_Transmit_DMA>

		xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 8008b62:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <tx_uart_data_task+0x7c>)
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	2201      	movs	r2, #1
 8008b70:	2102      	movs	r1, #2
 8008b72:	f7fd f875 	bl	8005c60 <xEventGroupWaitBits>


		tx_complete = true;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <tx_uart_data_task+0x88>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8008b7c:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <tx_uart_data_task+0x80>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <tx_uart_data_task+0x80>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0210 	orr.w	r2, r2, #16
 8008b8a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8008b8c:	2264      	movs	r2, #100	; 0x64
 8008b8e:	4906      	ldr	r1, [pc, #24]	; (8008ba8 <tx_uart_data_task+0x8c>)
 8008b90:	4802      	ldr	r0, [pc, #8]	; (8008b9c <tx_uart_data_task+0x80>)
 8008b92:	f7fc f8d1 	bl	8004d38 <HAL_UART_Receive_DMA>
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 8008b96:	e7c7      	b.n	8008b28 <tx_uart_data_task+0xc>
 8008b98:	20001618 	.word	0x20001618
 8008b9c:	200018b8 	.word	0x200018b8
 8008ba0:	08008cdc 	.word	0x08008cdc
 8008ba4:	20000010 	.word	0x20000010
 8008ba8:	200015b4 	.word	0x200015b4

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4e0d      	ldr	r6, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1ba4      	subs	r4, r4, r6
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4e0b      	ldr	r6, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 f82c 	bl	8008c1c <_init>
 8008bc4:	1ba4      	subs	r4, r4, r6
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2500      	movs	r5, #0
 8008bca:	42a5      	cmp	r5, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bd4:	4798      	blx	r3
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bde:	4798      	blx	r3
 8008be0:	3501      	adds	r5, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08008d30 	.word	0x08008d30
 8008be8:	08008d30 	.word	0x08008d30
 8008bec:	08008d30 	.word	0x08008d30
 8008bf0:	08008d34 	.word	0x08008d34

08008bf4 <memcpy>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	1e43      	subs	r3, r0, #1
 8008bf8:	440a      	add	r2, r1
 8008bfa:	4291      	cmp	r1, r2
 8008bfc:	d100      	bne.n	8008c00 <memcpy+0xc>
 8008bfe:	bd10      	pop	{r4, pc}
 8008c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c08:	e7f7      	b.n	8008bfa <memcpy+0x6>

08008c0a <memset>:
 8008c0a:	4402      	add	r2, r0
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d100      	bne.n	8008c14 <memset+0xa>
 8008c12:	4770      	bx	lr
 8008c14:	f803 1b01 	strb.w	r1, [r3], #1
 8008c18:	e7f9      	b.n	8008c0e <memset+0x4>
	...

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
