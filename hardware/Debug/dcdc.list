
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009890  08009890  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08009890  08009890  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009890  08009890  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  2000010c  080099a4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b9c  080099a4  00021b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252cf  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e32  00000000  00000000  0004540b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a8  00000000  00000000  0004be60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d91  00000000  00000000  0004d808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019c32  00000000  00000000  00070599  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce19c  00000000  00000000  0008a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  001583e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009644 	.word	0x08009644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08009644 	.word	0x08009644

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001fa:	f107 031c 	add.w	r3, r7, #28
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800021c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000232:	2200      	movs	r2, #0
 8000234:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000246:	2201      	movs	r2, #1
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000252:	2201      	movs	r2, #1
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000260:	2204      	movs	r2, #4
 8000262:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000266:	2200      	movs	r2, #0
 8000268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000272:	f001 f887 	bl	8001384 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800027c:	f000 fe44 	bl	8000f08 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000284:	f107 031c 	add.w	r3, r7, #28
 8000288:	4619      	mov	r1, r3
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800028c:	f001 fcce 	bl	8001c2c <HAL_ADCEx_MultiModeConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000296:	f000 fe37 	bl	8000f08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800029a:	2306      	movs	r3, #6
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC1_Init+0xdc>)
 80002b8:	f001 f9f6 	bl	80016a8 <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002c2:	f000 fe21 	bl	8000f08 <Error_Handler>
  }

}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20001840 	.word	0x20001840

080002d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002ec:	4a27      	ldr	r2, [pc, #156]	; (800038c <MX_ADC2_Init+0xb8>)
 80002ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC2_Init+0xb4>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000318:	2201      	movs	r2, #1
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_ADC2_Init+0xb4>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000324:	2201      	movs	r2, #1
 8000326:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC2_Init+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC2_Init+0xb4>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000342:	4811      	ldr	r0, [pc, #68]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000344:	f001 f81e 	bl	8001384 <HAL_ADC_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800034e:	f000 fddb 	bl	8000f08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000352:	230c      	movs	r3, #12
 8000354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000356:	2301      	movs	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000370:	f001 f99a 	bl	80016a8 <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800037a:	f000 fdc5 	bl	8000f08 <Error_Handler>
  }

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200017f0 	.word	0x200017f0
 800038c:	50000100 	.word	0x50000100

08000390 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b0:	d16d      	bne.n	800048e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003b2:	4b72      	ldr	r3, [pc, #456]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a70      	ldr	r2, [pc, #448]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 80003ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80003bc:	4b6f      	ldr	r3, [pc, #444]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10b      	bne.n	80003dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80003c4:	4b6e      	ldr	r3, [pc, #440]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a6d      	ldr	r2, [pc, #436]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b6b      	ldr	r3, [pc, #428]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d8:	623b      	str	r3, [r7, #32]
 80003da:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b68      	ldr	r3, [pc, #416]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a67      	ldr	r2, [pc, #412]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b65      	ldr	r3, [pc, #404]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f0:	61fb      	str	r3, [r7, #28]
 80003f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b62      	ldr	r3, [pc, #392]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a61      	ldr	r2, [pc, #388]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80003fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b5f      	ldr	r3, [pc, #380]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000408:	61bb      	str	r3, [r7, #24]
 800040a:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800040c:	2303      	movs	r3, #3
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	2303      	movs	r3, #3
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	4619      	mov	r1, r3
 800041e:	4859      	ldr	r0, [pc, #356]	; (8000584 <HAL_ADC_MspInit+0x1f4>)
 8000420:	f002 f826 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000424:	2303      	movs	r3, #3
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000428:	2303      	movs	r3, #3
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000434:	4619      	mov	r1, r3
 8000436:	4854      	ldr	r0, [pc, #336]	; (8000588 <HAL_ADC_MspInit+0x1f8>)
 8000438:	f002 f81a 	bl	8002470 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800043c:	4b53      	ldr	r3, [pc, #332]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 800043e:	4a54      	ldr	r2, [pc, #336]	; (8000590 <HAL_ADC_MspInit+0x200>)
 8000440:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000442:	4b52      	ldr	r3, [pc, #328]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000448:	4b50      	ldr	r3, [pc, #320]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800044e:	4b4f      	ldr	r3, [pc, #316]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000454:	4b4d      	ldr	r3, [pc, #308]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800045a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800045c:	4b4b      	ldr	r3, [pc, #300]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 800045e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000462:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000464:	4b49      	ldr	r3, [pc, #292]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000466:	2220      	movs	r2, #32
 8000468:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800046a:	4b48      	ldr	r3, [pc, #288]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000470:	4846      	ldr	r0, [pc, #280]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000472:	f001 fde3 	bl	800203c <HAL_DMA_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800047c:	f000 fd44 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a42      	ldr	r2, [pc, #264]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000484:	639a      	str	r2, [r3, #56]	; 0x38
 8000486:	4a41      	ldr	r2, [pc, #260]	; (800058c <HAL_ADC_MspInit+0x1fc>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800048c:	e071      	b.n	8000572 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a40      	ldr	r2, [pc, #256]	; (8000594 <HAL_ADC_MspInit+0x204>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d16c      	bne.n	8000572 <HAL_ADC_MspInit+0x1e2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000498:	4b38      	ldr	r3, [pc, #224]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a37      	ldr	r2, [pc, #220]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 80004a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a2:	4b36      	ldr	r3, [pc, #216]	; (800057c <HAL_ADC_MspInit+0x1ec>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10b      	bne.n	80004c2 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004aa:	4b35      	ldr	r3, [pc, #212]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a34      	ldr	r2, [pc, #208]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b32      	ldr	r3, [pc, #200]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a28      	ldr	r2, [pc, #160]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b26      	ldr	r3, [pc, #152]	; (8000580 <HAL_ADC_MspInit+0x1f0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230c      	movs	r3, #12
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f6:	2303      	movs	r3, #3
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	4619      	mov	r1, r3
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <HAL_ADC_MspInit+0x1f4>)
 8000506:	f001 ffb3 	bl	8002470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800050a:	2304      	movs	r3, #4
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4619      	mov	r1, r3
 800051c:	481a      	ldr	r0, [pc, #104]	; (8000588 <HAL_ADC_MspInit+0x1f8>)
 800051e:	f001 ffa7 	bl	8002470 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000524:	4a1d      	ldr	r2, [pc, #116]	; (800059c <HAL_ADC_MspInit+0x20c>)
 8000526:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <HAL_ADC_MspInit+0x208>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <HAL_ADC_MspInit+0x208>)
 800053c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000540:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000548:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <HAL_ADC_MspInit+0x208>)
 800054c:	2220      	movs	r2, #32
 800054e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <HAL_ADC_MspInit+0x208>)
 8000558:	f001 fd70 	bl	800203c <HAL_DMA_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8000562:	f000 fcd1 	bl	8000f08 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <HAL_ADC_MspInit+0x208>)
 800056a:	639a      	str	r2, [r3, #56]	; 0x38
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_ADC_MspInit+0x208>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000572:	bf00      	nop
 8000574:	3738      	adds	r7, #56	; 0x38
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000128 	.word	0x20000128
 8000580:	40021000 	.word	0x40021000
 8000584:	48000800 	.word	0x48000800
 8000588:	48000400 	.word	0x48000400
 800058c:	20001890 	.word	0x20001890
 8000590:	40020008 	.word	0x40020008
 8000594:	50000100 	.word	0x50000100
 8000598:	200018d4 	.word	0x200018d4
 800059c:	4002001c 	.word	0x4002001c

080005a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_DMA_Init+0x68>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MX_DMA_Init+0x68>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_DMA_Init+0x68>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2103      	movs	r1, #3
 80005c2:	200b      	movs	r0, #11
 80005c4:	f001 fd10 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f001 fd29 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2103      	movs	r1, #3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 fd08 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f001 fd21 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2103      	movs	r1, #3
 80005e2:	200e      	movs	r0, #14
 80005e4:	f001 fd00 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005e8:	200e      	movs	r0, #14
 80005ea:	f001 fd19 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2103      	movs	r1, #3
 80005f2:	200f      	movs	r0, #15
 80005f4:	f001 fcf8 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005f8:	200f      	movs	r0, #15
 80005fa:	f001 fd11 	bl	8002020 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000012c 	.word	0x2000012c
 800063c:	20000180 	.word	0x20000180

08000640 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <vApplicationGetTimerTaskMemory+0x2c>)
 8000650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <vApplicationGetTimerTaskMemory+0x30>)
 8000656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000380 	.word	0x20000380
 8000670:	200003d4 	.word	0x200003d4

08000674 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b09a      	sub	sp, #104	; 0x68
 8000678:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_FREERTOS_Init+0x9c>)
 800067c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000682:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 8000686:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fbe3 	bl	8005e58 <osMessageCreate>
 8000692:	4602      	mov	r2, r0
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_FREERTOS_Init+0xa0>)
 8000696:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_FREERTOS_Init+0xa4>)
 800069a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fb70 	bl	8005d98 <osThreadCreate>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_FREERTOS_Init+0xa8>)
 80006bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityLow, 0, 128);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_FREERTOS_Init+0xac>)
 80006c0:	f107 0420 	add.w	r4, r7, #32
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 fb5d 	bl	8005d98 <osThreadCreate>
 80006de:	4602      	mov	r2, r0
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_FREERTOS_Init+0xb0>)
 80006e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityLow, 0, 128);
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_FREERTOS_Init+0xb4>)
 80006e6:	1d3c      	adds	r4, r7, #4
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fb4c 	bl	8005d98 <osThreadCreate>
 8000700:	4602      	mov	r2, r0
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_FREERTOS_Init+0xb8>)
 8000704:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000706:	bf00      	nop
 8000708:	3768      	adds	r7, #104	; 0x68
 800070a:	46bd      	mov	sp, r7
 800070c:	bdb0      	pop	{r4, r5, r7, pc}
 800070e:	bf00      	nop
 8000710:	0800965c 	.word	0x0800965c
 8000714:	20001920 	.word	0x20001920
 8000718:	08009678 	.word	0x08009678
 800071c:	2000191c 	.word	0x2000191c
 8000720:	080096a4 	.word	0x080096a4
 8000724:	20001924 	.word	0x20001924
 8000728:	080096d0 	.word	0x080096d0
 800072c:	20001918 	.word	0x20001918

08000730 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <StartDefaultTask+0x5c>)
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2264      	movs	r2, #100	; 0x64
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fbb2 	bl	8005eac <osMessageGet>
	if (event.status == osEventMessage) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2b10      	cmp	r3, #16
 800074c:	d11a      	bne.n	8000784 <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <StartDefaultTask+0x60>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	b2c9      	uxtb	r1, r1
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <StartDefaultTask+0x64>)
 800075a:	5499      	strb	r1, [r3, r2]
		num_cell++;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <StartDefaultTask+0x60>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <StartDefaultTask+0x60>)
 8000766:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <StartDefaultTask+0x60>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <StartDefaultTask+0x64>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <StartDefaultTask+0x4e>
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <StartDefaultTask+0x60>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b64      	cmp	r3, #100	; 0x64
 800077c:	d102      	bne.n	8000784 <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <StartDefaultTask+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f005 fb53 	bl	8005e30 <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 800078a:	e7d5      	b.n	8000738 <StartDefaultTask+0x8>
 800078c:	20001920 	.word	0x20001920
 8000790:	200007d4 	.word	0x200007d4
 8000794:	200007d8 	.word	0x200007d8

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_GPIO_Init+0x74>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a1a      	ldr	r2, [pc, #104]	; (800080c <MX_GPIO_Init+0x74>)
 80007a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0x74>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0x74>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_GPIO_Init+0x74>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0x74>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x74>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MX_GPIO_Init+0x74>)
 80007d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_GPIO_Init+0x74>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0x74>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0x74>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0x74>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0a4      	sub	sp, #144	; 0x90
 8000814:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000816:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000828:	2254      	movs	r2, #84	; 0x54
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f008 feda 	bl	80095e6 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fece 	bl	80095e6 <memset>

  hhrtim1.Instance = HRTIM1;
 800084a:	4bc7      	ldr	r3, [pc, #796]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 800084c:	4ac7      	ldr	r2, [pc, #796]	; (8000b6c <MX_HRTIM1_Init+0x35c>)
 800084e:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000850:	4bc5      	ldr	r3, [pc, #788]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000856:	4bc4      	ldr	r3, [pc, #784]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800085c:	48c2      	ldr	r0, [pc, #776]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 800085e:	f001 ff79 	bl	8002754 <HAL_HRTIM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_HRTIM1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 fb4e 	bl	8000f08 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 800086c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800087a:	2305      	movs	r3, #5
 800087c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000880:	2308      	movs	r3, #8
 8000882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000886:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800088a:	461a      	mov	r2, r3
 800088c:	2105      	movs	r1, #5
 800088e:	48b6      	ldr	r0, [pc, #728]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000890:	f002 f82c 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_HRTIM1_Init+0x8e>
  {
    Error_Handler();
 800089a:	f000 fb35 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80008aa:	2300      	movs	r3, #0
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80008b2:	2300      	movs	r3, #0
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80008ba:	2300      	movs	r3, #0
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80008c2:	2300      	movs	r3, #0
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80008ce:	2300      	movs	r3, #0
 80008d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	461a      	mov	r2, r3
 80008d8:	2105      	movs	r1, #5
 80008da:	48a3      	ldr	r0, [pc, #652]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 80008dc:	f002 f82e 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_HRTIM1_Init+0xda>
  {
    Error_Handler();
 80008e6:	f000 fb0f 	bl	8000f08 <Error_Handler>
  }
  pCompareCfg.CompareValue = 160;
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2201      	movs	r2, #1
 80008f4:	2105      	movs	r1, #5
 80008f6:	489c      	ldr	r0, [pc, #624]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 80008f8:	f002 f892 	bl	8002a20 <HAL_HRTIM_WaveformCompareConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_HRTIM1_Init+0xf6>
  {
    Error_Handler();
 8000902:	f000 fb01 	bl	8000f08 <Error_Handler>
  }
  pCompareCfg.CompareValue = 320;
 8000906:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800090a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	2202      	movs	r2, #2
 8000912:	2105      	movs	r1, #5
 8000914:	4894      	ldr	r0, [pc, #592]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000916:	f002 f883 	bl	8002a20 <HAL_HRTIM_WaveformCompareConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_HRTIM1_Init+0x114>
  {
    Error_Handler();
 8000920:	f000 faf2 	bl	8000f08 <Error_Handler>
  }
  pCompareCfg.CompareValue = 480;
 8000924:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000928:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2204      	movs	r2, #4
 8000930:	2105      	movs	r1, #5
 8000932:	488d      	ldr	r0, [pc, #564]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000934:	f002 f874 	bl	8002a20 <HAL_HRTIM_WaveformCompareConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 800093e:	f000 fae3 	bl	8000f08 <Error_Handler>
  }
  pCompareCfg.CompareValue = 640;
 8000942:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000946:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	2208      	movs	r2, #8
 800094e:	2105      	movs	r1, #5
 8000950:	4885      	ldr	r0, [pc, #532]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000952:	f002 f865 	bl	8002a20 <HAL_HRTIM_WaveformCompareConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_HRTIM1_Init+0x150>
  {
    Error_Handler();
 800095c:	f000 fad4 	bl	8000f08 <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 8000960:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000968:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800096c:	461a      	mov	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	487d      	ldr	r0, [pc, #500]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000972:	f001 ffbb 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 800097c:	f000 fac4 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000990:	2301      	movs	r3, #1
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000994:	2300      	movs	r3, #0
 8000996:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000998:	2300      	movs	r3, #0
 800099a:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80009b0:	2300      	movs	r3, #0
 80009b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80009b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b8:	461a      	mov	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	486a      	ldr	r0, [pc, #424]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 80009be:	f001 ffbd 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 80009c8:	f000 fa9e 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	461a      	mov	r2, r3
 80009de:	2101      	movs	r1, #1
 80009e0:	4861      	ldr	r0, [pc, #388]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 80009e2:	f001 ffab 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_HRTIM1_Init+0x1e0>
  {
    Error_Handler();
 80009ec:	f000 fa8c 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	461a      	mov	r2, r3
 8000a02:	2102      	movs	r1, #2
 8000a04:	4858      	ldr	r0, [pc, #352]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000a06:	f001 ff99 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_HRTIM1_Init+0x204>
  {
    Error_Handler();
 8000a10:	f000 fa7a 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000a20:	2300      	movs	r3, #0
 8000a22:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000a2e:	f001 ff85 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_HRTIM1_Init+0x22c>
  {
    Error_Handler();
 8000a38:	f000 fa66 	bl	8000f08 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMASrcAddress = 0x0000;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	461a      	mov	r2, r3
 8000a52:	2104      	movs	r1, #4
 8000a54:	4844      	ldr	r0, [pc, #272]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000a56:	f001 ff71 	bl	800293c <HAL_HRTIM_WaveformTimerConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_HRTIM1_Init+0x254>
  {
    Error_Handler();
 8000a60:	f000 fa52 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a72:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4836      	ldr	r0, [pc, #216]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000a90:	f002 f934 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8000a9a:	f000 fa35 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa6:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	482c      	ldr	r0, [pc, #176]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000ab6:	f002 f921 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_HRTIM1_Init+0x2b4>
  {
    Error_Handler();
 8000ac0:	f000 fa22 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000acc:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4823      	ldr	r0, [pc, #140]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000adc:	f002 f90e 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8000ae6:	f000 fa0f 	bl	8000f08 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2240      	movs	r2, #64	; 0x40
 8000aee:	2103      	movs	r1, #3
 8000af0:	481d      	ldr	r0, [pc, #116]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000af2:	f002 f903 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_HRTIM1_Init+0x2f0>
  {
    Error_Handler();
 8000afc:	f000 fa04 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4815      	ldr	r0, [pc, #84]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000b12:	f002 f8f3 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_HRTIM1_Init+0x310>
  {
    Error_Handler();
 8000b1c:	f000 f9f4 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2202      	movs	r2, #2
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000b34:	f002 f8e2 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8000b3e:	f000 f9e3 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2208      	movs	r2, #8
 8000b52:	2101      	movs	r1, #1
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_HRTIM1_Init+0x358>)
 8000b56:	f002 f8d1 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d007      	beq.n	8000b70 <MX_HRTIM1_Init+0x360>
  {
    Error_Handler();
 8000b60:	f000 f9d2 	bl	8000f08 <Error_Handler>
 8000b64:	e004      	b.n	8000b70 <MX_HRTIM1_Init+0x360>
 8000b66:	bf00      	nop
 8000b68:	20001928 	.word	0x20001928
 8000b6c:	40017400 	.word	0x40017400
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b74:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2220      	movs	r2, #32
 8000b80:	2102      	movs	r1, #2
 8000b82:	4831      	ldr	r0, [pc, #196]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000b84:	f002 f8ba 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_HRTIM1_Init+0x382>
  {
    Error_Handler();
 8000b8e:	f000 f9bb 	bl	8000f08 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	2103      	movs	r1, #3
 8000b98:	482b      	ldr	r0, [pc, #172]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000b9a:	f002 f8af 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_HRTIM1_Init+0x398>
  {
    Error_Handler();
 8000ba4:	f000 f9b0 	bl	8000f08 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000bba:	f002 f89f 	bl	8002cfc <HAL_HRTIM_WaveformOutputConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_HRTIM1_Init+0x3b8>
  {
    Error_Handler();
 8000bc4:	f000 f9a0 	bl	8000f08 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000bc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2101      	movs	r1, #1
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000bd2:	f001 fe8b 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_HRTIM1_Init+0x3d0>
  {
    Error_Handler();
 8000bdc:	f000 f994 	bl	8000f08 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000be0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000be8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bec:	461a      	mov	r2, r3
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000bf2:	f001 fe7b 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_HRTIM1_Init+0x3f0>
  {
    Error_Handler();
 8000bfc:	f000 f984 	bl	8000f08 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000c00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c04:	461a      	mov	r2, r3
 8000c06:	2103      	movs	r1, #3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000c0a:	f001 fe6f 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_HRTIM1_Init+0x408>
  {
    Error_Handler();
 8000c14:	f000 f978 	bl	8000f08 <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 8000c18:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000c20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c24:	461a      	mov	r2, r3
 8000c26:	2104      	movs	r1, #4
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000c2a:	f001 fe5f 	bl	80028ec <HAL_HRTIM_TimeBaseConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_HRTIM1_Init+0x428>
  {
    Error_Handler();
 8000c34:	f000 f968 	bl	8000f08 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_HRTIM1_Init+0x438>)
 8000c3a:	f000 f827 	bl	8000c8c <HAL_HRTIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3790      	adds	r7, #144	; 0x90
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20001928 	.word	0x20001928

08000c4c <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_HRTIM_MspInit+0x38>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10b      	bne.n	8000c76 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_HRTIM_MspInit+0x3c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_HRTIM_MspInit+0x3c>)
 8000c64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_HRTIM_MspInit+0x3c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40017400 	.word	0x40017400
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_HRTIM_MspPostInit+0xdc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d157      	bne.n	8000d5e <HAL_HRTIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a2e      	ldr	r2, [pc, #184]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	6153      	str	r3, [r2, #20]
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_HRTIM_MspPostInit+0xe0>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cf6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000d08:	230d      	movs	r3, #13
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4817      	ldr	r0, [pc, #92]	; (8000d70 <HAL_HRTIM_MspPostInit+0xe4>)
 8000d14:	f001 fbac 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <HAL_HRTIM_MspPostInit+0xe8>)
 8000d36:	f001 fb9b 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d3a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000d4c:	230d      	movs	r3, #13
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 fb89 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40017400 	.word	0x40017400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48000800 	.word	0x48000800

08000d78 <set_vol_cut_off>:
#include "system_config/system_config_internal.h"
#include "measurements/measurements_internal.h"

#include <string.h>

void set_vol_cut_off (void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d7c:	f008 fa86 	bl	800928c <save_data_from_set>
	set_for_voltage_cut_off();
 8000d80:	f008 fa67 	bl	8009252 <set_for_voltage_cut_off>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <set_charge_current>:

void set_charge_current (void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d8c:	f008 fa7e 	bl	800928c <save_data_from_set>
	set_for_charge_current();
 8000d90:	f008 fa66 	bl	8009260 <set_for_charge_current>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <set_battery_type>:

void set_battery_type (void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d9c:	f008 fa76 	bl	800928c <save_data_from_set>
	set_for_battery_type();
 8000da0:	f008 fa65 	bl	800926e <set_for_battery_type>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <get_vol_cut_off>:
		RESP_INVALID_PARAMETER)
};
	
// HERE MUST BE DECLARATIONS ONLY!
// NOT IMPLEMENTETIONS!
void get_vol_cut_off (void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_voltage_cut_off());
 8000dac:	f008 f946 	bl	800903c <get_for_voltage_cut_off>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 fa80 	bl	80092b8 <save_data_from_get>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <get_charge_current>:

void get_charge_current (void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_charge_current());
 8000dc0:	f008 f944 	bl	800904c <get_for_charge_current>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 fa76 	bl	80092b8 <save_data_from_get>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <get_battery_type>:

void get_battery_type (void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_battery_type());
 8000dd4:	f008 fa52 	bl	800927c <get_for_battery_type>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f008 fa6c 	bl	80092b8 <save_data_from_get>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fa96 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f81a 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f7ff fcd2 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f7ff fbd4 	bl	80005a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000df8:	f000 f994 	bl	8001124 <MX_USART1_UART_Init>
  MX_HRTIM1_Init();
 8000dfc:	f7ff fd08 	bl	8000810 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8000e00:	f7ff f9f8 	bl	80001f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e04:	f7ff fa66 	bl	80002d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
//  INIT PARSER EXAMPLE:
  parser_create(&smart_charger_commands, MAX_CMD_LEN);
 8000e08:	211e      	movs	r1, #30
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <main+0x3c>)
 8000e0c:	f008 f926 	bl	800905c <parser_create>
  init_uart_data_transfer();
 8000e10:	f008 fa6a 	bl	80092e8 <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000e14:	f7ff fc2e 	bl	8000674 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000e18:	f004 ffb7 	bl	8005d8a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <main+0x38>
 8000e1e:	bf00      	nop
 8000e20:	200000a0 	.word	0x200000a0

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f008 fbd7 	bl	80095e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e62:	2310      	movs	r3, #16
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	2302      	movs	r3, #2
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e6e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fa9d 	bl	80033b8 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e84:	f000 f840 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 f98f 	bl	80041c8 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000eb0:	f000 f82a 	bl	8000f08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 8000eb4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eb8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fbe4 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ed6:	f000 f817 	bl	8000f08 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	; 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef6:	f000 fa25 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40012c00 	.word	0x40012c00

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_MspInit+0x70>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_MspInit+0x70>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_MspInit+0x70>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_MspInit+0x70>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_MspInit+0x70>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_MspInit+0x70>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	f06f 0009 	mvn.w	r0, #9
 8000f56:	f001 f847 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	f06f 0004 	mvn.w	r0, #4
 8000f62:	f001 f841 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2101      	movs	r1, #1
 8000f6a:	f06f 0003 	mvn.w	r0, #3
 8000f6e:	f001 f83b 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f001 f835 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f001 f821 	bl	8001fe8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f001 f83a 	bl	8002020 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_InitTick+0x9c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_InitTick+0x9c>)
 8000fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_InitTick+0x9c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fb30 	bl	8004634 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fd4:	f003 fb0c 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8000fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <HAL_InitTick+0xa0>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0c9b      	lsrs	r3, r3, #18
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_InitTick+0xa4>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <HAL_InitTick+0xa8>)
 8000fec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_InitTick+0xa4>)
 8000ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_InitTick+0xa4>)
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_InitTick+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_InitTick+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_InitTick+0xa4>)
 800100a:	f003 fc7b 	bl	8004904 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d104      	bne.n	800101e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <HAL_InitTick+0xa4>)
 8001016:	f003 fcab 	bl	8004970 <HAL_TIM_Base_Start_IT>
 800101a:	4603      	mov	r3, r0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3730      	adds	r7, #48	; 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	431bde83 	.word	0x431bde83
 8001030:	20001a10 	.word	0x20001a10
 8001034:	40012c00 	.word	0x40012c00

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Channel1_IRQHandler+0x10>)
 8001072:	f001 f900 	bl	8002276 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001890 	.word	0x20001890

08001080 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA1_Channel2_IRQHandler+0x10>)
 8001086:	f001 f8f6 	bl	8002276 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200018d4 	.word	0x200018d4

08001094 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel4_IRQHandler+0x10>)
 800109a:	f001 f8ec 	bl	8002276 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20001a50 	.word	0x20001a50

080010a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Channel5_IRQHandler+0x10>)
 80010ae:	f001 f8e2 	bl	8002276 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20001a94 	.word	0x20001a94

080010bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010c2:	f003 fc7f 	bl	80049c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20001a10 	.word	0x20001a10

080010d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <USART1_IRQHandler+0x24>)
 80010d6:	f004 f89d 	bl	8005214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <USART1_IRQHandler+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d102      	bne.n	80010ee <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <USART1_IRQHandler+0x24>)
 80010ea:	f008 f945 	bl	8009378 <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20001ad8 	.word	0x20001ad8

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SystemInit+0x28>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <SystemInit+0x28>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SystemInit+0x28>)
 800110e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001112:	609a      	str	r2, [r3, #8]
#endif
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART1_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_USART1_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_USART1_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART1_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART1_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART1_UART_Init+0x58>)
 8001168:	f003 fe0a 	bl	8004d80 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f7ff fec9 	bl	8000f08 <Error_Handler>
  }

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20001ad8 	.word	0x20001ad8
 8001180:	40013800 	.word	0x40013800

08001184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d17b      	bne.n	800129e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a40      	ldr	r2, [pc, #256]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_UART_MspInit+0x128>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d6:	23c0      	movs	r3, #192	; 0xc0
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	482f      	ldr	r0, [pc, #188]	; (80012b0 <HAL_UART_MspInit+0x12c>)
 80011f2:	f001 f93d 	bl	8002470 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <HAL_UART_MspInit+0x130>)
 80011f8:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_UART_MspInit+0x134>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_UART_MspInit+0x130>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_UART_MspInit+0x130>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_UART_MspInit+0x130>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001228:	f000 ff08 	bl	800203c <HAL_DMA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001232:	f7ff fe69 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_UART_MspInit+0x130>)
 800123a:	66da      	str	r2, [r3, #108]	; 0x6c
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_UART_MspInit+0x130>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_UART_MspInit+0x13c>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_UART_MspInit+0x138>)
 800124a:	2210      	movs	r2, #16
 800124c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0x138>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_MspInit+0x138>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001274:	f000 fee2 	bl	800203c <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800127e:	f7ff fe43 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_UART_MspInit+0x138>)
 8001286:	669a      	str	r2, [r3, #104]	; 0x68
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_UART_MspInit+0x138>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	2025      	movs	r0, #37	; 0x25
 8001294:	f000 fea8 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001298:	2025      	movs	r0, #37	; 0x25
 800129a:	f000 fec1 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	20001a94 	.word	0x20001a94
 80012b8:	40020058 	.word	0x40020058
 80012bc:	20001a50 	.word	0x20001a50
 80012c0:	40020044 	.word	0x40020044

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ca:	e003      	b.n	80012d4 <LoopCopyDataInit>

080012cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012d2:	3104      	adds	r1, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012dc:	d3f6      	bcc.n	80012cc <CopyDataInit>
	ldr	r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e0:	e002      	b.n	80012e8 <LoopFillZerobss>

080012e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e4:	f842 3b04 	str.w	r3, [r2], #4

080012e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <LoopForever+0x16>)
	cmp	r2, r3
 80012ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012ec:	d3f9      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ee:	f7ff ff03 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f008 f949 	bl	8009588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fd75 	bl	8000de4 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012fc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001300:	08009898 	.word	0x08009898
	ldr	r0, =_sdata
 8001304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001308:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 800130c:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 8001310:	20001b9c 	.word	0x20001b9c

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 fe52 	bl	8001fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fe2c 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fdf0 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200000e4 	.word	0x200000e4
 8001368:	20001b58 	.word	0x20001b58

0800136c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20001b58 	.word	0x20001b58

08001384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09a      	sub	sp, #104	; 0x68
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e172      	b.n	800168a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d176      	bne.n	80014a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d152      	bne.n	8001464 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7fe ffd9 	bl	8000390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d13b      	bne.n	8001464 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fce3 	bl	8001db8 <ADC_Disable>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	d12f      	bne.n	8001464 <HAL_ADC_Init+0xe0>
 8001404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001408:	2b00      	cmp	r3, #0
 800140a:	d12b      	bne.n	8001464 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001414:	f023 0302 	bic.w	r3, r3, #2
 8001418:	f043 0202 	orr.w	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800142e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800143e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001440:	4b94      	ldr	r3, [pc, #592]	; (8001694 <HAL_ADC_Init+0x310>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a94      	ldr	r2, [pc, #592]	; (8001698 <HAL_ADC_Init+0x314>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9a      	lsrs	r2, r3, #18
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001456:	e002      	b.n	800145e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3b01      	subs	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f9      	bne.n	8001458 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800147c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001480:	d110      	bne.n	80014a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f023 0312 	bic.w	r3, r3, #18
 800148a:	f043 0210 	orr.w	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80df 	bne.w	8001670 <HAL_ADC_Init+0x2ec>
 80014b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 80da 	bne.w	8001670 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 80d2 	bne.w	8001670 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014d4:	f043 0202 	orr.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b6f      	ldr	r3, [pc, #444]	; (800169c <HAL_ADC_Init+0x318>)
 80014de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e8:	d102      	bne.n	80014f0 <HAL_ADC_Init+0x16c>
 80014ea:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <HAL_ADC_Init+0x31c>)
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_Init+0x172>
 80014f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <HAL_ADC_Init+0x192>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x192>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_ADC_Init+0x194>
 8001516:	2300      	movs	r3, #0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11c      	bne.n	8001556 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800151c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_ADC_Init+0x1ba>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_Init+0x1ba>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_ADC_Init+0x1bc>
 800153e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	431a      	orrs	r2, r3
 8001552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001554:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e5b      	ldrb	r3, [r3, #25]
 800155a:	035b      	lsls	r3, r3, #13
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001560:	2a01      	cmp	r2, #1
 8001562:	d002      	beq.n	800156a <HAL_ADC_Init+0x1e6>
 8001564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001568:	e000      	b.n	800156c <HAL_ADC_Init+0x1e8>
 800156a:	2200      	movs	r2, #0
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4313      	orrs	r3, r2
 800157a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157c:	4313      	orrs	r3, r2
 800157e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d11b      	bne.n	80015c2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	045a      	lsls	r2, r3, #17
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	4313      	orrs	r3, r2
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	663b      	str	r3, [r7, #96]	; 0x60
 80015a4:	e00d      	b.n	80015c2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80015ae:	f043 0220 	orr.w	r2, r3, #32
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d007      	beq.n	80015da <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	4313      	orrs	r3, r2
 80015d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d6:	4313      	orrs	r3, r2
 80015d8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d114      	bne.n	8001612 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015f6:	f023 0302 	bic.w	r3, r3, #2
 80015fa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	039a      	lsls	r2, r3, #14
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4313      	orrs	r3, r2
 800160c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800160e:	4313      	orrs	r3, r2
 8001610:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_ADC_Init+0x320>)
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001622:	430b      	orrs	r3, r1
 8001624:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10c      	bne.n	8001648 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f023 010f 	bic.w	r1, r3, #15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
 8001646:	e007      	b.n	8001658 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 020f 	bic.w	r2, r2, #15
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
 800166e:	e00a      	b.n	8001686 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f023 0312 	bic.w	r3, r3, #18
 8001678:	f043 0210 	orr.w	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001686:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800168a:	4618      	mov	r0, r3
 800168c:	3768      	adds	r7, #104	; 0x68
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000dc 	.word	0x200000dc
 8001698:	431bde83 	.word	0x431bde83
 800169c:	50000300 	.word	0x50000300
 80016a0:	50000100 	.word	0x50000100
 80016a4:	fff0c007 	.word	0xfff0c007

080016a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b09b      	sub	sp, #108	; 0x6c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x22>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e2a5      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x56e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f040 8289 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d81c      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	461a      	mov	r2, r3
 80016fe:	231f      	movs	r3, #31
 8001700:	4093      	lsls	r3, r2
 8001702:	43db      	mvns	r3, r3
 8001704:	4019      	ands	r1, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
 8001722:	e063      	b.n	80017ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b09      	cmp	r3, #9
 800172a:	d81e      	bhi.n	800176a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3b1e      	subs	r3, #30
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	4019      	ands	r1, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	3b1e      	subs	r3, #30
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
 8001768:	e040      	b.n	80017ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b0e      	cmp	r3, #14
 8001770:	d81e      	bhi.n	80017b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	3b3c      	subs	r3, #60	; 0x3c
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	3b3c      	subs	r3, #60	; 0x3c
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
 80017ae:	e01d      	b.n	80017ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	3b5a      	subs	r3, #90	; 0x5a
 80017c4:	221f      	movs	r2, #31
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	4019      	ands	r1, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	3b5a      	subs	r3, #90	; 0x5a
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80e5 	bne.w	80019c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b09      	cmp	r3, #9
 8001802:	d91c      	bls.n	800183e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6999      	ldr	r1, [r3, #24]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3b1e      	subs	r3, #30
 8001816:	2207      	movs	r2, #7
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	4019      	ands	r1, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6898      	ldr	r0, [r3, #8]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	3b1e      	subs	r3, #30
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	e019      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6959      	ldr	r1, [r3, #20]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	2207      	movs	r2, #7
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	4019      	ands	r1, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	3b01      	subs	r3, #1
 8001890:	2b03      	cmp	r3, #3
 8001892:	d84f      	bhi.n	8001934 <HAL_ADC_ConfigChannel+0x28c>
 8001894:	a201      	add	r2, pc, #4	; (adr r2, 800189c <HAL_ADC_ConfigChannel+0x1f4>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018cf 	.word	0x080018cf
 80018a4:	080018f1 	.word	0x080018f1
 80018a8:	08001913 	.word	0x08001913
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b2:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_ADC_ConfigChannel+0x484>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	0691      	lsls	r1, r2, #26
 80018bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018be:	430a      	orrs	r2, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018cc:	e07e      	b.n	80019cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d4:	4b95      	ldr	r3, [pc, #596]	; (8001b2c <HAL_ADC_ConfigChannel+0x484>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	0691      	lsls	r1, r2, #26
 80018de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e0:	430a      	orrs	r2, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ee:	e06d      	b.n	80019cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f6:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <HAL_ADC_ConfigChannel+0x484>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	0691      	lsls	r1, r2, #26
 8001900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001902:	430a      	orrs	r2, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001910:	e05c      	b.n	80019cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_ADC_ConfigChannel+0x484>)
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	0691      	lsls	r1, r2, #26
 8001922:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001924:	430a      	orrs	r2, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001930:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001932:	e04b      	b.n	80019cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	069b      	lsls	r3, r3, #26
 8001944:	429a      	cmp	r2, r3
 8001946:	d107      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001956:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800195e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800197a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	069b      	lsls	r3, r3, #26
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800199e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10a      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019c4:	e001      	b.n	80019ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80019ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x344>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x344>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_ADC_ConfigChannel+0x346>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 810b 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d00f      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a1a:	e049      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d91c      	bls.n	8001a78 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6999      	ldr	r1, [r3, #24]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b1b      	subs	r3, #27
 8001a50:	2207      	movs	r2, #7
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4019      	ands	r1, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6898      	ldr	r0, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	3b1b      	subs	r3, #27
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	e01b      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6959      	ldr	r1, [r3, #20]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4019      	ands	r1, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6898      	ldr	r0, [r3, #8]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_ADC_ConfigChannel+0x488>)
 8001ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001acc:	2b11      	cmp	r3, #17
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	f040 8092 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 808b 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afc:	d102      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x45c>
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_ADC_ConfigChannel+0x48c>)
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e002      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x462>
 8001b04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b08:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10f      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x490>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x490>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e007      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x492>
 8001b2a:	bf00      	nop
 8001b2c:	83fff000 	.word	0x83fff000
 8001b30:	50000300 	.word	0x50000300
 8001b34:	50000100 	.word	0x50000100
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d150      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x4b8>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x4b8>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x4ba>
 8001b60:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d13c      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d11d      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x502>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b76:	d118      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b82:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_ADC_ConfigChannel+0x57c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <HAL_ADC_ConfigChannel+0x580>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ba8:	e02e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d10b      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x522>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bba:	d106      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bc8:	e01e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d11a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bdc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bde:	e013      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bf2:	e00a      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c08:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	376c      	adds	r7, #108	; 0x6c
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200000dc 	.word	0x200000dc
 8001c28:	431bde83 	.word	0x431bde83

08001c2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b099      	sub	sp, #100	; 0x64
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c44:	d102      	bne.n	8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c46:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	e002      	b.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c50:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0a2      	b.n	8001da2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e09b      	b.n	8001da2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d17f      	bne.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d179      	bne.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c8c:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001c8e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d040      	beq.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001caa:	035b      	lsls	r3, r3, #13
 8001cac:	430b      	orrs	r3, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d15c      	bne.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001cf6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d14b      	bne.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d04:	f023 030f 	bic.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	6811      	ldr	r1, [r2, #0]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6892      	ldr	r2, [r2, #8]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d16:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d18:	e03c      	b.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d24:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d108      	bne.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d123      	bne.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001d68:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d112      	bne.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d76:	f023 030f 	bic.w	r3, r3, #15
 8001d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d7c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d7e:	e009      	b.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d92:	e000      	b.n	8001d96 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d94:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001da2:	4618      	mov	r0, r3
 8001da4:	3764      	adds	r7, #100	; 0x64
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	50000100 	.word	0x50000100
 8001db4:	50000300 	.word	0x50000300

08001db8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <ADC_Disable+0x2c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <ADC_Disable+0x2c>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <ADC_Disable+0x2e>
 8001de4:	2300      	movs	r3, #0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d040      	beq.n	8001e6c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030d 	and.w	r3, r3, #13
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10f      	bne.n	8001e18 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0202 	orr.w	r2, r2, #2
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e10:	f7ff faac 	bl	800136c <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e16:	e022      	b.n	8001e5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01c      	b.n	8001e6e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e34:	f7ff fa9a 	bl	800136c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d90d      	bls.n	8001e5e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e007      	b.n	8001e6e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d0e3      	beq.n	8001e34 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff4c 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffa:	f7ff ff61 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7ff ffb1 	bl	8001f6c <NVIC_EncodePriority>
 800200a:	4602      	mov	r2, r0
 800200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff80 	bl	8001f18 <__NVIC_SetPriority>
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff54 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e037      	b.n	80020c2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002068:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800206c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f9c3 	bl	8002430 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}  
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Start_IT+0x20>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e04a      	b.n	8002180 <HAL_DMA_Start_IT+0xb6>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d13a      	bne.n	8002172 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f957 	bl	80023d4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 020e 	orr.w	r2, r2, #14
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e00f      	b.n	8002160 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 020a 	orr.w	r2, r2, #10
 800214e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e005      	b.n	800217e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800217a:	2302      	movs	r3, #2
 800217c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800217e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002196:	2b02      	cmp	r3, #2
 8002198:	d008      	beq.n	80021ac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e020      	b.n	80021ee <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800220c:	2b02      	cmp	r3, #2
 800220e:	d005      	beq.n	800221c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2204      	movs	r2, #4
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e027      	b.n	800226c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 020e 	bic.w	r2, r2, #14
 800222a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
    } 
  }
  return status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2204      	movs	r2, #4
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x72>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01f      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d107      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0204 	bic.w	r2, r2, #4
 80022c4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	2104      	movs	r1, #4
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80022e6:	e065      	b.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2202      	movs	r2, #2
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02c      	beq.n	8002352 <HAL_DMA_IRQHandler+0xdc>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d027      	beq.n	8002352 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 020a 	bic.w	r2, r2, #10
 800231e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2102      	movs	r1, #2
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d035      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002350:	e030      	b.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2208      	movs	r2, #8
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d028      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 020e 	bic.w	r2, r2, #14
 800237a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    }
  }
}  
 80023b2:	e7ff      	b.n	80023b4 <HAL_DMA_IRQHandler+0x13e>
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d108      	bne.n	8002414 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002412:	e007      	b.n	8002424 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <DMA_CalcBaseAndBitshift+0x34>)
 8002440:	4413      	add	r3, r2
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <DMA_CalcBaseAndBitshift+0x38>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	009a      	lsls	r2, r3, #2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a06      	ldr	r2, [pc, #24]	; (800246c <DMA_CalcBaseAndBitshift+0x3c>)
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	bffdfff8 	.word	0xbffdfff8
 8002468:	cccccccd 	.word	0xcccccccd
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e14e      	b.n	800271e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8140 	beq.w	8002718 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x38>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	6939      	ldr	r1, [r7, #16]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d00b      	beq.n	8002544 <HAL_GPIO_Init+0xd4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002538:	2b11      	cmp	r3, #17
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0201 	and.w	r2, r3, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 809a 	beq.w	8002718 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <HAL_GPIO_Init+0x2cc>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a54      	ldr	r2, [pc, #336]	; (800273c <HAL_GPIO_Init+0x2cc>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_GPIO_Init+0x2cc>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025fc:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002626:	d013      	beq.n	8002650 <HAL_GPIO_Init+0x1e0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_GPIO_Init+0x2d4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00d      	beq.n	800264c <HAL_GPIO_Init+0x1dc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_GPIO_Init+0x2d8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <HAL_GPIO_Init+0x1d8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a44      	ldr	r2, [pc, #272]	; (800274c <HAL_GPIO_Init+0x2dc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_GPIO_Init+0x1d4>
 8002640:	2303      	movs	r3, #3
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x1e2>
 8002644:	2305      	movs	r3, #5
 8002646:	e004      	b.n	8002652 <HAL_GPIO_Init+0x1e2>
 8002648:	2302      	movs	r3, #2
 800264a:	e002      	b.n	8002652 <HAL_GPIO_Init+0x1e2>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_GPIO_Init+0x1e2>
 8002650:	2300      	movs	r3, #0
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002662:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002694:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026be:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_GPIO_Init+0x2e0>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f aea9 	bne.w	8002480 <HAL_GPIO_Init+0x10>
  }
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000
 8002744:	48000400 	.word	0x48000400
 8002748:	48000800 	.word	0x48000800
 800274c:	48000c00 	.word	0x48000c00
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0ba      	b.n	80028dc <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02e      	beq.n	8002808 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_HRTIM_Init+0x190>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10b      	bne.n	80027cc <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_HRTIM_Init+0x194>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_HRTIM_Init+0x194>)
 80027ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_HRTIM_Init+0x194>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027da:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fa1f 	bl	8000c4c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d012      	beq.n	8002840 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002850:	2300      	movs	r3, #0
 8002852:	75fb      	strb	r3, [r7, #23]
 8002854:	e03e      	b.n	80028d4 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002856:	7dfa      	ldrb	r2, [r7, #23]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3318      	adds	r3, #24
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800286a:	7dfa      	ldrb	r2, [r7, #23]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	331c      	adds	r3, #28
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800287e:	7dfa      	ldrb	r2, [r7, #23]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3320      	adds	r3, #32
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002892:	7dfa      	ldrb	r2, [r7, #23]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80028a6:	7dfa      	ldrb	r2, [r7, #23]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3328      	adds	r3, #40	; 0x28
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80028ba:	7dfa      	ldrb	r2, [r7, #23]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3330      	adds	r3, #48	; 0x30
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	3301      	adds	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d9bd      	bls.n	8002856 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40017400 	.word	0x40017400
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d101      	bne.n	8002908 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	e015      	b.n	8002934 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d104      	bne.n	8002920 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fa20 	bl	8002d5e <HRTIM_MasterBase_Config>
 800291e:	e004      	b.n	800292a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fa49 	bl	8002dbc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d101      	bne.n	8002958 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
 8002956:	e05f      	b.n	8002a18 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002962:	2302      	movs	r3, #2
 8002964:	e058      	b.n	8002a18 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d104      	bne.n	8002986 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa5c 	bl	8002e3c <HRTIM_MasterWaveform_Config>
 8002984:	e004      	b.n	8002990 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fabc 	bl	8002f08 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	3320      	adds	r3, #32
 80029a4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4403      	add	r3, r0
 80029b8:	3324      	adds	r3, #36	; 0x24
 80029ba:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4403      	add	r3, r0
 80029ce:	3328      	adds	r3, #40	; 0x28
 80029d0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4403      	add	r3, r0
 80029e4:	332c      	adds	r3, #44	; 0x2c
 80029e6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4403      	add	r3, r0
 80029fa:	3330      	adds	r3, #48	; 0x30
 80029fc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fc77 	bl	80032f4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d101      	bne.n	8002a3e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e157      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e150      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d140      	bne.n	8002ae4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	2b07      	cmp	r3, #7
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8002a6a:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a91 	.word	0x08002a91
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002ac1 	.word	0x08002ac1
 8002a7c:	08002aa9 	.word	0x08002aa9
 8002a80:	08002ac1 	.word	0x08002ac1
 8002a84:	08002ac1 	.word	0x08002ac1
 8002a88:	08002ac1 	.word	0x08002ac1
 8002a8c:	08002ab5 	.word	0x08002ab5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	61da      	str	r2, [r3, #28]
        break;
 8002a9a:	e01a      	b.n	8002ad2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002aa6:	e014      	b.n	8002ad2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8002ab2:	e00e      	b.n	8002ad2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8002abe:	e008      	b.n	8002ad2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8002ad0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	f040 80fe 	bne.w	8002cdc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e104      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	f200 80e3 	bhi.w	8002cb4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b15 	.word	0x08002b15
 8002af8:	08002b29 	.word	0x08002b29
 8002afc:	08002cb5 	.word	0x08002cb5
 8002b00:	08002be5 	.word	0x08002be5
 8002b04:	08002cb5 	.word	0x08002cb5
 8002b08:	08002cb5 	.word	0x08002cb5
 8002b0c:	08002cb5 	.word	0x08002cb5
 8002b10:	08002bf9 	.word	0x08002bf9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	01db      	lsls	r3, r3, #7
 8002b20:	440b      	add	r3, r1
 8002b22:	339c      	adds	r3, #156	; 0x9c
 8002b24:	601a      	str	r2, [r3, #0]
        break;
 8002b26:	e0d1      	b.n	8002ccc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	01db      	lsls	r3, r3, #7
 8002b34:	440b      	add	r3, r1
 8002b36:	33a4      	adds	r3, #164	; 0xa4
 8002b38:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03f      	beq.n	8002bc2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	4413      	add	r3, r2
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6811      	ldr	r1, [r2, #0]
 8002b54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	01db      	lsls	r3, r3, #7
 8002b5e:	440b      	add	r3, r1
 8002b60:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	6809      	ldr	r1, [r1, #0]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	440b      	add	r3, r1
 8002b82:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d109      	bne.n	8002ba2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	440b      	add	r3, r1
 8002b9c:	339c      	adds	r3, #156	; 0x9c
 8002b9e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8002ba0:	e091      	b.n	8002cc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002baa:	f040 808c 	bne.w	8002cc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	01db      	lsls	r3, r3, #7
 8002bba:	440b      	add	r3, r1
 8002bbc:	33a8      	adds	r3, #168	; 0xa8
 8002bbe:	601a      	str	r2, [r3, #0]
         break;
 8002bc0:	e081      	b.n	8002cc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	4413      	add	r3, r2
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	6811      	ldr	r1, [r2, #0]
 8002bd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	01db      	lsls	r3, r3, #7
 8002bde:	440b      	add	r3, r1
 8002be0:	601a      	str	r2, [r3, #0]
         break;
 8002be2:	e070      	b.n	8002cc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	01db      	lsls	r3, r3, #7
 8002bf0:	440b      	add	r3, r1
 8002bf2:	33a8      	adds	r3, #168	; 0xa8
 8002bf4:	601a      	str	r2, [r3, #0]
        break;
 8002bf6:	e069      	b.n	8002ccc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	01db      	lsls	r3, r3, #7
 8002c04:	440b      	add	r3, r1
 8002c06:	33ac      	adds	r3, #172	; 0xac
 8002c08:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03f      	beq.n	8002c92 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	01db      	lsls	r3, r3, #7
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	01db      	lsls	r3, r3, #7
 8002c2e:	440b      	add	r3, r1
 8002c30:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	01db      	lsls	r3, r3, #7
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	6809      	ldr	r1, [r1, #0]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	01db      	lsls	r3, r3, #7
 8002c52:	440b      	add	r3, r1
 8002c54:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	d109      	bne.n	8002c74 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	01db      	lsls	r3, r3, #7
 8002c6c:	440b      	add	r3, r1
 8002c6e:	339c      	adds	r3, #156	; 0x9c
 8002c70:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8002c72:	e02a      	b.n	8002cca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c7c:	d125      	bne.n	8002cca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	440b      	add	r3, r1
 8002c8c:	33a8      	adds	r3, #168	; 0xa8
 8002c8e:	601a      	str	r2, [r3, #0]
         break;
 8002c90:	e01b      	b.n	8002cca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	01db      	lsls	r3, r3, #7
 8002c9c:	4413      	add	r3, r2
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3301      	adds	r3, #1
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	440b      	add	r3, r1
 8002cb0:	601a      	str	r2, [r3, #0]
         break;
 8002cb2:	e00a      	b.n	8002cca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002cc4:	e002      	b.n	8002ccc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002cca:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b07      	cmp	r3, #7
 8002cd6:	d101      	bne.n	8002cdc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e008      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop

08002cfc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d101      	bne.n	8002d1a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	e01d      	b.n	8002d56 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e016      	b.n	8002d56 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fa22 	bl	8003188 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f023 0318 	bic.w	r3, r3, #24
 8002d88:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	6852      	ldr	r2, [r2, #4]
 8002dae:	619a      	str	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	01db      	lsls	r3, r3, #7
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0307 	bic.w	r3, r3, #7
 8002dde:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0318 	bic.w	r3, r3, #24
 8002df0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3301      	adds	r3, #1
 8002e04:	01db      	lsls	r3, r3, #7
 8002e06:	4413      	add	r3, r2
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	01db      	lsls	r3, r3, #7
 8002e18:	440b      	add	r3, r1
 8002e1a:	3394      	adds	r3, #148	; 0x94
 8002e1c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	01db      	lsls	r3, r3, #7
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3398      	adds	r3, #152	; 0x98
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002e56:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0320 	bic.w	r3, r3, #32
 8002e5e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e70:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e82:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e94:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002ea6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002eb8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	01db      	lsls	r3, r3, #7
 8002f1e:	4413      	add	r3, r2
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	01db      	lsls	r3, r3, #7
 8002f30:	440b      	add	r3, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	01db      	lsls	r3, r3, #7
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4413      	add	r3, r2
 8002f4e:	33e8      	adds	r3, #232	; 0xe8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	4413      	add	r3, r2
 8002f5e:	33e4      	adds	r3, #228	; 0xe4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002f6c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	f023 0320 	bic.w	r3, r3, #32
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fea:	d103      	bne.n	8002ff4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	4313      	orrs	r3, r2
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4313      	orrs	r3, r2
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4313      	orrs	r3, r2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f023 031f 	bic.w	r3, r3, #31
 8003030:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003046:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003060:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	4313      	orrs	r3, r2
 800306a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003074:	d004      	beq.n	8003080 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800307e:	d103      	bne.n	8003088 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d108      	bne.n	800309a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800308e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	4313      	orrs	r3, r2
 8003098:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d843      	bhi.n	800312e <HRTIM_TimingUnitWaveform_Config+0x226>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030c1 	.word	0x080030c1
 80030b0:	080030d7 	.word	0x080030d7
 80030b4:	080030ed 	.word	0x080030ed
 80030b8:	08003103 	.word	0x08003103
 80030bc:	08003119 	.word	0x08003119
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61fb      	str	r3, [r7, #28]
      break;
 80030d4:	e02c      	b.n	8003130 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61fb      	str	r3, [r7, #28]
      break;
 80030ea:	e021      	b.n	8003130 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61fb      	str	r3, [r7, #28]
      break;
 8003100:	e016      	b.n	8003130 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003108:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4313      	orrs	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]
      break;
 8003116:	e00b      	b.n	8003130 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800311e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	015b      	lsls	r3, r3, #5
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	4313      	orrs	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]
      break;
 800312c:	e000      	b.n	8003130 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800312e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	3301      	adds	r3, #1
 8003138:	01db      	lsls	r3, r3, #7
 800313a:	4413      	add	r3, r2
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	01db      	lsls	r3, r3, #7
 8003148:	4413      	add	r3, r2
 800314a:	33e8      	adds	r3, #232	; 0xe8
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	01db      	lsls	r3, r3, #7
 8003158:	4413      	add	r3, r2
 800315a:	33e4      	adds	r3, #228	; 0xe4
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	4413      	add	r3, r2
 800316a:	33d4      	adds	r3, #212	; 0xd4
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800317a:	bf00      	nop
 800317c:	372c      	adds	r7, #44	; 0x2c
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	4413      	add	r3, r2
 80031a4:	33e4      	adds	r3, #228	; 0xe4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	01db      	lsls	r3, r3, #7
 80031b2:	4413      	add	r3, r2
 80031b4:	33b8      	adds	r3, #184	; 0xb8
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]

  switch (Output)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d01d      	beq.n	80031fc <HRTIM_OutputConfig+0x74>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d80b      	bhi.n	80031dc <HRTIM_OutputConfig+0x54>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d02c      	beq.n	8003222 <HRTIM_OutputConfig+0x9a>
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d802      	bhi.n	80031d2 <HRTIM_OutputConfig+0x4a>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d015      	beq.n	80031fc <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80031d0:	e03c      	b.n	800324c <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d012      	beq.n	80031fc <HRTIM_OutputConfig+0x74>
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d023      	beq.n	8003222 <HRTIM_OutputConfig+0x9a>
    break;
 80031da:	e037      	b.n	800324c <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d020      	beq.n	8003222 <HRTIM_OutputConfig+0x9a>
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d804      	bhi.n	80031ee <HRTIM_OutputConfig+0x66>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d01c      	beq.n	8003222 <HRTIM_OutputConfig+0x9a>
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d007      	beq.n	80031fc <HRTIM_OutputConfig+0x74>
    break;
 80031ec:	e02e      	b.n	800324c <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d003      	beq.n	80031fc <HRTIM_OutputConfig+0x74>
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f8:	d013      	beq.n	8003222 <HRTIM_OutputConfig+0x9a>
    break;
 80031fa:	e027      	b.n	800324c <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	01db      	lsls	r3, r3, #7
 8003208:	440b      	add	r3, r1
 800320a:	33bc      	adds	r3, #188	; 0xbc
 800320c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	01db      	lsls	r3, r3, #7
 800321a:	440b      	add	r3, r1
 800321c:	33c0      	adds	r3, #192	; 0xc0
 800321e:	601a      	str	r2, [r3, #0]
      break;
 8003220:	e014      	b.n	800324c <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	01db      	lsls	r3, r3, #7
 800322e:	440b      	add	r3, r1
 8003230:	33c4      	adds	r3, #196	; 0xc4
 8003232:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	01db      	lsls	r3, r3, #7
 8003240:	440b      	add	r3, r1
 8003242:	33c8      	adds	r3, #200	; 0xc8
 8003244:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003246:	2310      	movs	r3, #16
 8003248:	61bb      	str	r3, [r7, #24]
      break;
 800324a:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800324c:	22fe      	movs	r2, #254	; 0xfe
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003254:	43db      	mvns	r3, r3
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	4013      	ands	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	4313      	orrs	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	4313      	orrs	r3, r2
 800327a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	4313      	orrs	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d111      	bne.n	80032d8 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	01db      	lsls	r3, r3, #7
 80032e0:	4413      	add	r3, r2
 80032e2:	33e4      	adds	r3, #228	; 0xe4
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	bf00      	nop
 80032ea:	3724      	adds	r7, #36	; 0x24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d851      	bhi.n	80033a8 <HRTIM_ForceRegistersUpdate+0xb4>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <HRTIM_ForceRegistersUpdate+0x18>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003351 	.word	0x08003351
 8003314:	08003367 	.word	0x08003367
 8003318:	0800337d 	.word	0x0800337d
 800331c:	08003393 	.word	0x08003393
 8003320:	08003325 	.word	0x08003325
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003338:	e037      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0202 	orr.w	r2, r2, #2
 800334a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800334e:	e02c      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0204 	orr.w	r2, r2, #4
 8003360:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003364:	e021      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0208 	orr.w	r2, r2, #8
 8003376:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800337a:	e016      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0210 	orr.w	r2, r2, #16
 800338c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003390:	e00b      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80033a6:	e000      	b.n	80033aa <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80033a8:	bf00      	nop
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033be:	af00      	add	r7, sp, #0
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f000 bef4 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 816a 	beq.w	80036b6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033e2:	4bb3      	ldr	r3, [pc, #716]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033ee:	4bb0      	ldr	r3, [pc, #704]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d159      	bne.n	80034ae <HAL_RCC_OscConfig+0xf6>
 80033fa:	4bad      	ldr	r3, [pc, #692]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d152      	bne.n	80034ae <HAL_RCC_OscConfig+0xf6>
 8003408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800341c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d102      	bne.n	800343a <HAL_RCC_OscConfig+0x82>
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0xae>
 800343a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800344e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003452:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003456:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003462:	4b93      	ldr	r3, [pc, #588]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800346e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800347a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f002 021f 	and.w	r2, r2, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 810c 	beq.w	80036b4 <HAL_RCC_OscConfig+0x2fc>
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8106 	bne.w	80036b4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f000 be86 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x110>
 80034ba:	4b7d      	ldr	r3, [pc, #500]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7c      	ldr	r2, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e030      	b.n	800352a <HAL_RCC_OscConfig+0x172>
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x134>
 80034d2:	4b77      	ldr	r3, [pc, #476]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a76      	ldr	r2, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b74      	ldr	r3, [pc, #464]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a73      	ldr	r2, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e01e      	b.n	800352a <HAL_RCC_OscConfig+0x172>
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f6:	d10c      	bne.n	8003512 <HAL_RCC_OscConfig+0x15a>
 80034f8:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80034fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x172>
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a66      	ldr	r2, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b64      	ldr	r3, [pc, #400]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f023 020f 	bic.w	r2, r3, #15
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	495d      	ldr	r1, [pc, #372]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d059      	beq.n	80035fc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fd ff10 	bl	800136c <HAL_GetTick>
 800354c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003552:	f7fd ff0b 	bl	800136c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d902      	bls.n	8003568 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f000 be29 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
 8003568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800356c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800357c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <HAL_RCC_OscConfig+0x1e2>
 8003594:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x20e>
 800359a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035d2:	fa92 f2a2 	rbit	r2, r2
 80035d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035da:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ab      	beq.n	8003552 <HAL_RCC_OscConfig+0x19a>
 80035fa:	e05c      	b.n	80036b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd feb6 	bl	800136c <HAL_GetTick>
 8003600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003606:	f7fd feb1 	bl	800136c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d902      	bls.n	800361c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	f000 bdcf 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
 800361c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003620:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003630:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0x296>
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x2c2>
 800364e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003652:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003666:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800366a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCC_OscConfig+0x2f8>)
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800367e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003682:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800368e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003692:	fab2 f282 	clz	r2, r2
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f042 0220 	orr.w	r2, r2, #32
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f002 021f 	and.w	r2, r2, #31
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ab      	bne.n	8003606 <HAL_RCC_OscConfig+0x24e>
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_OscConfig+0x2fe>
 80036b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 816f 	beq.w	80039a4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036c6:	4bd0      	ldr	r3, [pc, #832]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036d2:	4bcd      	ldr	r3, [pc, #820]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d16c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x400>
 80036de:	4bca      	ldr	r3, [pc, #808]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d166      	bne.n	80037b8 <HAL_RCC_OscConfig+0x400>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d102      	bne.n	800371a <HAL_RCC_OscConfig+0x362>
 8003714:	4bbc      	ldr	r3, [pc, #752]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e013      	b.n	8003742 <HAL_RCC_OscConfig+0x38a>
 800371a:	2302      	movs	r3, #2
 800371c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800372c:	2302      	movs	r3, #2
 800372e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003732:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800373e:	4bb2      	ldr	r3, [pc, #712]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2202      	movs	r2, #2
 8003744:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003748:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003754:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_RCC_OscConfig+0x3cc>
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d002      	beq.n	8003784 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f000 bd1b 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4ba0      	ldr	r3, [pc, #640]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	21f8      	movs	r1, #248	; 0xf8
 8003794:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800379c:	fa91 f1a1 	rbit	r1, r1
 80037a0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037a4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037a8:	fab1 f181 	clz	r1, r1
 80037ac:	b2c9      	uxtb	r1, r1
 80037ae:	408b      	lsls	r3, r1
 80037b0:	4995      	ldr	r1, [pc, #596]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e0f5      	b.n	80039a4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8085 	beq.w	80038ce <HAL_RCC_OscConfig+0x516>
 80037c4:	2301      	movs	r3, #1
 80037c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	461a      	mov	r2, r3
 80037ec:	2301      	movs	r3, #1
 80037ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd fdbc 	bl	800136c <HAL_GetTick>
 80037f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fd fdb7 	bl	800136c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d902      	bls.n	8003810 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	f000 bcd5 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
 8003810:	2302      	movs	r3, #2
 8003812:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003822:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_RCC_OscConfig+0x488>
 800383a:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x4b0>
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003858:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800386e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003872:	fa92 f2a2 	rbit	r2, r2
 8003876:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800387a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0af      	beq.n	80037fa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	21f8      	movs	r1, #248	; 0xf8
 80038aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038b2:	fa91 f1a1 	rbit	r1, r1
 80038b6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038ba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038be:	fab1 f181 	clz	r1, r1
 80038c2:	b2c9      	uxtb	r1, r1
 80038c4:	408b      	lsls	r3, r1
 80038c6:	4950      	ldr	r1, [pc, #320]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e06a      	b.n	80039a4 <HAL_RCC_OscConfig+0x5ec>
 80038ce:	2301      	movs	r3, #1
 80038d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fd fd37 	bl	800136c <HAL_GetTick>
 80038fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fd fd32 	bl	800136c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d902      	bls.n	800391a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	f000 bc50 	b.w	80041ba <HAL_RCC_OscConfig+0xe02>
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800392c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_RCC_OscConfig+0x592>
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e013      	b.n	8003972 <HAL_RCC_OscConfig+0x5ba>
 800394a:	2302      	movs	r3, #2
 800394c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800395c:	2302      	movs	r3, #2
 800395e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003962:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_RCC_OscConfig+0x650>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2202      	movs	r2, #2
 8003974:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003978:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003984:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003988:	fab2 f282 	clz	r2, r2
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f042 0220 	orr.w	r2, r2, #32
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f002 021f 	and.w	r2, r2, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1af      	bne.n	8003904 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80da 	beq.w	8003b68 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d069      	beq.n	8003a92 <HAL_RCC_OscConfig+0x6da>
 80039be:	2301      	movs	r3, #1
 80039c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80039d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x654>)
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	461a      	mov	r2, r3
 80039e4:	2301      	movs	r3, #1
 80039e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fd fcc0 	bl	800136c <HAL_GetTick>
 80039ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f0:	e00e      	b.n	8003a10 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fd fcbb 	bl	800136c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d906      	bls.n	8003a10 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e3d9      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	10908120 	.word	0x10908120
 8003a10:	2302      	movs	r3, #2
 8003a12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a26:	2202      	movs	r2, #2
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fa93 f2a3 	rbit	r2, r3
 8003a34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a3e:	2202      	movs	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fa93 f2a3 	rbit	r2, r3
 8003a4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	6019      	str	r1, [r3, #0]
 8003a5e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f1a3 	rbit	r1, r3
 8003a68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a6c:	6019      	str	r1, [r3, #0]
  return result;
 8003a6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0b0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x63a>
 8003a90:	e06a      	b.n	8003b68 <HAL_RCC_OscConfig+0x7b0>
 8003a92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003aa8:	601a      	str	r2, [r3, #0]
  return result;
 8003aaa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003aae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b8c      	ldr	r3, [pc, #560]	; (8003cec <HAL_RCC_OscConfig+0x934>)
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fc52 	bl	800136c <HAL_GetTick>
 8003ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	e009      	b.n	8003ae2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ace:	f7fd fc4d 	bl	800136c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e36b      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003ae2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003afe:	2202      	movs	r2, #2
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	fa93 f2a3 	rbit	r2, r3
 8003b0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b16:	2202      	movs	r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b32:	2102      	movs	r1, #2
 8003b34:	6019      	str	r1, [r3, #0]
 8003b36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f1a3 	rbit	r1, r3
 8003b40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b44:	6019      	str	r1, [r3, #0]
  return result;
 8003b46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1b2      	bne.n	8003ace <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8158 	beq.w	8003e28 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b5a      	ldr	r3, [pc, #360]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	61d3      	str	r3, [r2, #28]
 8003b96:	4b54      	ldr	r3, [pc, #336]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <HAL_RCC_OscConfig+0x938>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11a      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbc:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x938>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_RCC_OscConfig+0x938>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fbd0 	bl	800136c <HAL_GetTick>
 8003bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fbcb 	bl	800136c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e2e9      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RCC_OscConfig+0x938>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0ef      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCC_OscConfig+0x852>
 8003bfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6213      	str	r3, [r2, #32]
 8003c08:	e02f      	b.n	8003c6a <HAL_RCC_OscConfig+0x8b2>
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10c      	bne.n	8003c2e <HAL_RCC_OscConfig+0x876>
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e01d      	b.n	8003c6a <HAL_RCC_OscConfig+0x8b2>
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCC_OscConfig+0x89a>
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6213      	str	r3, [r2, #32]
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	e00b      	b.n	8003c6a <HAL_RCC_OscConfig+0x8b2>
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d06b      	beq.n	8003d4c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fd fb7a 	bl	800136c <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fb75 	bl	800136c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e291      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003c96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cc4:	601a      	str	r2, [r3, #0]
  return result;
 8003cc6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x93c>
 8003ce0:	4b01      	ldr	r3, [pc, #4]	; (8003ce8 <HAL_RCC_OscConfig+0x930>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x958>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	10908120 	.word	0x10908120
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	fa93 f2a3 	rbit	r2, r3
 8003d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	4bbb      	ldr	r3, [pc, #748]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d14:	2102      	movs	r1, #2
 8003d16:	6011      	str	r1, [r2, #0]
 8003d18:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	fa92 f1a2 	rbit	r1, r2
 8003d22:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d26:	6011      	str	r1, [r2, #0]
  return result;
 8003d28:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	fab2 f282 	clz	r2, r2
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f002 021f 	and.w	r2, r2, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f202 	lsl.w	r2, r1, r2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d099      	beq.n	8003c7e <HAL_RCC_OscConfig+0x8c6>
 8003d4a:	e063      	b.n	8003e14 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fb0e 	bl	800136c <HAL_GetTick>
 8003d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	e00b      	b.n	8003d6e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fd fb09 	bl	800136c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e225      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003d6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d9c:	601a      	str	r2, [r3, #0]
  return result;
 8003d9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003da2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_OscConfig+0xa06>
 8003db8:	4b90      	ldr	r3, [pc, #576]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	e00d      	b.n	8003dda <HAL_RCC_OscConfig+0xa22>
 8003dbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	4b89      	ldr	r3, [pc, #548]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dde:	2102      	movs	r1, #2
 8003de0:	6011      	str	r1, [r2, #0]
 8003de2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fa92 f1a2 	rbit	r1, r2
 8003dec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003df0:	6011      	str	r1, [r2, #0]
  return result;
 8003df2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	fab2 f282 	clz	r2, r2
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	f002 021f 	and.w	r2, r2, #31
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1a0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e14:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b77      	ldr	r3, [pc, #476]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4a76      	ldr	r2, [pc, #472]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 81c2 	beq.w	80041b8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e34:	4b71      	ldr	r3, [pc, #452]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	f000 819c 	beq.w	800417a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f040 8114 	bne.w	8004076 <HAL_RCC_OscConfig+0xcbe>
 8003e4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	fa93 f2a3 	rbit	r2, r3
 8003e62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e66:	601a      	str	r2, [r3, #0]
  return result;
 8003e68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fa72 	bl	800136c <HAL_GetTick>
 8003e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fd fa6d 	bl	800136c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e18b      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003ea2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f2a3 	rbit	r2, r3
 8003eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eba:	601a      	str	r2, [r3, #0]
  return result;
 8003ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0xb24>
 8003ed6:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e01b      	b.n	8003f14 <HAL_RCC_OscConfig+0xb5c>
 8003edc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fa92 f1a2 	rbit	r1, r2
 8003f28:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f2c:	6011      	str	r1, [r2, #0]
  return result;
 8003f2e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f042 0220 	orr.w	r2, r2, #32
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f002 021f 	and.w	r2, r2, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d19e      	bne.n	8003e8e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	4925      	ldr	r1, [pc, #148]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	fa93 f2a3 	rbit	r2, r3
 8003f80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f84:	601a      	str	r2, [r3, #0]
  return result;
 8003f86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd f9e3 	bl	800136c <HAL_GetTick>
 8003fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003faa:	e009      	b.n	8003fc0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd f9de 	bl	800136c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0fc      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 8003fc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd8:	601a      	str	r2, [r3, #0]
  return result;
 8003fda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0xc48>
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <HAL_RCC_OscConfig+0xc44>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e01e      	b.n	8004038 <HAL_RCC_OscConfig+0xc80>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	fa93 f2a3 	rbit	r2, r3
 8004014:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800401e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_OscConfig+0xe0c>)
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800403c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fa92 f1a2 	rbit	r1, r2
 800404c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004050:	6011      	str	r1, [r2, #0]
  return result;
 8004052:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	fab2 f282 	clz	r2, r2
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f042 0220 	orr.w	r2, r2, #32
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	f002 021f 	and.w	r2, r2, #31
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f202 	lsl.w	r2, r1, r2
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d09b      	beq.n	8003fac <HAL_RCC_OscConfig+0xbf4>
 8004074:	e0a0      	b.n	80041b8 <HAL_RCC_OscConfig+0xe00>
 8004076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800407a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800407e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408e:	601a      	str	r2, [r3, #0]
  return result;
 8004090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004094:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd f95e 	bl	800136c <HAL_GetTick>
 80040b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b4:	e009      	b.n	80040ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fd f959 	bl	800136c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e077      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
 80040ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	fa93 f2a3 	rbit	r2, r3
 80040de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e2:	601a      	str	r2, [r3, #0]
  return result;
 80040e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0xd4c>
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCC_OscConfig+0xe0c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	e01b      	b.n	800413c <HAL_RCC_OscConfig+0xd84>
 8004104:	f107 0320 	add.w	r3, r7, #32
 8004108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f107 0320 	add.w	r3, r7, #32
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f107 0318 	add.w	r3, r7, #24
 8004122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f107 0318 	add.w	r3, r7, #24
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_RCC_OscConfig+0xe0c>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f107 0210 	add.w	r2, r7, #16
 8004140:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	f107 0210 	add.w	r2, r7, #16
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	fa92 f1a2 	rbit	r1, r2
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	6011      	str	r1, [r2, #0]
  return result;
 8004156:	f107 020c 	add.w	r2, r7, #12
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d19e      	bne.n	80040b6 <HAL_RCC_OscConfig+0xcfe>
 8004178:	e01e      	b.n	80041b8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e018      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCC_OscConfig+0xe0c>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004190:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d108      	bne.n	80041b4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000

080041c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b09e      	sub	sp, #120	; 0x78
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e162      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b90      	ldr	r3, [pc, #576]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d910      	bls.n	8004210 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 0207 	bic.w	r2, r3, #7
 80041f6:	498b      	ldr	r1, [pc, #556]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b89      	ldr	r3, [pc, #548]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e14a      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	497f      	ldr	r1, [pc, #508]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80dc 	beq.w	80043f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d13c      	bne.n	80042be <HAL_RCC_ClockConfig+0xf6>
 8004244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d102      	bne.n	800426e <HAL_RCC_ClockConfig+0xa6>
 8004268:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	e00f      	b.n	800428e <HAL_RCC_ClockConfig+0xc6>
 800426e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
 800427c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004280:	663b      	str	r3, [r7, #96]	; 0x60
 8004282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004292:	65ba      	str	r2, [r7, #88]	; 0x58
 8004294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004296:	fa92 f2a2 	rbit	r2, r2
 800429a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800429c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800429e:	fab2 f282 	clz	r2, r2
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	f042 0220 	orr.w	r2, r2, #32
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	f002 021f 	and.w	r2, r2, #31
 80042ae:	2101      	movs	r1, #1
 80042b0:	fa01 f202 	lsl.w	r2, r1, r2
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d17b      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0f3      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d13c      	bne.n	8004340 <HAL_RCC_ClockConfig+0x178>
 80042c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x128>
 80042ea:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	e00f      	b.n	8004310 <HAL_RCC_ClockConfig+0x148>
 80042f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
 80042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	4b46      	ldr	r3, [pc, #280]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004314:	63ba      	str	r2, [r7, #56]	; 0x38
 8004316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004318:	fa92 f2a2 	rbit	r2, r2
 800431c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800431e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004320:	fab2 f282 	clz	r2, r2
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	f042 0220 	orr.w	r2, r2, #32
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	f002 021f 	and.w	r2, r2, #31
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d13a      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0b2      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
 8004340:	2302      	movs	r3, #2
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_RCC_ClockConfig+0x1a0>
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	e00d      	b.n	8004384 <HAL_RCC_ClockConfig+0x1bc>
 8004368:	2302      	movs	r3, #2
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	2302      	movs	r3, #2
 8004376:	623b      	str	r3, [r7, #32]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2202      	movs	r2, #2
 8004386:	61ba      	str	r2, [r7, #24]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	fa92 f2a2 	rbit	r2, r2
 800438e:	617a      	str	r2, [r7, #20]
  return result;
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	fab2 f282 	clz	r2, r2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f002 021f 	and.w	r2, r2, #31
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e079      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	491a      	ldr	r1, [pc, #104]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c4:	f7fc ffd2 	bl	800136c <HAL_GetTick>
 80043c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fc ffce 	bl	800136c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e061      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 020c 	and.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1eb      	bne.n	80043cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d214      	bcs.n	800442c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0207 	bic.w	r2, r3, #7
 800440a:	4906      	ldr	r1, [pc, #24]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e040      	b.n	80044a6 <HAL_RCC_ClockConfig+0x2de>
 8004424:	40022000 	.word	0x40022000
 8004428:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCC_ClockConfig+0x2e8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	491a      	ldr	r1, [pc, #104]	; (80044b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4912      	ldr	r1, [pc, #72]	; (80044b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800446a:	f000 f829 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800446e:	4601      	mov	r1, r0
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004478:	22f0      	movs	r2, #240	; 0xf0
 800447a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	fa92 f2a2 	rbit	r2, r2
 8004482:	60fa      	str	r2, [r7, #12]
  return result;
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	fab2 f282 	clz	r2, r2
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	40d3      	lsrs	r3, r2
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x2ec>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	fa21 f303 	lsr.w	r3, r1, r3
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_ClockConfig+0x2f0>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_ClockConfig+0x2f4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc fd74 	bl	8000f8c <HAL_InitTick>
  
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3778      	adds	r7, #120	; 0x78
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	08009858 	.word	0x08009858
 80044b8:	200000dc 	.word	0x200000dc
 80044bc:	200000e0 	.word	0x200000e0

080044c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b08b      	sub	sp, #44	; 0x2c
 80044c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044da:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x30>
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x36>
 80044ee:	e03c      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f2:	623b      	str	r3, [r7, #32]
      break;
 80044f4:	e03c      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004500:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	fa92 f2a2 	rbit	r2, r2
 8004508:	607a      	str	r2, [r7, #4]
  return result;
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	fab2 f282 	clz	r2, r2
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	40d3      	lsrs	r3, r2
 8004514:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	220f      	movs	r2, #15
 8004524:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	fa92 f2a2 	rbit	r2, r2
 800452c:	60fa      	str	r2, [r7, #12]
  return result;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	fab2 f282 	clz	r2, r2
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	40d3      	lsrs	r3, r2
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <HAL_RCC_GetSysClockFreq+0xcc>)
 800453a:	5cd3      	ldrb	r3, [r2, r3]
 800453c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004548:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	e004      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <HAL_RCC_GetSysClockFreq+0xd0>)
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	623b      	str	r3, [r7, #32]
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800456c:	623b      	str	r3, [r7, #32]
      break;
 800456e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004570:	6a3b      	ldr	r3, [r7, #32]
}
 8004572:	4618      	mov	r0, r3
 8004574:	372c      	adds	r7, #44	; 0x2c
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	007a1200 	.word	0x007a1200
 8004588:	08009870 	.word	0x08009870
 800458c:	08009880 	.word	0x08009880
 8004590:	003d0900 	.word	0x003d0900

08004594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	200000dc 	.word	0x200000dc

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045b2:	f7ff ffef 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b6:	4601      	mov	r1, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	fa92 f2a2 	rbit	r2, r2
 80045cc:	603a      	str	r2, [r7, #0]
  return result;
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	fab2 f282 	clz	r2, r2
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	40d3      	lsrs	r3, r2
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000
 80045ec:	08009868 	.word	0x08009868

080045f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045f6:	f7ff ffcd 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045fa:	4601      	mov	r1, r0
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004604:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004608:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	fa92 f2a2 	rbit	r2, r2
 8004610:	603a      	str	r2, [r7, #0]
  return result;
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	fab2 f282 	clz	r2, r2
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	40d3      	lsrs	r3, r2
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x40>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	08009868 	.word	0x08009868

08004634 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	220f      	movs	r2, #15
 8004642:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_RCC_GetClockConfig+0x60>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0207 	and.w	r2, r3, #7
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40022000 	.word	0x40022000

08004698 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b092      	sub	sp, #72	; 0x48
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80d0 	beq.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046bc:	4b8e      	ldr	r3, [pc, #568]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10e      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	61d3      	str	r3, [r2, #28]
 80046d4:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b85      	ldr	r3, [pc, #532]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4b82      	ldr	r3, [pc, #520]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fc fe35 	bl	800136c <HAL_GetTick>
 8004702:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fc fe31 	bl	800136c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0ea      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	4b78      	ldr	r3, [pc, #480]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004724:	4b74      	ldr	r3, [pc, #464]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d07d      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800473e:	429a      	cmp	r2, r3
 8004740:	d076      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	461a      	mov	r2, r3
 800476c:	2301      	movs	r3, #1
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	4b5d      	ldr	r3, [pc, #372]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d045      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fc fde2 	bl	800136c <HAL_GetTick>
 80047a8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fc fdde 	bl	800136c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e095      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x256>
 80047c2:	2302      	movs	r3, #2
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	fa93 f3a3 	rbit	r3, r3
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	2302      	movs	r3, #2
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	61fb      	str	r3, [r7, #28]
  return result;
 80047da:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f043 0302 	orr.w	r3, r3, #2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d102      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047f0:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2202      	movs	r2, #2
 8004808:	613a      	str	r2, [r7, #16]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	fa92 f2a2 	rbit	r2, r2
 8004810:	60fa      	str	r2, [r7, #12]
  return result;
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	fab2 f282 	clz	r2, r2
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	f002 021f 	and.w	r2, r2, #31
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0bd      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004830:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	492e      	ldr	r1, [pc, #184]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	4313      	orrs	r3, r2
 8004840:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004842:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4922      	ldr	r1, [pc, #136]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	4313      	orrs	r3, r2
 8004872:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f023 0210 	bic.w	r2, r3, #16
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	491a      	ldr	r1, [pc, #104]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	4313      	orrs	r3, r2
 8004890:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	4913      	ldr	r1, [pc, #76]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	490b      	ldr	r1, [pc, #44]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3748      	adds	r7, #72	; 0x48
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40007000 	.word	0x40007000
 8004900:	10908100 	.word	0x10908100

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e01d      	b.n	8004952 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f815 	bl	800495a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f986 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <HAL_TIM_Base_Start_IT+0x50>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d00b      	beq.n	80049b2 <HAL_TIM_Base_Start_IT+0x42>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d007      	beq.n	80049b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	00010007 	.word	0x00010007

080049c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0202 	mvn.w	r2, #2
 80049f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f905 	bl	8004c16 <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8f7 	bl	8004c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f908 	bl	8004c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0204 	mvn.w	r2, #4
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8db 	bl	8004c16 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8cd 	bl	8004c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8de 	bl	8004c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d122      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d11b      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0208 	mvn.w	r2, #8
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8b1 	bl	8004c16 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8a3 	bl	8004c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8b4 	bl	8004c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d122      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d11b      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0210 	mvn.w	r2, #16
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2208      	movs	r2, #8
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f887 	bl	8004c16 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f879 	bl	8004c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f88a 	bl	8004c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d10e      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0201 	mvn.w	r2, #1
 8004b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f9ce 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8f2 	bl	8004d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8e5 	bl	8004d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f838 	bl	8004c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0220 	mvn.w	r2, #32
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8a5 	bl	8004d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a32      	ldr	r2, [pc, #200]	; (8004d30 <TIM_Base_SetConfig+0xdc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x28>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x28>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0xe0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a27      	ldr	r2, [pc, #156]	; (8004d30 <TIM_Base_SetConfig+0xdc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <TIM_Base_SetConfig+0x6a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d00f      	beq.n	8004cbe <TIM_Base_SetConfig+0x6a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <TIM_Base_SetConfig+0xe0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_Base_SetConfig+0x6a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_Base_SetConfig+0x6a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_Base_SetConfig+0x6a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <TIM_Base_SetConfig+0xdc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_Base_SetConfig+0xc0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_Base_SetConfig+0xc0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0xc0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d103      	bne.n	8004d1c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	615a      	str	r2, [r3, #20]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e040      	b.n	8004e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc f9ee 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2224      	movs	r2, #36	; 0x24
 8004dac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb96 	bl	80054f0 <UART_SetConfig>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e022      	b.n	8004e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fd0c 	bl	80057f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fd93 	bl	8005938 <UART_CheckIdleState>
 8004e12:	4603      	mov	r3, r0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d164      	bne.n	8004efc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_Transmit_DMA+0x22>
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e05d      	b.n	8004efe <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Transmit_DMA+0x34>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e056      	b.n	8004efe <HAL_UART_Transmit_DMA+0xe2>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d02a      	beq.n	8004ed8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_UART_Transmit_DMA+0xec>)
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_UART_Transmit_DMA+0xf0>)
 8004e90:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_UART_Transmit_DMA+0xf4>)
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	f7fd f908 	bl	80020ca <HAL_DMA_Start_IT>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e012      	b.n	8004efe <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08005b23 	.word	0x08005b23
 8004f0c:	08005b71 	.word	0x08005b71
 8004f10:	08005c0b 	.word	0x08005c0b

08004f14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d16c      	bne.n	8005004 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_UART_Receive_DMA+0x22>
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e065      	b.n	8005006 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_UART_Receive_DMA+0x34>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e05e      	b.n	8005006 <HAL_UART_Receive_DMA+0xf2>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2222      	movs	r2, #34	; 0x22
 8004f68:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d02a      	beq.n	8004fc8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	4a26      	ldr	r2, [pc, #152]	; (8005010 <HAL_UART_Receive_DMA+0xfc>)
 8004f78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7e:	4a25      	ldr	r2, [pc, #148]	; (8005014 <HAL_UART_Receive_DMA+0x100>)
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <HAL_UART_Receive_DMA+0x104>)
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	2200      	movs	r2, #0
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3324      	adds	r3, #36	; 0x24
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f7fd f890 	bl	80020ca <HAL_DMA_Start_IT>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01e      	b.n	8005006 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fde:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	08005b8d 	.word	0x08005b8d
 8005014:	08005bef 	.word	0x08005bef
 8005018:	08005c0b 	.word	0x08005c0b

0800501c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005032:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d124      	bne.n	800509c <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506e:	2200      	movs	r2, #0
 8005070:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd f886 	bl	8002188 <HAL_DMA_Abort>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00c      	beq.n	800509c <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005086:	4618      	mov	r0, r3
 8005088:	f7fd f998 	bl	80023bc <HAL_DMA_GetError>
 800508c:	4603      	mov	r3, r0
 800508e:	2b20      	cmp	r3, #32
 8005090:	d104      	bne.n	800509c <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2210      	movs	r2, #16
 8005096:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e049      	b.n	8005130 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d124      	bne.n	80050f4 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c6:	2200      	movs	r2, #0
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd f85a 	bl	8002188 <HAL_DMA_Abort>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd f96c 	bl	80023bc <HAL_DMA_GetError>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d104      	bne.n	80050f4 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2210      	movs	r2, #16
 80050ee:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e01d      	b.n	8005130 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	220f      	movs	r2, #15
 800510a:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800514e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d139      	bne.n	80051e2 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d013      	beq.n	80051ae <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_UART_AbortReceive_IT+0xd8>)
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd f831 	bl	80021fa <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d032      	beq.n	8005204 <HAL_UART_AbortReceive_IT+0xcc>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
 80051ac:	e02a      	b.n	8005204 <HAL_UART_AbortReceive_IT+0xcc>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	220f      	movs	r2, #15
 80051c2:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f97e 	bl	80054dc <HAL_UART_AbortReceiveCpltCallback>
 80051e0:	e010      	b.n	8005204 <HAL_UART_AbortReceive_IT+0xcc>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	220f      	movs	r2, #15
 80051f6:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f96c 	bl	80054dc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08005caf 	.word	0x08005caf

08005214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	f640 030f 	movw	r3, #2063	; 0x80f
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d113      	bne.n	800526c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d009      	beq.n	800526c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8114 	beq.w	800548a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
      }
      return;
 800526a:	e10e      	b.n	800548a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80d6 	beq.w	8005420 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80cb 	beq.w	8005420 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <HAL_UART_IRQHandler+0x9e>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <HAL_UART_IRQHandler+0xc6>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2202      	movs	r2, #2
 80052cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d2:	f043 0204 	orr.w	r2, r3, #4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00e      	beq.n	8005302 <HAL_UART_IRQHandler+0xee>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2204      	movs	r2, #4
 80052f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800532c:	f043 0208 	orr.w	r2, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00f      	beq.n	800535e <HAL_UART_IRQHandler+0x14a>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8093 	beq.w	800548e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005390:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d004      	beq.n	80053aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d031      	beq.n	800540e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb99 	bl	8005ae2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d123      	bne.n	8005406 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d013      	beq.n	80053fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	4a30      	ldr	r2, [pc, #192]	; (800549c <HAL_UART_IRQHandler+0x288>)
 80053dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc ff09 	bl	80021fa <HAL_DMA_Abort_IT>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e00e      	b.n	800541c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f862 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00a      	b.n	800541c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f85e 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e006      	b.n	800541c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f85a 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800541a:	e038      	b.n	800548e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	bf00      	nop
    return;
 800541e:	e036      	b.n	800548e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <HAL_UART_IRQHandler+0x232>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800543c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fc6f 	bl	8005d22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005444:	e026      	b.n	8005494 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545e:	2b00      	cmp	r3, #0
 8005460:	d017      	beq.n	8005492 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
    }
    return;
 800546a:	e012      	b.n	8005492 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <HAL_UART_IRQHandler+0x280>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fc35 	bl	8005cf0 <UART_EndTransmit_IT>
    return;
 8005486:	bf00      	nop
 8005488:	e004      	b.n	8005494 <HAL_UART_IRQHandler+0x280>
      return;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <HAL_UART_IRQHandler+0x280>
    return;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_UART_IRQHandler+0x280>
    return;
 8005492:	bf00      	nop
  }

}
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	08005c83 	.word	0x08005c83

080054a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4ba2      	ldr	r3, [pc, #648]	; (80057a8 <UART_SetConfig+0x2b8>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	430b      	orrs	r3, r1
 800552a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a90      	ldr	r2, [pc, #576]	; (80057ac <UART_SetConfig+0x2bc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d121      	bne.n	80055b4 <UART_SetConfig+0xc4>
 8005570:	4b8f      	ldr	r3, [pc, #572]	; (80057b0 <UART_SetConfig+0x2c0>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b03      	cmp	r3, #3
 800557a:	d817      	bhi.n	80055ac <UART_SetConfig+0xbc>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0x94>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a1 	.word	0x080055a1
 800558c:	080055a7 	.word	0x080055a7
 8005590:	0800559b 	.word	0x0800559b
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e01e      	b.n	80055d8 <UART_SetConfig+0xe8>
 800559a:	2302      	movs	r3, #2
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e01b      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055a0:	2304      	movs	r3, #4
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e018      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055a6:	2308      	movs	r3, #8
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e015      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055ac:	2310      	movs	r3, #16
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	bf00      	nop
 80055b2:	e011      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a7e      	ldr	r2, [pc, #504]	; (80057b4 <UART_SetConfig+0x2c4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d102      	bne.n	80055c4 <UART_SetConfig+0xd4>
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e009      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7b      	ldr	r2, [pc, #492]	; (80057b8 <UART_SetConfig+0x2c8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d102      	bne.n	80055d4 <UART_SetConfig+0xe4>
 80055ce:	2300      	movs	r3, #0
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e001      	b.n	80055d8 <UART_SetConfig+0xe8>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	f040 8082 	bne.w	80056e8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d85e      	bhi.n	80056a8 <UART_SetConfig+0x1b8>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x100>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005635 	.word	0x08005635
 80055f8:	08005655 	.word	0x08005655
 80055fc:	080056a9 	.word	0x080056a9
 8005600:	08005671 	.word	0x08005671
 8005604:	080056a9 	.word	0x080056a9
 8005608:	080056a9 	.word	0x080056a9
 800560c:	080056a9 	.word	0x080056a9
 8005610:	08005691 	.word	0x08005691
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe ffca 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005618:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	005a      	lsls	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	61bb      	str	r3, [r7, #24]
        break;
 8005632:	e03c      	b.n	80056ae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe ffdc 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8005638:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	005a      	lsls	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	61bb      	str	r3, [r7, #24]
        break;
 8005652:	e02c      	b.n	80056ae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800565e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6852      	ldr	r2, [r2, #4]
 8005666:	fbb3 f3f2 	udiv	r3, r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	61bb      	str	r3, [r7, #24]
        break;
 800566e:	e01e      	b.n	80056ae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005670:	f7fe ff26 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8005674:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	61bb      	str	r3, [r7, #24]
        break;
 800568e:	e00e      	b.n	80056ae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	61bb      	str	r3, [r7, #24]
        break;
 80056a6:	e002      	b.n	80056ae <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
        break;
 80056ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d916      	bls.n	80056e2 <UART_SetConfig+0x1f2>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d212      	bcs.n	80056e2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f023 030f 	bic.w	r3, r3, #15
 80056c4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	897b      	ldrh	r3, [r7, #10]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	897a      	ldrh	r2, [r7, #10]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e07d      	b.n	80057de <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	75fb      	strb	r3, [r7, #23]
 80056e6:	e07a      	b.n	80057de <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d866      	bhi.n	80057bc <UART_SetConfig+0x2cc>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x204>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005755 	.word	0x08005755
 8005700:	080057bd 	.word	0x080057bd
 8005704:	08005771 	.word	0x08005771
 8005708:	080057bd 	.word	0x080057bd
 800570c:	080057bd 	.word	0x080057bd
 8005710:	080057bd 	.word	0x080057bd
 8005714:	0800578f 	.word	0x0800578f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe ff48 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 800571c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	085a      	lsrs	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	b29b      	uxth	r3, r3
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e045      	b.n	80057c2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005736:	f7fe ff5b 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 800573a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085a      	lsrs	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	61bb      	str	r3, [r7, #24]
        break;
 8005752:	e036      	b.n	80057c2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800575e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6852      	ldr	r2, [r2, #4]
 8005766:	fbb3 f3f2 	udiv	r3, r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	61bb      	str	r3, [r7, #24]
        break;
 800576e:	e028      	b.n	80057c2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005770:	f7fe fea6 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8005774:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	085a      	lsrs	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	441a      	add	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	b29b      	uxth	r3, r3
 800578a:	61bb      	str	r3, [r7, #24]
        break;
 800578c:	e019      	b.n	80057c2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	61bb      	str	r3, [r7, #24]
        break;
 80057a4:	e00d      	b.n	80057c2 <UART_SetConfig+0x2d2>
 80057a6:	bf00      	nop
 80057a8:	efff69f3 	.word	0xefff69f3
 80057ac:	40013800 	.word	0x40013800
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
        break;
 80057c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d908      	bls.n	80057da <UART_SetConfig+0x2ea>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d204      	bcs.n	80057da <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e001      	b.n	80057de <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f2:	d10a      	bne.n	800590a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005946:	f7fb fd11 	bl	800136c <HAL_GetTick>
 800594a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b08      	cmp	r3, #8
 8005958:	d10e      	bne.n	8005978 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f82a 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e020      	b.n	80059ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d10e      	bne.n	80059a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005986:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f814 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e00a      	b.n	80059ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e05d      	b.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d059      	beq.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059dc:	f7fb fcc6 	bl	800136c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d302      	bcc.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d11b      	bne.n	8005a2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e042      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02b      	beq.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	d123      	bne.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a50:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e00f      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d092      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ace:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005af8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d014      	beq.n	8005b62 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b60:	e002      	b.n	8005b68 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f003 fc7e 	bl	8009464 <HAL_UART_TxCpltCallback>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fc8e 	bl	80054a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d01e      	beq.n	8005be0 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f003 fc23 	bl	800942c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fc59 	bl	80054b4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d109      	bne.n	8005c46 <UART_DMAError+0x3c>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b21      	cmp	r3, #33	; 0x21
 8005c36:	d106      	bne.n	8005c46 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c40:	6978      	ldr	r0, [r7, #20]
 8005c42:	f7ff ff39 	bl	8005ab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d109      	bne.n	8005c68 <UART_DMAError+0x5e>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b22      	cmp	r3, #34	; 0x22
 8005c58:	d106      	bne.n	8005c68 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff ff3d 	bl	8005ae2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6c:	f043 0210 	orr.w	r2, r3, #16
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c74:	6978      	ldr	r0, [r7, #20]
 8005c76:	f7ff fc27 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff fc11 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	220f      	movs	r2, #15
 8005cca:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0208 	orr.w	r2, r2, #8
 8005cda:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fbfa 	bl	80054dc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f003 fba5 	bl	8009464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d48:	2b84      	cmp	r3, #132	; 0x84
 8005d4a:	d005      	beq.n	8005d58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	3303      	adds	r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d58:	68fb      	ldr	r3, [r7, #12]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6c:	f3ef 8305 	mrs	r3, IPSR
 8005d70:	607b      	str	r3, [r7, #4]
  return(result);
 8005d72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d8e:	f001 fa95 	bl	80072bc <vTaskStartScheduler>
  
  return osOK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d020      	beq.n	8005dec <osThreadCreate+0x54>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01c      	beq.n	8005dec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685c      	ldr	r4, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681d      	ldr	r5, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691e      	ldr	r6, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ffb6 	bl	8005d36 <makeFreeRtosPriority>
 8005dca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dd4:	9202      	str	r2, [sp, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	9100      	str	r1, [sp, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4629      	mov	r1, r5
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 f8b1 	bl	8006f48 <xTaskCreateStatic>
 8005de6:	4603      	mov	r3, r0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e01c      	b.n	8005e26 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685c      	ldr	r4, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df8:	b29e      	uxth	r6, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff98 	bl	8005d36 <makeFreeRtosPriority>
 8005e06:	4602      	mov	r2, r0
 8005e08:	f107 030c 	add.w	r3, r7, #12
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	9200      	str	r2, [sp, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4632      	mov	r2, r6
 8005e14:	4629      	mov	r1, r5
 8005e16:	4620      	mov	r0, r4
 8005e18:	f001 f8ef 	bl	8006ffa <xTaskCreate>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <osDelay+0x16>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	e000      	b.n	8005e48 <osDelay+0x18>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fa03 	bl	8007254 <vTaskDelay>
  
  return osOK;
 8005e4e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d012      	beq.n	8005e90 <osMessageCreate+0x38>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68dc      	ldr	r4, [r3, #12]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4623      	mov	r3, r4
 8005e88:	f000 fb3c 	bl	8006504 <xQueueGenericCreateStatic>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	e008      	b.n	8005ea2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f000 fba4 	bl	80065e8 <xQueueGenericCreate>
 8005ea0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
	...

08005eac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b08b      	sub	sp, #44	; 0x2c
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	617b      	str	r3, [r7, #20]
    return event;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	461c      	mov	r4, r3
 8005ece:	f107 0314 	add.w	r3, r7, #20
 8005ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eda:	e054      	b.n	8005f86 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d103      	bne.n	8005ef4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	e009      	b.n	8005f08 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d006      	beq.n	8005f08 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <osMessageGet+0x5c>
      ticks = 1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005f08:	f7ff ff2d 	bl	8005d66 <inHandlerMode>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01c      	beq.n	8005f4c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005f12:	f107 0220 	add.w	r2, r7, #32
 8005f16:	f107 0314 	add.w	r3, r7, #20
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 fe28 	bl	8006b74 <xQueueReceiveFromISR>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e001      	b.n	8005f34 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01d      	beq.n	8005f76 <osMessageGet+0xca>
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <osMessageGet+0xe4>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	e014      	b.n	8005f76 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	3304      	adds	r3, #4
 8005f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f54:	4619      	mov	r1, r3
 8005f56:	68b8      	ldr	r0, [r7, #8]
 8005f58:	f000 fd30 	bl	80069bc <xQueueReceive>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d102      	bne.n	8005f68 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f62:	2310      	movs	r3, #16
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e006      	b.n	8005f76 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <osMessageGet+0xc6>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <osMessageGet+0xc8>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	461c      	mov	r4, r3
 8005f7a:	f107 0314 	add.w	r3, r7, #20
 8005f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	372c      	adds	r7, #44	; 0x2c
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005f9a:	201c      	movs	r0, #28
 8005f9c:	f002 fcf0 	bl	8008980 <pvPortMalloc>
 8005fa0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f98a 	bl	80062cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005fbe:	687b      	ldr	r3, [r7, #4]
	}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	; 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fe8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e7fe      	b.n	8005ffa <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <xEventGroupWaitBits+0x52>
 8006006:	f04f 0330 	mov.w	r3, #48	; 0x30
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e7fe      	b.n	8006018 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <xEventGroupWaitBits+0x6c>
 8006020:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e7fe      	b.n	8006032 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006034:	f001 fe1a 	bl	8007c6c <xTaskGetSchedulerState>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <xEventGroupWaitBits+0x7c>
 800603e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <xEventGroupWaitBits+0x80>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <xEventGroupWaitBits+0x82>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <xEventGroupWaitBits+0x9a>
 800604e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e7fe      	b.n	8006060 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8006062:	f001 f98f 	bl	8007384 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006072:	f000 f909 	bl	8006288 <prvTestWaitCondition>
 8006076:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00e      	beq.n	800609c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006082:	2300      	movs	r3, #0
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d028      	beq.n	80060de <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	43db      	mvns	r3, r3
 8006094:	401a      	ands	r2, r3
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e020      	b.n	80060de <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800609c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	633b      	str	r3, [r7, #48]	; 0x30
 80060aa:	e018      	b.n	80060de <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	1d18      	adds	r0, r3, #4
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	4313      	orrs	r3, r2
 80060d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d4:	4619      	mov	r1, r3
 80060d6:	f001 fb49 	bl	800776c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80060de:	f001 f95f 	bl	80073a0 <xTaskResumeAll>
 80060e2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d031      	beq.n	800614e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <xEventGroupWaitBits+0x190>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006100:	f001 fe56 	bl	8007db0 <uxTaskResetEventItemValue>
 8006104:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11a      	bne.n	8006146 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8006110:	f002 fb1c 	bl	800874c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006120:	f000 f8b2 	bl	8006288 <prvTestWaitCondition>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	43db      	mvns	r3, r3
 8006138:	401a      	ands	r2, r3
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800613e:	2301      	movs	r3, #1
 8006140:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006142:	f002 fb31 	bl	80087a8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006150:	4618      	mov	r0, r3
 8006152:	3740      	adds	r7, #64	; 0x40
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006166:	2300      	movs	r3, #0
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <xEventGroupSetBits+0x30>
 8006178:	f04f 0330 	mov.w	r3, #48	; 0x30
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	e7fe      	b.n	800618a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <xEventGroupSetBits+0x4e>
 8006196:	f04f 0330 	mov.w	r3, #48	; 0x30
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e7fe      	b.n	80061a8 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	3304      	adds	r3, #4
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	3308      	adds	r3, #8
 80061b4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80061b6:	f001 f8e5 	bl	8007384 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80061cc:	e03c      	b.n	8006248 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80061d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061e4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061ec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006208:	e008      	b.n	800621c <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	429a      	cmp	r2, r3
 8006216:	d101      	bne.n	800621c <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d010      	beq.n	8006244 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800623c:	4619      	mov	r1, r3
 800623e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006240:	f001 fb5a 	bl	80078f8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	429a      	cmp	r2, r3
 800624e:	d1be      	bne.n	80061ce <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	43db      	mvns	r3, r3
 8006258:	401a      	ands	r2, r3
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800625e:	f001 f89f 	bl	80073a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	681b      	ldr	r3, [r3, #0]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3738      	adds	r7, #56	; 0x38
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff ff6e 	bl	800615c <xEventGroupSetBits>
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d107      	bne.n	80062ae <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e007      	b.n	80062be <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d101      	bne.n	80062be <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80062be:	697b      	ldr	r3, [r7, #20]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 0208 	add.w	r2, r3, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 0208 	add.w	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f103 0208 	add.w	r2, r3, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d103      	bne.n	800638e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e00c      	b.n	80063a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3308      	adds	r3, #8
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <vListInsert+0x2e>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d2f6      	bcs.n	8006396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d103      	bne.n	8006414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <xQueueGenericReset+0x28>
 8006448:	f04f 0330 	mov.w	r3, #48	; 0x30
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	e7fe      	b.n	800645a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800645c:	f002 f976 	bl	800874c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	3b01      	subs	r3, #1
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	441a      	add	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	22ff      	movs	r2, #255	; 0xff
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d114      	bne.n	80064dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3310      	adds	r3, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f9b8 	bl	8007834 <xTaskRemoveFromEventList>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d012      	beq.n	80064f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <xQueueGenericReset+0xcc>)
 80064cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	e009      	b.n	80064f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3310      	adds	r3, #16
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fef3 	bl	80062cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff feee 	bl	80062cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064f0:	f002 f95a 	bl	80087a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064f4:	2301      	movs	r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <xQueueGenericCreateStatic+0x28>
 8006518:	f04f 0330 	mov.w	r3, #48	; 0x30
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	e7fe      	b.n	800652a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <xQueueGenericCreateStatic+0x42>
 8006532:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
 8006544:	e7fe      	b.n	8006544 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <xQueueGenericCreateStatic+0x4e>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <xQueueGenericCreateStatic+0x52>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericCreateStatic+0x54>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueGenericCreateStatic+0x6c>
 800655c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	e7fe      	b.n	800656e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <xQueueGenericCreateStatic+0x78>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <xQueueGenericCreateStatic+0x7c>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <xQueueGenericCreateStatic+0x7e>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <xQueueGenericCreateStatic+0x96>
 8006586:	f04f 0330 	mov.w	r3, #48	; 0x30
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800659a:	2348      	movs	r3, #72	; 0x48
 800659c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b48      	cmp	r3, #72	; 0x48
 80065a2:	d009      	beq.n	80065b8 <xQueueGenericCreateStatic+0xb4>
 80065a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e7fe      	b.n	80065b6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f842 	bl	8006662 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3730      	adds	r7, #48	; 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <xQueueGenericCreate+0x28>
 80065fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e7fe      	b.n	800660e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
 800661a:	e004      	b.n	8006626 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	fb02 f303 	mul.w	r3, r2, r3
 8006624:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3348      	adds	r3, #72	; 0x48
 800662a:	4618      	mov	r0, r3
 800662c:	f002 f9a8 	bl	8008980 <pvPortMalloc>
 8006630:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00f      	beq.n	8006658 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	3348      	adds	r3, #72	; 0x48
 800663c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006646:	79fa      	ldrb	r2, [r7, #7]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f805 	bl	8006662 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006658:	69bb      	ldr	r3, [r7, #24]
	}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e002      	b.n	8006684 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006690:	2101      	movs	r1, #1
 8006692:	69b8      	ldr	r0, [r7, #24]
 8006694:	f7ff fece 	bl	8006434 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08e      	sub	sp, #56	; 0x38
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066ae:	2300      	movs	r3, #0
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <xQueueGenericSend+0x30>
 80066bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ce:	e7fe      	b.n	80066ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <xQueueGenericSend+0x3e>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <xQueueGenericSend+0x42>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <xQueueGenericSend+0x44>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <xQueueGenericSend+0x5c>
 80066e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
 80066fa:	e7fe      	b.n	80066fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d103      	bne.n	800670a <xQueueGenericSend+0x6a>
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <xQueueGenericSend+0x6e>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <xQueueGenericSend+0x70>
 800670e:	2300      	movs	r3, #0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <xQueueGenericSend+0x88>
 8006714:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	623b      	str	r3, [r7, #32]
 8006726:	e7fe      	b.n	8006726 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006728:	f001 faa0 	bl	8007c6c <xTaskGetSchedulerState>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <xQueueGenericSend+0x98>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <xQueueGenericSend+0x9c>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <xQueueGenericSend+0x9e>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <xQueueGenericSend+0xb6>
 8006742:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e7fe      	b.n	8006754 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006756:	f001 fff9 	bl	800874c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	429a      	cmp	r2, r3
 8006764:	d302      	bcc.n	800676c <xQueueGenericSend+0xcc>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d129      	bne.n	80067c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006772:	f000 fa7c 	bl	8006c6e <prvCopyDataToQueue>
 8006776:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f001 f855 	bl	8007834 <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006790:	4b3f      	ldr	r3, [pc, #252]	; (8006890 <xQueueGenericSend+0x1f0>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	e00a      	b.n	80067b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067a8:	4b39      	ldr	r3, [pc, #228]	; (8006890 <xQueueGenericSend+0x1f0>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067b8:	f001 fff6 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 80067bc:	2301      	movs	r3, #1
 80067be:	e063      	b.n	8006888 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067c6:	f001 ffef 	bl	80087a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e05c      	b.n	8006888 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067d4:	f107 0314 	add.w	r3, r7, #20
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 f8ed 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067de:	2301      	movs	r3, #1
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067e2:	f001 ffe1 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067e6:	f000 fdcd 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ea:	f001 ffaf 	bl	800874c <vPortEnterCritical>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f4:	b25b      	sxtb	r3, r3
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d103      	bne.n	8006804 <xQueueGenericSend+0x164>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680a:	b25b      	sxtb	r3, r3
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d103      	bne.n	800681a <xQueueGenericSend+0x17a>
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800681a:	f001 ffc5 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800681e:	1d3a      	adds	r2, r7, #4
 8006820:	f107 0314 	add.w	r3, r7, #20
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f8dc 	bl	80079e4 <xTaskCheckForTimeOut>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d124      	bne.n	800687c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006834:	f000 fb13 	bl	8006e5e <prvIsQueueFull>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d018      	beq.n	8006870 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	3310      	adds	r3, #16
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ff6c 	bl	8007724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 fa9e 	bl	8006d8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006852:	f000 fda5 	bl	80073a0 <xTaskResumeAll>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f af7c 	bne.w	8006756 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <xQueueGenericSend+0x1f0>)
 8006860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	e772      	b.n	8006756 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006872:	f000 fa8c 	bl	8006d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006876:	f000 fd93 	bl	80073a0 <xTaskResumeAll>
 800687a:	e76c      	b.n	8006756 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800687c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800687e:	f000 fa86 	bl	8006d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006882:	f000 fd8d 	bl	80073a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006886:	2300      	movs	r3, #0
		}
	}
}
 8006888:	4618      	mov	r0, r3
 800688a:	3738      	adds	r7, #56	; 0x38
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <xQueueGenericSendFromISR+0x2c>
 80068ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	e7fe      	b.n	80068be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <xQueueGenericSendFromISR+0x3a>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <xQueueGenericSendFromISR+0x3e>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <xQueueGenericSendFromISR+0x40>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <xQueueGenericSendFromISR+0x58>
 80068d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	e7fe      	b.n	80068ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d103      	bne.n	80068fa <xQueueGenericSendFromISR+0x66>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <xQueueGenericSendFromISR+0x6a>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <xQueueGenericSendFromISR+0x6c>
 80068fe:	2300      	movs	r3, #0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <xQueueGenericSendFromISR+0x84>
 8006904:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	e7fe      	b.n	8006916 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006918:	f001 fff4 	bl	8008904 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800691c:	f3ef 8211 	mrs	r2, BASEPRI
 8006920:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	61ba      	str	r2, [r7, #24]
 8006932:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006934:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <xQueueGenericSendFromISR+0xb6>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d12c      	bne.n	80069a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695a:	f000 f988 	bl	8006c6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800695e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d112      	bne.n	800698e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d016      	beq.n	800699e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	3324      	adds	r3, #36	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 ff5d 	bl	8007834 <xTaskRemoveFromEventList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e007      	b.n	800699e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800698e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006992:	3301      	adds	r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	b25a      	sxtb	r2, r3
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800699e:	2301      	movs	r3, #1
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069a2:	e001      	b.n	80069a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3738      	adds	r7, #56	; 0x38
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <xQueueReceive+0x2e>
	__asm volatile
 80069d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	e7fe      	b.n	80069e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <xQueueReceive+0x3c>
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <xQueueReceive+0x40>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <xQueueReceive+0x42>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <xQueueReceive+0x5a>
 8006a02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e7fe      	b.n	8006a14 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a16:	f001 f929 	bl	8007c6c <xTaskGetSchedulerState>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <xQueueReceive+0x6a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <xQueueReceive+0x6e>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueReceive+0x70>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <xQueueReceive+0x88>
 8006a30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	e7fe      	b.n	8006a42 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a44:	f001 fe82 	bl	800874c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01f      	beq.n	8006a94 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a58:	f000 f973 	bl	8006d42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	1e5a      	subs	r2, r3, #1
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00f      	beq.n	8006a8c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	3310      	adds	r3, #16
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fedf 	bl	8007834 <xTaskRemoveFromEventList>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a7c:	4b3c      	ldr	r3, [pc, #240]	; (8006b70 <xQueueReceive+0x1b4>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a8c:	f001 fe8c 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e069      	b.n	8006b68 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a9a:	f001 fe85 	bl	80087a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e062      	b.n	8006b68 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa8:	f107 0310 	add.w	r3, r7, #16
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 ff83 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ab6:	f001 fe77 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aba:	f000 fc63 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006abe:	f001 fe45 	bl	800874c <vPortEnterCritical>
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d103      	bne.n	8006ad8 <xQueueReceive+0x11c>
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d103      	bne.n	8006aee <xQueueReceive+0x132>
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aee:	f001 fe5b 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006af2:	1d3a      	adds	r2, r7, #4
 8006af4:	f107 0310 	add.w	r3, r7, #16
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 ff72 	bl	80079e4 <xTaskCheckForTimeOut>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d123      	bne.n	8006b4e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b08:	f000 f993 	bl	8006e32 <prvIsQueueEmpty>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d017      	beq.n	8006b42 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	3324      	adds	r3, #36	; 0x24
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fe02 	bl	8007724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	f000 f934 	bl	8006d8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b26:	f000 fc3b 	bl	80073a0 <xTaskResumeAll>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d189      	bne.n	8006a44 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <xQueueReceive+0x1b4>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	e780      	b.n	8006a44 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b44:	f000 f923 	bl	8006d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b48:	f000 fc2a 	bl	80073a0 <xTaskResumeAll>
 8006b4c:	e77a      	b.n	8006a44 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b50:	f000 f91d 	bl	8006d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b54:	f000 fc24 	bl	80073a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b5a:	f000 f96a 	bl	8006e32 <prvIsQueueEmpty>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f af6f 	beq.w	8006a44 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08e      	sub	sp, #56	; 0x38
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <xQueueReceiveFromISR+0x2a>
 8006b8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	e7fe      	b.n	8006b9c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <xQueueReceiveFromISR+0x38>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xQueueReceiveFromISR+0x3c>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <xQueueReceiveFromISR+0x3e>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <xQueueReceiveFromISR+0x56>
 8006bb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bca:	f001 fe9b 	bl	8008904 <vPortValidateInterruptPriority>
	__asm volatile
 8006bce:	f3ef 8211 	mrs	r2, BASEPRI
 8006bd2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	61ba      	str	r2, [r7, #24]
 8006be4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006be6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02f      	beq.n	8006c56 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c04:	f000 f89d 	bl	8006d42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d112      	bne.n	8006c40 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	3310      	adds	r3, #16
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fe04 	bl	8007834 <xTaskRemoveFromEventList>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e007      	b.n	8006c50 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c44:	3301      	adds	r3, #1
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	b25a      	sxtb	r2, r3
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c50:	2301      	movs	r3, #1
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
 8006c54:	e001      	b.n	8006c5a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3738      	adds	r7, #56	; 0x38
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10d      	bne.n	8006ca8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d14d      	bne.n	8006d30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f805 	bl	8007ca8 <xTaskPriorityDisinherit>
 8006c9e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	e043      	b.n	8006d30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d119      	bne.n	8006ce2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6898      	ldr	r0, [r3, #8]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	f002 fc89 	bl	80095d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	441a      	add	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d32b      	bcc.n	8006d30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	e026      	b.n	8006d30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68d8      	ldr	r0, [r3, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	461a      	mov	r2, r3
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	f002 fc6f 	bl	80095d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	425b      	negs	r3, r3
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d207      	bcs.n	8006d1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	425b      	negs	r3, r3
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d105      	bne.n	8006d30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d38:	697b      	ldr	r3, [r7, #20]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d018      	beq.n	8006d86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d303      	bcc.n	8006d76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68d9      	ldr	r1, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6838      	ldr	r0, [r7, #0]
 8006d82:	f002 fc25 	bl	80095d0 <memcpy>
	}
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d96:	f001 fcd9 	bl	800874c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006da2:	e011      	b.n	8006dc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3324      	adds	r3, #36	; 0x24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fd3f 	bl	8007834 <xTaskRemoveFromEventList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dbc:	f000 fe72 	bl	8007aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dce9      	bgt.n	8006da4 <prvUnlockQueue+0x16>
 8006dd0:	e000      	b.n	8006dd4 <prvUnlockQueue+0x46>
					break;
 8006dd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	22ff      	movs	r2, #255	; 0xff
 8006dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ddc:	f001 fce4 	bl	80087a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006de0:	f001 fcb4 	bl	800874c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dec:	e011      	b.n	8006e12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d012      	beq.n	8006e1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fd1a 	bl	8007834 <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e06:	f000 fe4d 	bl	8007aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dce9      	bgt.n	8006dee <prvUnlockQueue+0x60>
 8006e1a:	e000      	b.n	8006e1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e26:	f001 fcbf 	bl	80087a8 <vPortExitCritical>
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e3a:	f001 fc87 	bl	800874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	e001      	b.n	8006e50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e50:	f001 fcaa 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8006e54:	68fb      	ldr	r3, [r7, #12]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e66:	f001 fc71 	bl	800874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d102      	bne.n	8006e7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e001      	b.n	8006e80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e80:	f001 fc92 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e014      	b.n	8006eca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ea0:	4a0e      	ldr	r2, [pc, #56]	; (8006edc <vQueueAddToRegistry+0x4c>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006eac:	490b      	ldr	r1, [pc, #44]	; (8006edc <vQueueAddToRegistry+0x4c>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <vQueueAddToRegistry+0x4c>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ec2:	e005      	b.n	8006ed0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	d9e7      	bls.n	8006ea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20001b5c 	.word	0x20001b5c

08006ee0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ef0:	f001 fc2c 	bl	800874c <vPortEnterCritical>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d103      	bne.n	8006f0a <vQueueWaitForMessageRestricted+0x2a>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d103      	bne.n	8006f20 <vQueueWaitForMessageRestricted+0x40>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f20:	f001 fc42 	bl	80087a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fc53 	bl	80077e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	f7ff ff27 	bl	8006d8e <prvUnlockQueue>
	}
 8006f40:	bf00      	nop
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08e      	sub	sp, #56	; 0x38
 8006f4c:	af04      	add	r7, sp, #16
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <xTaskCreateStatic+0x28>
	__asm volatile
 8006f5c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	e7fe      	b.n	8006f6e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <xTaskCreateStatic+0x42>
 8006f76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e7fe      	b.n	8006f88 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f8a:	2354      	movs	r3, #84	; 0x54
 8006f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b54      	cmp	r3, #84	; 0x54
 8006f92:	d009      	beq.n	8006fa8 <xTaskCreateStatic+0x60>
 8006f94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e7fe      	b.n	8006fa6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01e      	beq.n	8006fec <xTaskCreateStatic+0xa4>
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01b      	beq.n	8006fec <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f850 	bl	8007084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe6:	f000 f8cb 	bl	8007180 <prvAddNewTaskToReadyList>
 8006fea:	e001      	b.n	8006ff0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ff0:	697b      	ldr	r3, [r7, #20]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b08c      	sub	sp, #48	; 0x30
 8006ffe:	af04      	add	r7, sp, #16
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 fcb6 	bl	8008980 <pvPortMalloc>
 8007014:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800701c:	2054      	movs	r0, #84	; 0x54
 800701e:	f001 fcaf 	bl	8008980 <pvPortMalloc>
 8007022:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
 8007030:	e005      	b.n	800703e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f001 fd66 	bl	8008b04 <vPortFree>
 8007038:	e001      	b.n	800703e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	2300      	movs	r3, #0
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f80e 	bl	8007084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007068:	69f8      	ldr	r0, [r7, #28]
 800706a:	f000 f889 	bl	8007180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e002      	b.n	800707a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800707a:	69bb      	ldr	r3, [r7, #24]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800709c:	3b01      	subs	r3, #1
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <prvInitialiseNewTask+0x46>
 80070b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e7fe      	b.n	80070c8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	e012      	b.n	80070f6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	7819      	ldrb	r1, [r3, #0]
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	3334      	adds	r3, #52	; 0x34
 80070e0:	460a      	mov	r2, r1
 80070e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2b0f      	cmp	r3, #15
 80070fa:	d9e9      	bls.n	80070d0 <prvInitialiseNewTask+0x4c>
 80070fc:	e000      	b.n	8007100 <prvInitialiseNewTask+0x7c>
		{
			break;
 80070fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	2b06      	cmp	r3, #6
 800710c:	d901      	bls.n	8007112 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800710e:	2306      	movs	r3, #6
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2200      	movs	r2, #0
 8007122:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	3304      	adds	r3, #4
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff f8ef 	bl	800630c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	3318      	adds	r3, #24
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff f8ea 	bl	800630c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	f1c3 0207 	rsb	r2, r3, #7
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	69b8      	ldr	r0, [r7, #24]
 8007162:	f001 f9cd 	bl	8008500 <pxPortInitialiseStack>
 8007166:	4602      	mov	r2, r0
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007176:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007178:	bf00      	nop
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007188:	f001 fae0 	bl	800874c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800718c:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <prvAddNewTaskToReadyList+0xb8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	4a29      	ldr	r2, [pc, #164]	; (8007238 <prvAddNewTaskToReadyList+0xb8>)
 8007194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007196:	4b29      	ldr	r3, [pc, #164]	; (800723c <prvAddNewTaskToReadyList+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800719e:	4a27      	ldr	r2, [pc, #156]	; (800723c <prvAddNewTaskToReadyList+0xbc>)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <prvAddNewTaskToReadyList+0xb8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d110      	bne.n	80071ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071ac:	f000 fc9e 	bl	8007aec <prvInitialiseTaskLists>
 80071b0:	e00d      	b.n	80071ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071b2:	4b23      	ldr	r3, [pc, #140]	; (8007240 <prvAddNewTaskToReadyList+0xc0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ba:	4b20      	ldr	r3, [pc, #128]	; (800723c <prvAddNewTaskToReadyList+0xbc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d802      	bhi.n	80071ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071c8:	4a1c      	ldr	r2, [pc, #112]	; (800723c <prvAddNewTaskToReadyList+0xbc>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071ce:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <prvAddNewTaskToReadyList+0xc4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <prvAddNewTaskToReadyList+0xc4>)
 80071d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	2201      	movs	r2, #1
 80071de:	409a      	lsls	r2, r3
 80071e0:	4b19      	ldr	r3, [pc, #100]	; (8007248 <prvAddNewTaskToReadyList+0xc8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <prvAddNewTaskToReadyList+0xc8>)
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4a15      	ldr	r2, [pc, #84]	; (800724c <prvAddNewTaskToReadyList+0xcc>)
 80071f8:	441a      	add	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7ff f890 	bl	8006326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007206:	f001 facf 	bl	80087a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <prvAddNewTaskToReadyList+0xc0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00e      	beq.n	8007230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <prvAddNewTaskToReadyList+0xbc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	429a      	cmp	r2, r3
 800721e:	d207      	bcs.n	8007230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvAddNewTaskToReadyList+0xd0>)
 8007222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	2000093c 	.word	0x2000093c
 800723c:	2000083c 	.word	0x2000083c
 8007240:	20000948 	.word	0x20000948
 8007244:	20000958 	.word	0x20000958
 8007248:	20000944 	.word	0x20000944
 800724c:	20000840 	.word	0x20000840
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <vTaskDelay+0x60>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <vTaskDelay+0x2e>
 800726e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	e7fe      	b.n	8007280 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007282:	f000 f87f 	bl	8007384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007286:	2100      	movs	r1, #0
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fda9 	bl	8007de0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800728e:	f000 f887 	bl	80073a0 <xTaskResumeAll>
 8007292:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <vTaskDelay+0x64>)
 800729c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000964 	.word	0x20000964
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ca:	463a      	mov	r2, r7
 80072cc:	1d39      	adds	r1, r7, #4
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7f9 f99a 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	460a      	mov	r2, r1
 80072ea:	4920      	ldr	r1, [pc, #128]	; (800736c <vTaskStartScheduler+0xb0>)
 80072ec:	4820      	ldr	r0, [pc, #128]	; (8007370 <vTaskStartScheduler+0xb4>)
 80072ee:	f7ff fe2b 	bl	8006f48 <xTaskCreateStatic>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b1f      	ldr	r3, [pc, #124]	; (8007374 <vTaskStartScheduler+0xb8>)
 80072f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <vTaskStartScheduler+0xb8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e001      	b.n	800730a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d102      	bne.n	8007316 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007310:	f000 fdcc 	bl	8007eac <xTimerCreateTimerTask>
 8007314:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d115      	bne.n	8007348 <vTaskStartScheduler+0x8c>
 800731c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800732e:	4b12      	ldr	r3, [pc, #72]	; (8007378 <vTaskStartScheduler+0xbc>)
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <vTaskStartScheduler+0xc0>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <vTaskStartScheduler+0xc4>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007342:	f001 f965 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007346:	e00d      	b.n	8007364 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d109      	bne.n	8007364 <vTaskStartScheduler+0xa8>
 8007350:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e7fe      	b.n	8007362 <vTaskStartScheduler+0xa6>
}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	080097d0 	.word	0x080097d0
 8007370:	08007abd 	.word	0x08007abd
 8007374:	20000960 	.word	0x20000960
 8007378:	2000095c 	.word	0x2000095c
 800737c:	20000948 	.word	0x20000948
 8007380:	20000940 	.word	0x20000940

08007384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <vTaskSuspendAll+0x18>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	4a03      	ldr	r2, [pc, #12]	; (800739c <vTaskSuspendAll+0x18>)
 8007390:	6013      	str	r3, [r2, #0]
}
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000964 	.word	0x20000964

080073a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ae:	4b41      	ldr	r3, [pc, #260]	; (80074b4 <xTaskResumeAll+0x114>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <xTaskResumeAll+0x2a>
 80073b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	e7fe      	b.n	80073c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ca:	f001 f9bf 	bl	800874c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ce:	4b39      	ldr	r3, [pc, #228]	; (80074b4 <xTaskResumeAll+0x114>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a37      	ldr	r2, [pc, #220]	; (80074b4 <xTaskResumeAll+0x114>)
 80073d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <xTaskResumeAll+0x114>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d161      	bne.n	80074a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e0:	4b35      	ldr	r3, [pc, #212]	; (80074b8 <xTaskResumeAll+0x118>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05d      	beq.n	80074a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e8:	e02e      	b.n	8007448 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073ea:	4b34      	ldr	r3, [pc, #208]	; (80074bc <xTaskResumeAll+0x11c>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3318      	adds	r3, #24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fff2 	bl	80063e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe ffed 	bl	80063e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	2201      	movs	r2, #1
 800740c:	409a      	lsls	r2, r3
 800740e:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <xTaskResumeAll+0x120>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4313      	orrs	r3, r2
 8007414:	4a2a      	ldr	r2, [pc, #168]	; (80074c0 <xTaskResumeAll+0x120>)
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <xTaskResumeAll+0x124>)
 8007426:	441a      	add	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fe ff79 	bl	8006326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <xTaskResumeAll+0x128>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007442:	4b22      	ldr	r3, [pc, #136]	; (80074cc <xTaskResumeAll+0x12c>)
 8007444:	2201      	movs	r2, #1
 8007446:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <xTaskResumeAll+0x11c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1cc      	bne.n	80073ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007456:	f000 fbe3 	bl	8007c20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800745a:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <xTaskResumeAll+0x130>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d010      	beq.n	8007488 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007466:	f000 f847 	bl	80074f8 <xTaskIncrementTick>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007470:	4b16      	ldr	r3, [pc, #88]	; (80074cc <xTaskResumeAll+0x12c>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3b01      	subs	r3, #1
 800747a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f1      	bne.n	8007466 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007482:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <xTaskResumeAll+0x130>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <xTaskResumeAll+0x12c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <xTaskResumeAll+0x134>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a4:	f001 f980 	bl	80087a8 <vPortExitCritical>

	return xAlreadyYielded;
 80074a8:	68bb      	ldr	r3, [r7, #8]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000964 	.word	0x20000964
 80074b8:	2000093c 	.word	0x2000093c
 80074bc:	200008fc 	.word	0x200008fc
 80074c0:	20000944 	.word	0x20000944
 80074c4:	20000840 	.word	0x20000840
 80074c8:	2000083c 	.word	0x2000083c
 80074cc:	20000950 	.word	0x20000950
 80074d0:	2000094c 	.word	0x2000094c
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <xTaskGetTickCount+0x1c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074e4:	687b      	ldr	r3, [r7, #4]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000940 	.word	0x20000940

080074f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007502:	4b50      	ldr	r3, [pc, #320]	; (8007644 <xTaskIncrementTick+0x14c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 808c 	bne.w	8007624 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800750c:	4b4e      	ldr	r3, [pc, #312]	; (8007648 <xTaskIncrementTick+0x150>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007514:	4a4c      	ldr	r2, [pc, #304]	; (8007648 <xTaskIncrementTick+0x150>)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11f      	bne.n	8007560 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007520:	4b4a      	ldr	r3, [pc, #296]	; (800764c <xTaskIncrementTick+0x154>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <xTaskIncrementTick+0x46>
 800752a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	e7fe      	b.n	800753c <xTaskIncrementTick+0x44>
 800753e:	4b43      	ldr	r3, [pc, #268]	; (800764c <xTaskIncrementTick+0x154>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	4b42      	ldr	r3, [pc, #264]	; (8007650 <xTaskIncrementTick+0x158>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a40      	ldr	r2, [pc, #256]	; (800764c <xTaskIncrementTick+0x154>)
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4a40      	ldr	r2, [pc, #256]	; (8007650 <xTaskIncrementTick+0x158>)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b40      	ldr	r3, [pc, #256]	; (8007654 <xTaskIncrementTick+0x15c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a3e      	ldr	r2, [pc, #248]	; (8007654 <xTaskIncrementTick+0x15c>)
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	f000 fb60 	bl	8007c20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007560:	4b3d      	ldr	r3, [pc, #244]	; (8007658 <xTaskIncrementTick+0x160>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	429a      	cmp	r2, r3
 8007568:	d34d      	bcc.n	8007606 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756a:	4b38      	ldr	r3, [pc, #224]	; (800764c <xTaskIncrementTick+0x154>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <xTaskIncrementTick+0x80>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <xTaskIncrementTick+0x82>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757e:	4b36      	ldr	r3, [pc, #216]	; (8007658 <xTaskIncrementTick+0x160>)
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	601a      	str	r2, [r3, #0]
					break;
 8007586:	e03e      	b.n	8007606 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007588:	4b30      	ldr	r3, [pc, #192]	; (800764c <xTaskIncrementTick+0x154>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d203      	bcs.n	80075a8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075a0:	4a2d      	ldr	r2, [pc, #180]	; (8007658 <xTaskIncrementTick+0x160>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6013      	str	r3, [r2, #0]
						break;
 80075a6:	e02e      	b.n	8007606 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe ff17 	bl	80063e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3318      	adds	r3, #24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe ff0e 	bl	80063e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	4b23      	ldr	r3, [pc, #140]	; (800765c <xTaskIncrementTick+0x164>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	4a22      	ldr	r2, [pc, #136]	; (800765c <xTaskIncrementTick+0x164>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <xTaskIncrementTick+0x168>)
 80075e4:	441a      	add	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fe9a 	bl	8006326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <xTaskIncrementTick+0x16c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d3b4      	bcc.n	800756a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007604:	e7b1      	b.n	800756a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007606:	4b17      	ldr	r3, [pc, #92]	; (8007664 <xTaskIncrementTick+0x16c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4914      	ldr	r1, [pc, #80]	; (8007660 <xTaskIncrementTick+0x168>)
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d907      	bls.n	800762e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e004      	b.n	800762e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <xTaskIncrementTick+0x170>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	4a0f      	ldr	r2, [pc, #60]	; (8007668 <xTaskIncrementTick+0x170>)
 800762c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <xTaskIncrementTick+0x174>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007636:	2301      	movs	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800763a:	697b      	ldr	r3, [r7, #20]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000964 	.word	0x20000964
 8007648:	20000940 	.word	0x20000940
 800764c:	200008f4 	.word	0x200008f4
 8007650:	200008f8 	.word	0x200008f8
 8007654:	20000954 	.word	0x20000954
 8007658:	2000095c 	.word	0x2000095c
 800765c:	20000944 	.word	0x20000944
 8007660:	20000840 	.word	0x20000840
 8007664:	2000083c 	.word	0x2000083c
 8007668:	2000094c 	.word	0x2000094c
 800766c:	20000950 	.word	0x20000950

08007670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007676:	4b26      	ldr	r3, [pc, #152]	; (8007710 <vTaskSwitchContext+0xa0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800767e:	4b25      	ldr	r3, [pc, #148]	; (8007714 <vTaskSwitchContext+0xa4>)
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007684:	e03e      	b.n	8007704 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007686:	4b23      	ldr	r3, [pc, #140]	; (8007714 <vTaskSwitchContext+0xa4>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800768c:	4b22      	ldr	r3, [pc, #136]	; (8007718 <vTaskSwitchContext+0xa8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	fab3 f383 	clz	r3, r3
 8007698:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	f1c3 031f 	rsb	r3, r3, #31
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	491e      	ldr	r1, [pc, #120]	; (800771c <vTaskSwitchContext+0xac>)
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <vTaskSwitchContext+0x5a>
	__asm volatile
 80076b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	e7fe      	b.n	80076c8 <vTaskSwitchContext+0x58>
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <vTaskSwitchContext+0xac>)
 80076d6:	4413      	add	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3308      	adds	r3, #8
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d104      	bne.n	80076fa <vTaskSwitchContext+0x8a>
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <vTaskSwitchContext+0xb0>)
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20000964 	.word	0x20000964
 8007714:	20000950 	.word	0x20000950
 8007718:	20000944 	.word	0x20000944
 800771c:	20000840 	.word	0x20000840
 8007720:	2000083c 	.word	0x2000083c

08007724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <vTaskPlaceOnEventList+0x24>
 8007734:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e7fe      	b.n	8007746 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <vTaskPlaceOnEventList+0x44>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3318      	adds	r3, #24
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fe fe0c 	bl	800636e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007756:	2101      	movs	r1, #1
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f000 fb41 	bl	8007de0 <prvAddCurrentTaskToDelayedList>
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	2000083c 	.word	0x2000083c

0800776c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <vTaskPlaceOnUnorderedEventList+0x26>
 800777e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e7fe      	b.n	8007790 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007792:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <vTaskPlaceOnUnorderedEventList+0x42>
 800779a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e7fe      	b.n	80077ac <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <vTaskPlaceOnUnorderedEventList+0x70>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80077b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077ba:	4b08      	ldr	r3, [pc, #32]	; (80077dc <vTaskPlaceOnUnorderedEventList+0x70>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3318      	adds	r3, #24
 80077c0:	4619      	mov	r1, r3
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7fe fdaf 	bl	8006326 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077c8:	2101      	movs	r1, #1
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fb08 	bl	8007de0 <prvAddCurrentTaskToDelayedList>
}
 80077d0:	bf00      	nop
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000964 	.word	0x20000964
 80077dc:	2000083c 	.word	0x2000083c

080077e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <vTaskPlaceOnEventListRestricted+0x26>
 80077f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	e7fe      	b.n	8007804 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <vTaskPlaceOnEventListRestricted+0x50>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3318      	adds	r3, #24
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7fe fd89 	bl	8006326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800781a:	f04f 33ff 	mov.w	r3, #4294967295
 800781e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	68b8      	ldr	r0, [r7, #8]
 8007824:	f000 fadc 	bl	8007de0 <prvAddCurrentTaskToDelayedList>
	}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	2000083c 	.word	0x2000083c

08007834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <xTaskRemoveFromEventList+0x2a>
 800784a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e7fe      	b.n	800785c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3318      	adds	r3, #24
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fdbc 	bl	80063e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <xTaskRemoveFromEventList+0xac>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11c      	bne.n	80078aa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fdb3 	bl	80063e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	2201      	movs	r2, #1
 8007880:	409a      	lsls	r2, r3
 8007882:	4b18      	ldr	r3, [pc, #96]	; (80078e4 <xTaskRemoveFromEventList+0xb0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4313      	orrs	r3, r2
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <xTaskRemoveFromEventList+0xb0>)
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <xTaskRemoveFromEventList+0xb4>)
 800789a:	441a      	add	r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3304      	adds	r3, #4
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f7fe fd3f 	bl	8006326 <vListInsertEnd>
 80078a8:	e005      	b.n	80078b6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4619      	mov	r1, r3
 80078b0:	480e      	ldr	r0, [pc, #56]	; (80078ec <xTaskRemoveFromEventList+0xb8>)
 80078b2:	f7fe fd38 	bl	8006326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ba:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <xTaskRemoveFromEventList+0xbc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d905      	bls.n	80078d0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <xTaskRemoveFromEventList+0xc0>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e001      	b.n	80078d4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80078d4:	697b      	ldr	r3, [r7, #20]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000964 	.word	0x20000964
 80078e4:	20000944 	.word	0x20000944
 80078e8:	20000840 	.word	0x20000840
 80078ec:	200008fc 	.word	0x200008fc
 80078f0:	2000083c 	.word	0x2000083c
 80078f4:	20000950 	.word	0x20000950

080078f8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007902:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <vTaskRemoveFromUnorderedEventList+0x26>
 800790a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	e7fe      	b.n	800791c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <vTaskRemoveFromUnorderedEventList+0x50>
 8007934:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e7fe      	b.n	8007946 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe fd49 	bl	80063e0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fd44 	bl	80063e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4313      	orrs	r3, r2
 8007966:	4a10      	ldr	r2, [pc, #64]	; (80079a8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a0d      	ldr	r2, [pc, #52]	; (80079ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007978:	441a      	add	r2, r3
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7fe fcd0 	bl	8006326 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	429a      	cmp	r2, r3
 8007992:	d902      	bls.n	800799a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007994:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
	}
}
 800799a:	bf00      	nop
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000964 	.word	0x20000964
 80079a8:	20000944 	.word	0x20000944
 80079ac:	20000840 	.word	0x20000840
 80079b0:	2000083c 	.word	0x2000083c
 80079b4:	20000950 	.word	0x20000950

080079b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c0:	4b06      	ldr	r3, [pc, #24]	; (80079dc <vTaskInternalSetTimeOutState+0x24>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c8:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <vTaskInternalSetTimeOutState+0x28>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000954 	.word	0x20000954
 80079e0:	20000940 	.word	0x20000940

080079e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <xTaskCheckForTimeOut+0x24>
 80079f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e7fe      	b.n	8007a06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <xTaskCheckForTimeOut+0x3e>
 8007a0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e7fe      	b.n	8007a20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007a22:	f000 fe93 	bl	800874c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <xTaskCheckForTimeOut+0xb8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d102      	bne.n	8007a46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e023      	b.n	8007a8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <xTaskCheckForTimeOut+0xbc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d007      	beq.n	8007a62 <xTaskCheckForTimeOut+0x7e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d302      	bcc.n	8007a62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e015      	b.n	8007a8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d20b      	bcs.n	8007a84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff ff9d 	bl	80079b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	e004      	b.n	8007a8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a8e:	f000 fe8b 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000940 	.word	0x20000940
 8007aa0:	20000954 	.word	0x20000954

08007aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007aa8:	4b03      	ldr	r3, [pc, #12]	; (8007ab8 <vTaskMissedYield+0x14>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20000950 	.word	0x20000950

08007abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac4:	f000 f852 	bl	8007b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <prvIdleTask+0x28>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d9f9      	bls.n	8007ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <prvIdleTask+0x2c>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae0:	e7f0      	b.n	8007ac4 <prvIdleTask+0x8>
 8007ae2:	bf00      	nop
 8007ae4:	20000840 	.word	0x20000840
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
 8007af6:	e00c      	b.n	8007b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <prvInitialiseTaskLists+0x60>)
 8007b04:	4413      	add	r3, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fbe0 	bl	80062cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d9ef      	bls.n	8007af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b18:	480d      	ldr	r0, [pc, #52]	; (8007b50 <prvInitialiseTaskLists+0x64>)
 8007b1a:	f7fe fbd7 	bl	80062cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b1e:	480d      	ldr	r0, [pc, #52]	; (8007b54 <prvInitialiseTaskLists+0x68>)
 8007b20:	f7fe fbd4 	bl	80062cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b24:	480c      	ldr	r0, [pc, #48]	; (8007b58 <prvInitialiseTaskLists+0x6c>)
 8007b26:	f7fe fbd1 	bl	80062cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b2a:	480c      	ldr	r0, [pc, #48]	; (8007b5c <prvInitialiseTaskLists+0x70>)
 8007b2c:	f7fe fbce 	bl	80062cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b30:	480b      	ldr	r0, [pc, #44]	; (8007b60 <prvInitialiseTaskLists+0x74>)
 8007b32:	f7fe fbcb 	bl	80062cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b36:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <prvInitialiseTaskLists+0x78>)
 8007b38:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <prvInitialiseTaskLists+0x64>)
 8007b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <prvInitialiseTaskLists+0x7c>)
 8007b3e:	4a05      	ldr	r2, [pc, #20]	; (8007b54 <prvInitialiseTaskLists+0x68>)
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000840 	.word	0x20000840
 8007b50:	200008cc 	.word	0x200008cc
 8007b54:	200008e0 	.word	0x200008e0
 8007b58:	200008fc 	.word	0x200008fc
 8007b5c:	20000910 	.word	0x20000910
 8007b60:	20000928 	.word	0x20000928
 8007b64:	200008f4 	.word	0x200008f4
 8007b68:	200008f8 	.word	0x200008f8

08007b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b72:	e019      	b.n	8007ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b74:	f000 fdea 	bl	800874c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <prvCheckTasksWaitingTermination+0x4c>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fc2b 	bl	80063e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <prvCheckTasksWaitingTermination+0x50>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <prvCheckTasksWaitingTermination+0x50>)
 8007b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b94:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <prvCheckTasksWaitingTermination+0x54>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <prvCheckTasksWaitingTermination+0x54>)
 8007b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b9e:	f000 fe03 	bl	80087a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f80e 	bl	8007bc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <prvCheckTasksWaitingTermination+0x54>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e1      	bne.n	8007b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000910 	.word	0x20000910
 8007bbc:	2000093c 	.word	0x2000093c
 8007bc0:	20000924 	.word	0x20000924

08007bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d108      	bne.n	8007be8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 ff92 	bl	8008b04 <vPortFree>
				vPortFree( pxTCB );
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 ff8f 	bl	8008b04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007be6:	e017      	b.n	8007c18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d103      	bne.n	8007bfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 ff86 	bl	8008b04 <vPortFree>
	}
 8007bf8:	e00e      	b.n	8007c18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d009      	beq.n	8007c18 <prvDeleteTCB+0x54>
 8007c04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e7fe      	b.n	8007c16 <prvDeleteTCB+0x52>
	}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <prvResetNextTaskUnblockTime+0x44>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <prvResetNextTaskUnblockTime+0x14>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <prvResetNextTaskUnblockTime+0x16>
 8007c34:	2300      	movs	r3, #0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <prvResetNextTaskUnblockTime+0x48>)
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c42:	e008      	b.n	8007c56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <prvResetNextTaskUnblockTime+0x44>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4a05      	ldr	r2, [pc, #20]	; (8007c68 <prvResetNextTaskUnblockTime+0x48>)
 8007c54:	6013      	str	r3, [r2, #0]
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	200008f4 	.word	0x200008f4
 8007c68:	2000095c 	.word	0x2000095c

08007c6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <xTaskGetSchedulerState+0x34>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	e008      	b.n	8007c92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <xTaskGetSchedulerState+0x38>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	e001      	b.n	8007c92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c92:	687b      	ldr	r3, [r7, #4]
	}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000948 	.word	0x20000948
 8007ca4:	20000964 	.word	0x20000964

08007ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d06c      	beq.n	8007d98 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cbe:	4b39      	ldr	r3, [pc, #228]	; (8007da4 <xTaskPriorityDisinherit+0xfc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d009      	beq.n	8007cdc <xTaskPriorityDisinherit+0x34>
 8007cc8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e7fe      	b.n	8007cda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <xTaskPriorityDisinherit+0x50>
 8007ce4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cfc:	1e5a      	subs	r2, r3, #1
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d044      	beq.n	8007d98 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d140      	bne.n	8007d98 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fb60 	bl	80063e0 <uxListRemove>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d115      	bne.n	8007d52 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2a:	491f      	ldr	r1, [pc, #124]	; (8007da8 <xTaskPriorityDisinherit+0x100>)
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <xTaskPriorityDisinherit+0xaa>
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	2201      	movs	r2, #1
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	43da      	mvns	r2, r3
 8007d48:	4b18      	ldr	r3, [pc, #96]	; (8007dac <xTaskPriorityDisinherit+0x104>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	4a17      	ldr	r2, [pc, #92]	; (8007dac <xTaskPriorityDisinherit+0x104>)
 8007d50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	f1c3 0207 	rsb	r2, r3, #7
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	409a      	lsls	r2, r3
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <xTaskPriorityDisinherit+0x104>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	4a0d      	ldr	r2, [pc, #52]	; (8007dac <xTaskPriorityDisinherit+0x104>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <xTaskPriorityDisinherit+0x100>)
 8007d86:	441a      	add	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe fac9 	bl	8006326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d98:	697b      	ldr	r3, [r7, #20]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	2000083c 	.word	0x2000083c
 8007da8:	20000840 	.word	0x20000840
 8007dac:	20000944 	.word	0x20000944

08007db0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <uxTaskResetEventItemValue+0x2c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <uxTaskResetEventItemValue+0x2c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <uxTaskResetEventItemValue+0x2c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1c2 0207 	rsb	r2, r2, #7
 8007dcc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007dce:	687b      	ldr	r3, [r7, #4]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	2000083c 	.word	0x2000083c

08007de0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dea:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe faf2 	bl	80063e0 <uxListRemove>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007e02:	4b24      	ldr	r3, [pc, #144]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	2201      	movs	r2, #1
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43da      	mvns	r2, r3
 8007e10:	4b21      	ldr	r3, [pc, #132]	; (8007e98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4013      	ands	r3, r2
 8007e16:	4a20      	ldr	r2, [pc, #128]	; (8007e98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d10a      	bne.n	8007e38 <prvAddCurrentTaskToDelayedList+0x58>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e28:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	481a      	ldr	r0, [pc, #104]	; (8007e9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e32:	f7fe fa78 	bl	8006326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e36:	e026      	b.n	8007e86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e40:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d209      	bcs.n	8007e64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e50:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f7fe fa86 	bl	800636e <vListInsert>
}
 8007e62:	e010      	b.n	8007e86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7fe fa7c 	bl	800636e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d202      	bcs.n	8007e86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e80:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6013      	str	r3, [r2, #0]
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000940 	.word	0x20000940
 8007e94:	2000083c 	.word	0x2000083c
 8007e98:	20000944 	.word	0x20000944
 8007e9c:	20000928 	.word	0x20000928
 8007ea0:	200008f8 	.word	0x200008f8
 8007ea4:	200008f4 	.word	0x200008f4
 8007ea8:	2000095c 	.word	0x2000095c

08007eac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007eb6:	f000 fac3 	bl	8008440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007eba:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <xTimerCreateTimerTask+0x80>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d021      	beq.n	8007f06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007eca:	1d3a      	adds	r2, r7, #4
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	f107 030c 	add.w	r3, r7, #12
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f8 fbb3 	bl	8000640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	9202      	str	r2, [sp, #8]
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	460a      	mov	r2, r1
 8007eec:	4910      	ldr	r1, [pc, #64]	; (8007f30 <xTimerCreateTimerTask+0x84>)
 8007eee:	4811      	ldr	r0, [pc, #68]	; (8007f34 <xTimerCreateTimerTask+0x88>)
 8007ef0:	f7ff f82a 	bl	8006f48 <xTaskCreateStatic>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <xTimerCreateTimerTask+0x8c>)
 8007ef8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <xTimerCreateTimerTask+0x8c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f02:	2301      	movs	r3, #1
 8007f04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d109      	bne.n	8007f20 <xTimerCreateTimerTask+0x74>
 8007f0c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	e7fe      	b.n	8007f1e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007f20:	697b      	ldr	r3, [r7, #20]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000998 	.word	0x20000998
 8007f30:	080097d8 	.word	0x080097d8
 8007f34:	08008055 	.word	0x08008055
 8007f38:	2000099c 	.word	0x2000099c

08007f3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <xTimerGenericCommand+0x2c>
 8007f54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	623b      	str	r3, [r7, #32]
 8007f66:	e7fe      	b.n	8007f66 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <xTimerGenericCommand+0x94>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02a      	beq.n	8007fc6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	dc18      	bgt.n	8007fb4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f82:	f7ff fe73 	bl	8007c6c <xTaskGetSchedulerState>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d109      	bne.n	8007fa0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <xTimerGenericCommand+0x94>)
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	f107 0110 	add.w	r1, r7, #16
 8007f94:	2300      	movs	r3, #0
 8007f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f98:	f7fe fb82 	bl	80066a0 <xQueueGenericSend>
 8007f9c:	6278      	str	r0, [r7, #36]	; 0x24
 8007f9e:	e012      	b.n	8007fc6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <xTimerGenericCommand+0x94>)
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	f107 0110 	add.w	r1, r7, #16
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	f7fe fb78 	bl	80066a0 <xQueueGenericSend>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8007fb2:	e008      	b.n	8007fc6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <xTimerGenericCommand+0x94>)
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	f107 0110 	add.w	r1, r7, #16
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	f7fe fc68 	bl	8006894 <xQueueGenericSendFromISR>
 8007fc4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3728      	adds	r7, #40	; 0x28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20000998 	.word	0x20000998

08007fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fde:	4b1c      	ldr	r3, [pc, #112]	; (8008050 <prvProcessExpiredTimer+0x7c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe f9f7 	bl	80063e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d121      	bne.n	800803e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	18d1      	adds	r1, r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f000 f8c8 	bl	800819c <prvInsertTimerInActiveList>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d015      	beq.n	800803e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008012:	2300      	movs	r3, #0
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	2100      	movs	r1, #0
 800801c:	6978      	ldr	r0, [r7, #20]
 800801e:	f7ff ff8d 	bl	8007f3c <xTimerGenericCommand>
 8008022:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <prvProcessExpiredTimer+0x6a>
 800802a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e7fe      	b.n	800803c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	6978      	ldr	r0, [r7, #20]
 8008044:	4798      	blx	r3
}
 8008046:	bf00      	nop
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000990 	.word	0x20000990

08008054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f857 	bl	8008114 <prvGetNextExpireTime>
 8008066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4619      	mov	r1, r3
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f803 	bl	8008078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008072:	f000 f8d5 	bl	8008220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008076:	e7f1      	b.n	800805c <prvTimerTask+0x8>

08008078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008082:	f7ff f97f 	bl	8007384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f866 	bl	800815c <prvSampleTimeNow>
 8008090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d130      	bne.n	80080fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d806      	bhi.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080a6:	f7ff f97b 	bl	80073a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ff91 	bl	8007fd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080b2:	e024      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <prvProcessTimerOrBlockTask+0x90>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <prvProcessTimerOrBlockTask+0x94>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4619      	mov	r1, r3
 80080da:	f7fe ff01 	bl	8006ee0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080de:	f7ff f95f 	bl	80073a0 <xTaskResumeAll>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <prvProcessTimerOrBlockTask+0x98>)
 80080ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	f3bf 8f6f 	isb	sy
}
 80080f8:	e001      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080fa:	f7ff f951 	bl	80073a0 <xTaskResumeAll>
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000994 	.word	0x20000994
 800810c:	20000998 	.word	0x20000998
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <prvGetNextExpireTime+0x44>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf0c      	ite	eq
 8008126:	2301      	moveq	r3, #1
 8008128:	2300      	movne	r3, #0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <prvGetNextExpireTime+0x44>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e001      	b.n	800814a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800814a:	68fb      	ldr	r3, [r7, #12]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20000990 	.word	0x20000990

0800815c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008164:	f7ff f9b8 	bl	80074d8 <xTaskGetTickCount>
 8008168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800816a:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <prvSampleTimeNow+0x3c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	429a      	cmp	r2, r3
 8008172:	d205      	bcs.n	8008180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008174:	f000 f904 	bl	8008380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e002      	b.n	8008186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <prvSampleTimeNow+0x3c>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200009a0 	.word	0x200009a0

0800819c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d812      	bhi.n	80081e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e01b      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <prvInsertTimerInActiveList+0x7c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fe f8c4 	bl	800636e <vListInsert>
 80081e6:	e012      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d206      	bcs.n	80081fe <prvInsertTimerInActiveList+0x62>
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d302      	bcc.n	80081fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e007      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081fe:	4b07      	ldr	r3, [pc, #28]	; (800821c <prvInsertTimerInActiveList+0x80>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fe f8b0 	bl	800636e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000994 	.word	0x20000994
 800821c:	20000990 	.word	0x20000990

08008220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08e      	sub	sp, #56	; 0x38
 8008224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008226:	e099      	b.n	800835c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da17      	bge.n	800825e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800822e:	1d3b      	adds	r3, r7, #4
 8008230:	3304      	adds	r3, #4
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <prvProcessReceivedCommands+0x2e>
 800823a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e7fe      	b.n	800824c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008254:	6850      	ldr	r0, [r2, #4]
 8008256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008258:	6892      	ldr	r2, [r2, #8]
 800825a:	4611      	mov	r1, r2
 800825c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	db7a      	blt.n	800835a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	3304      	adds	r3, #4
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe f8b3 	bl	80063e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800827a:	463b      	mov	r3, r7
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff6d 	bl	800815c <prvSampleTimeNow>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b09      	cmp	r3, #9
 8008288:	d868      	bhi.n	800835c <prvProcessReceivedCommands+0x13c>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <prvProcessReceivedCommands+0x70>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082b9 	.word	0x080082b9
 800829c:	0800835d 	.word	0x0800835d
 80082a0:	08008313 	.word	0x08008313
 80082a4:	08008349 	.word	0x08008349
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082b9 	.word	0x080082b9
 80082b0:	0800835d 	.word	0x0800835d
 80082b4:	08008313 	.word	0x08008313
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	18d1      	adds	r1, r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c6:	f7ff ff69 	bl	800819c <prvInsertTimerInActiveList>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d045      	beq.n	800835c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d13d      	bne.n	800835c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	441a      	add	r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	2300      	movs	r3, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f2:	f7ff fe23 	bl	8007f3c <xTimerGenericCommand>
 80082f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d12e      	bne.n	800835c <prvProcessReceivedCommands+0x13c>
 80082fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	61bb      	str	r3, [r7, #24]
 8008310:	e7fe      	b.n	8008310 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <prvProcessReceivedCommands+0x114>
 8008320:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	617b      	str	r3, [r7, #20]
 8008332:	e7fe      	b.n	8008332 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	18d1      	adds	r1, r2, r3
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f7ff ff2b 	bl	800819c <prvInsertTimerInActiveList>
					break;
 8008346:	e009      	b.n	800835c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008354:	f000 fbd6 	bl	8008b04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008358:	e000      	b.n	800835c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800835a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800835c:	4b07      	ldr	r3, [pc, #28]	; (800837c <prvProcessReceivedCommands+0x15c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	1d39      	adds	r1, r7, #4
 8008362:	2200      	movs	r2, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fb29 	bl	80069bc <xQueueReceive>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	f47f af5b 	bne.w	8008228 <prvProcessReceivedCommands+0x8>
	}
}
 8008372:	bf00      	nop
 8008374:	3730      	adds	r7, #48	; 0x30
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000998 	.word	0x20000998

08008380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008386:	e044      	b.n	8008412 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008388:	4b2b      	ldr	r3, [pc, #172]	; (8008438 <prvSwitchTimerLists+0xb8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008392:	4b29      	ldr	r3, [pc, #164]	; (8008438 <prvSwitchTimerLists+0xb8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3304      	adds	r3, #4
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe f81d 	bl	80063e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d12d      	bne.n	8008412 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4413      	add	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d90e      	bls.n	80083e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083d4:	4b18      	ldr	r3, [pc, #96]	; (8008438 <prvSwitchTimerLists+0xb8>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3304      	adds	r3, #4
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f7fd ffc5 	bl	800636e <vListInsert>
 80083e4:	e015      	b.n	8008412 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083e6:	2300      	movs	r3, #0
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fda3 	bl	8007f3c <xTimerGenericCommand>
 80083f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <prvSwitchTimerLists+0x92>
 80083fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	e7fe      	b.n	8008410 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvSwitchTimerLists+0xb8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1b5      	bne.n	8008388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <prvSwitchTimerLists+0xb8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008422:	4b06      	ldr	r3, [pc, #24]	; (800843c <prvSwitchTimerLists+0xbc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a04      	ldr	r2, [pc, #16]	; (8008438 <prvSwitchTimerLists+0xb8>)
 8008428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800842a:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvSwitchTimerLists+0xbc>)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	6013      	str	r3, [r2, #0]
}
 8008430:	bf00      	nop
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000990 	.word	0x20000990
 800843c:	20000994 	.word	0x20000994

08008440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008446:	f000 f981 	bl	800874c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800844a:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d120      	bne.n	8008494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008452:	4814      	ldr	r0, [pc, #80]	; (80084a4 <prvCheckForValidListAndQueue+0x64>)
 8008454:	f7fd ff3a 	bl	80062cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008458:	4813      	ldr	r0, [pc, #76]	; (80084a8 <prvCheckForValidListAndQueue+0x68>)
 800845a:	f7fd ff37 	bl	80062cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <prvCheckForValidListAndQueue+0x6c>)
 8008460:	4a10      	ldr	r2, [pc, #64]	; (80084a4 <prvCheckForValidListAndQueue+0x64>)
 8008462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008464:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <prvCheckForValidListAndQueue+0x70>)
 8008466:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <prvCheckForValidListAndQueue+0x68>)
 8008468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800846a:	2300      	movs	r3, #0
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <prvCheckForValidListAndQueue+0x74>)
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <prvCheckForValidListAndQueue+0x78>)
 8008472:	2110      	movs	r1, #16
 8008474:	200a      	movs	r0, #10
 8008476:	f7fe f845 	bl	8006504 <xQueueGenericCreateStatic>
 800847a:	4602      	mov	r2, r0
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800847e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	490b      	ldr	r1, [pc, #44]	; (80084bc <prvCheckForValidListAndQueue+0x7c>)
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fcfe 	bl	8006e90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008494:	f000 f988 	bl	80087a8 <vPortExitCritical>
}
 8008498:	bf00      	nop
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000998 	.word	0x20000998
 80084a4:	20000968 	.word	0x20000968
 80084a8:	2000097c 	.word	0x2000097c
 80084ac:	20000990 	.word	0x20000990
 80084b0:	20000994 	.word	0x20000994
 80084b4:	20000a44 	.word	0x20000a44
 80084b8:	200009a4 	.word	0x200009a4
 80084bc:	080097e0 	.word	0x080097e0

080084c0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80084ce:	f06f 0301 	mvn.w	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <xTimerPendFunctionCallFromISR+0x3c>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	f107 0114 	add.w	r1, r7, #20
 80084e8:	2300      	movs	r3, #0
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	f7fe f9d2 	bl	8006894 <xQueueGenericSendFromISR>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3728      	adds	r7, #40	; 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000998 	.word	0x20000998

08008500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b04      	subs	r3, #4
 8008510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b04      	subs	r3, #4
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f023 0201 	bic.w	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3b04      	subs	r3, #4
 800852e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008530:	4a0c      	ldr	r2, [pc, #48]	; (8008564 <pxPortInitialiseStack+0x64>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b14      	subs	r3, #20
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f06f 0202 	mvn.w	r2, #2
 800854e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3b20      	subs	r3, #32
 8008554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	08008569 	.word	0x08008569

08008568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <prvTaskExitError+0x50>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857a:	d009      	beq.n	8008590 <prvTaskExitError+0x28>
 800857c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	e7fe      	b.n	800858e <prvTaskExitError+0x26>
 8008590:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085a2:	bf00      	nop
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0fc      	beq.n	80085a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	200000e8 	.word	0x200000e8
 80085bc:	00000000 	.word	0x00000000

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b44      	ldr	r3, [pc, #272]	; (8008728 <xPortStartScheduler+0x118>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a44      	ldr	r2, [pc, #272]	; (800872c <xPortStartScheduler+0x11c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d109      	bne.n	8008634 <xPortStartScheduler+0x24>
 8008620:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	e7fe      	b.n	8008632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008634:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <xPortStartScheduler+0x118>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <xPortStartScheduler+0x120>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d109      	bne.n	8008652 <xPortStartScheduler+0x42>
 800863e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e7fe      	b.n	8008650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008652:	4b38      	ldr	r3, [pc, #224]	; (8008734 <xPortStartScheduler+0x124>)
 8008654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008674:	b2da      	uxtb	r2, r3
 8008676:	4b30      	ldr	r3, [pc, #192]	; (8008738 <xPortStartScheduler+0x128>)
 8008678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800867a:	4b30      	ldr	r3, [pc, #192]	; (800873c <xPortStartScheduler+0x12c>)
 800867c:	2207      	movs	r2, #7
 800867e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008680:	e009      	b.n	8008696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008682:	4b2e      	ldr	r3, [pc, #184]	; (800873c <xPortStartScheduler+0x12c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3b01      	subs	r3, #1
 8008688:	4a2c      	ldr	r2, [pc, #176]	; (800873c <xPortStartScheduler+0x12c>)
 800868a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d0ef      	beq.n	8008682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086a2:	4b26      	ldr	r3, [pc, #152]	; (800873c <xPortStartScheduler+0x12c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1c3 0307 	rsb	r3, r3, #7
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d009      	beq.n	80086c2 <xPortStartScheduler+0xb2>
 80086ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	e7fe      	b.n	80086c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <xPortStartScheduler+0x12c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	4a1c      	ldr	r2, [pc, #112]	; (800873c <xPortStartScheduler+0x12c>)
 80086ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <xPortStartScheduler+0x12c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086d4:	4a19      	ldr	r2, [pc, #100]	; (800873c <xPortStartScheduler+0x12c>)
 80086d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <xPortStartScheduler+0x130>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a16      	ldr	r2, [pc, #88]	; (8008740 <xPortStartScheduler+0x130>)
 80086e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <xPortStartScheduler+0x130>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a13      	ldr	r2, [pc, #76]	; (8008740 <xPortStartScheduler+0x130>)
 80086f2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80086f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086f8:	f000 f8d6 	bl	80088a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <xPortStartScheduler+0x134>)
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008702:	f000 f8f5 	bl	80088f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <xPortStartScheduler+0x138>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0f      	ldr	r2, [pc, #60]	; (8008748 <xPortStartScheduler+0x138>)
 800870c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008712:	f7ff ff69 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008716:	f7fe ffab 	bl	8007670 <vTaskSwitchContext>
	prvTaskExitError();
 800871a:	f7ff ff25 	bl	8008568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed00 	.word	0xe000ed00
 800872c:	410fc271 	.word	0x410fc271
 8008730:	410fc270 	.word	0x410fc270
 8008734:	e000e400 	.word	0xe000e400
 8008738:	20000a8c 	.word	0x20000a8c
 800873c:	20000a90 	.word	0x20000a90
 8008740:	e000ed20 	.word	0xe000ed20
 8008744:	200000e8 	.word	0x200000e8
 8008748:	e000ef34 	.word	0xe000ef34

0800874c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vPortEnterCritical+0x54>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <vPortEnterCritical+0x54>)
 800876c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800876e:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <vPortEnterCritical+0x54>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10e      	bne.n	8008794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <vPortEnterCritical+0x58>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <vPortEnterCritical+0x48>
 8008780:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	e7fe      	b.n	8008792 <vPortEnterCritical+0x46>
	}
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	200000e8 	.word	0x200000e8
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <vPortExitCritical+0x4c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <vPortExitCritical+0x22>
 80087b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	607b      	str	r3, [r7, #4]
 80087c8:	e7fe      	b.n	80087c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <vPortExitCritical+0x4c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	4a08      	ldr	r2, [pc, #32]	; (80087f4 <vPortExitCritical+0x4c>)
 80087d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <vPortExitCritical+0x4c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <vPortExitCritical+0x3e>
 80087dc:	2300      	movs	r3, #0
 80087de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	200000e8 	.word	0x200000e8
	...

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0030 	mov.w	r0, #48	; 0x30
 8008824:	f380 8811 	msr	BASEPRI, r0
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f7fe ff1e 	bl	8007670 <vTaskSwitchContext>
 8008834:	f04f 0000 	mov.w	r0, #0
 8008838:	f380 8811 	msr	BASEPRI, r0
 800883c:	bc09      	pop	{r0, r3}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008846:	f01e 0f10 	tst.w	lr, #16
 800884a:	bf08      	it	eq
 800884c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008850:	f380 8809 	msr	PSP, r0
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst>:
 8008860:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008880:	f7fe fe3a 	bl	80074f8 <xTaskIncrementTick>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <SysTick_Handler+0x3c>)
 800888c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <vPortSetupTimerInterrupt+0x34>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortSetupTimerInterrupt+0x38>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <vPortSetupTimerInterrupt+0x3c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a0a      	ldr	r2, [pc, #40]	; (80088e8 <vPortSetupTimerInterrupt+0x40>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	099b      	lsrs	r3, r3, #6
 80088c4:	4a09      	ldr	r2, [pc, #36]	; (80088ec <vPortSetupTimerInterrupt+0x44>)
 80088c6:	3b01      	subs	r3, #1
 80088c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ca:	4b04      	ldr	r3, [pc, #16]	; (80088dc <vPortSetupTimerInterrupt+0x34>)
 80088cc:	2207      	movs	r2, #7
 80088ce:	601a      	str	r2, [r3, #0]
}
 80088d0:	bf00      	nop
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	e000e010 	.word	0xe000e010
 80088e0:	e000e018 	.word	0xe000e018
 80088e4:	200000dc 	.word	0x200000dc
 80088e8:	10624dd3 	.word	0x10624dd3
 80088ec:	e000e014 	.word	0xe000e014

080088f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008900 <vPortEnableVFP+0x10>
 80088f4:	6801      	ldr	r1, [r0, #0]
 80088f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088fa:	6001      	str	r1, [r0, #0]
 80088fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088fe:	bf00      	nop
 8008900:	e000ed88 	.word	0xe000ed88

08008904 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800890a:	f3ef 8305 	mrs	r3, IPSR
 800890e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b0f      	cmp	r3, #15
 8008914:	d913      	bls.n	800893e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008916:	4a16      	ldr	r2, [pc, #88]	; (8008970 <vPortValidateInterruptPriority+0x6c>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008920:	4b14      	ldr	r3, [pc, #80]	; (8008974 <vPortValidateInterruptPriority+0x70>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	7afa      	ldrb	r2, [r7, #11]
 8008926:	429a      	cmp	r2, r3
 8008928:	d209      	bcs.n	800893e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800892a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	607b      	str	r3, [r7, #4]
 800893c:	e7fe      	b.n	800893c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800893e:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <vPortValidateInterruptPriority+0x74>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008946:	4b0d      	ldr	r3, [pc, #52]	; (800897c <vPortValidateInterruptPriority+0x78>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d909      	bls.n	8008962 <vPortValidateInterruptPriority+0x5e>
 800894e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	e7fe      	b.n	8008960 <vPortValidateInterruptPriority+0x5c>
	}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	e000e3f0 	.word	0xe000e3f0
 8008974:	20000a8c 	.word	0x20000a8c
 8008978:	e000ed0c 	.word	0xe000ed0c
 800897c:	20000a90 	.word	0x20000a90

08008980 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800898c:	f7fe fcfa 	bl	8007384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008990:	4b57      	ldr	r3, [pc, #348]	; (8008af0 <pvPortMalloc+0x170>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008998:	f000 f90c 	bl	8008bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800899c:	4b55      	ldr	r3, [pc, #340]	; (8008af4 <pvPortMalloc+0x174>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4013      	ands	r3, r2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 808c 	bne.w	8008ac2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80089b0:	2208      	movs	r2, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d013      	beq.n	80089ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f023 0307 	bic.w	r3, r3, #7
 80089c8:	3308      	adds	r3, #8
 80089ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <pvPortMalloc+0x6a>
 80089d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e7fe      	b.n	80089e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d068      	beq.n	8008ac2 <pvPortMalloc+0x142>
 80089f0:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <pvPortMalloc+0x178>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d863      	bhi.n	8008ac2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089fa:	4b40      	ldr	r3, [pc, #256]	; (8008afc <pvPortMalloc+0x17c>)
 80089fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089fe:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <pvPortMalloc+0x17c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a04:	e004      	b.n	8008a10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d903      	bls.n	8008a22 <pvPortMalloc+0xa2>
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f1      	bne.n	8008a06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a22:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <pvPortMalloc+0x170>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d04a      	beq.n	8008ac2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4413      	add	r3, r2
 8008a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	1ad2      	subs	r2, r2, r3
 8008a46:	2308      	movs	r3, #8
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d91e      	bls.n	8008a8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <pvPortMalloc+0xf4>
 8008a60:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e7fe      	b.n	8008a72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a86:	69b8      	ldr	r0, [r7, #24]
 8008a88:	f000 f8f6 	bl	8008c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <pvPortMalloc+0x178>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <pvPortMalloc+0x178>)
 8008a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a9a:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <pvPortMalloc+0x178>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <pvPortMalloc+0x180>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d203      	bcs.n	8008aae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <pvPortMalloc+0x178>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <pvPortMalloc+0x180>)
 8008aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <pvPortMalloc+0x174>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ac2:	f7fe fc6d 	bl	80073a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <pvPortMalloc+0x164>
 8008ad0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	e7fe      	b.n	8008ae2 <pvPortMalloc+0x162>
	return pvReturn;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3728      	adds	r7, #40	; 0x28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	2000169c 	.word	0x2000169c
 8008af4:	200016a8 	.word	0x200016a8
 8008af8:	200016a0 	.word	0x200016a0
 8008afc:	20001694 	.word	0x20001694
 8008b00:	200016a4 	.word	0x200016a4

08008b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d046      	beq.n	8008ba4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b16:	2308      	movs	r3, #8
 8008b18:	425b      	negs	r3, r3
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	4b20      	ldr	r3, [pc, #128]	; (8008bac <vPortFree+0xa8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <vPortFree+0x42>
 8008b32:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e7fe      	b.n	8008b44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <vPortFree+0x5e>
 8008b4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60bb      	str	r3, [r7, #8]
 8008b60:	e7fe      	b.n	8008b60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4b11      	ldr	r3, [pc, #68]	; (8008bac <vPortFree+0xa8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d019      	beq.n	8008ba4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d115      	bne.n	8008ba4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <vPortFree+0xa8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	43db      	mvns	r3, r3
 8008b82:	401a      	ands	r2, r3
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b88:	f7fe fbfc 	bl	8007384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <vPortFree+0xac>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4413      	add	r3, r2
 8008b96:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <vPortFree+0xac>)
 8008b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b9a:	6938      	ldr	r0, [r7, #16]
 8008b9c:	f000 f86c 	bl	8008c78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ba0:	f7fe fbfe 	bl	80073a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200016a8 	.word	0x200016a8
 8008bb0:	200016a0 	.word	0x200016a0

08008bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bc0:	4b27      	ldr	r3, [pc, #156]	; (8008c60 <prvHeapInit+0xac>)
 8008bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <prvHeapInit+0xac>)
 8008be4:	4413      	add	r3, r2
 8008be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bec:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <prvHeapInit+0xb0>)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <prvHeapInit+0xb0>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c00:	2208      	movs	r2, #8
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a15      	ldr	r2, [pc, #84]	; (8008c68 <prvHeapInit+0xb4>)
 8008c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <prvHeapInit+0xb4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <prvHeapInit+0xb4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <prvHeapInit+0xb4>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <prvHeapInit+0xb8>)
 8008c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <prvHeapInit+0xbc>)
 8008c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c4c:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <prvHeapInit+0xc0>)
 8008c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	20000a94 	.word	0x20000a94
 8008c64:	20001694 	.word	0x20001694
 8008c68:	2000169c 	.word	0x2000169c
 8008c6c:	200016a4 	.word	0x200016a4
 8008c70:	200016a0 	.word	0x200016a0
 8008c74:	200016a8 	.word	0x200016a8

08008c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c80:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <prvInsertBlockIntoFreeList+0xac>)
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e002      	b.n	8008c8c <prvInsertBlockIntoFreeList+0x14>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d8f7      	bhi.n	8008c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d108      	bne.n	8008cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d118      	bne.n	8008d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d00d      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e008      	b.n	8008d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e003      	b.n	8008d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d002      	beq.n	8008d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20001694 	.word	0x20001694
 8008d28:	2000169c 	.word	0x2000169c

08008d2c <find_cmd>:
 * directory for more details.
 */

#include "../../inc/find/find_internal.h"

dbase_record_t * find_cmd (const char * message) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	static char msg [PARSER_PATTERN_MAX_LEN_DEFAULT] = {0};

	uint16_t len = strlen(message);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7f7 fa55 	bl	80001e4 <strlen>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	81fb      	strh	r3, [r7, #14]
	strncpy(msg, message, len);
 8008d3e:	89fb      	ldrh	r3, [r7, #14]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	480a      	ldr	r0, [pc, #40]	; (8008d70 <find_cmd+0x44>)
 8008d46:	f000 fc56 	bl	80095f6 <strncpy>
	if (len < PARSER_PATTERN_MAX_LEN_DEFAULT) {
 8008d4a:	89fb      	ldrh	r3, [r7, #14]
 8008d4c:	2b63      	cmp	r3, #99	; 0x63
 8008d4e:	d803      	bhi.n	8008d58 <find_cmd+0x2c>
		msg[len] = '\0';
 8008d50:	89fb      	ldrh	r3, [r7, #14]
 8008d52:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <find_cmd+0x44>)
 8008d54:	2100      	movs	r1, #0
 8008d56:	54d1      	strb	r1, [r2, r3]
	}
	return dbase_table_find(parser_command_dbase(), msg);
 8008d58:	f000 fa2e 	bl	80091b8 <parser_command_dbase>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	4904      	ldr	r1, [pc, #16]	; (8008d70 <find_cmd+0x44>)
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f8d7 	bl	8008f14 <dbase_table_find>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200016ac 	.word	0x200016ac

08008d74 <is_delimeter>:


#define EXTRACT_MSG_MAX_SIZE 100 //parser_pattern_max_len


bool is_delimeter (char symbol) {
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	71fb      	strb	r3, [r7, #7]
	return (symbol == ' ' || symbol == '\t' || symbol == '\0');
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d005      	beq.n	8008d90 <is_delimeter+0x1c>
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d002      	beq.n	8008d90 <is_delimeter+0x1c>
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <is_delimeter+0x20>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <is_delimeter+0x22>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <extraction_possible>:


static inline bool extraction_possible (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	807b      	strh	r3, [r7, #2]
 8008db4:	4613      	mov	r3, r2
 8008db6:	803b      	strh	r3, [r7, #0]
	register int msg_len = strlen(message);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7f7 fa13 	bl	80001e4 <strlen>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461c      	mov	r4, r3

	bool
		pos_in_message = from_here < msg_len,
 8008dc2:	887b      	ldrh	r3, [r7, #2]
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	bfcc      	ite	gt
 8008dc8:	2301      	movgt	r3, #1
 8008dca:	2300      	movle	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
		cmd_in_message = cmd_len <= msg_len,
 8008dce:	883b      	ldrh	r3, [r7, #0]
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	bfac      	ite	ge
 8008dd4:	2301      	movge	r3, #1
 8008dd6:	2300      	movlt	r3, #0
 8008dd8:	73bb      	strb	r3, [r7, #14]
		sym_not_delimeter = is_delimeter(message[from_here + cmd_len]);
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	883b      	ldrh	r3, [r7, #0]
 8008dde:	4413      	add	r3, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff ffc3 	bl	8008d74 <is_delimeter>
 8008dee:	4603      	mov	r3, r0
 8008df0:	737b      	strb	r3, [r7, #13]

	return
		pos_in_message &&
		cmd_in_message &&
		sym_not_delimeter &&
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <extraction_possible+0x66>
		pos_in_message &&
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <extraction_possible+0x66>
		cmd_in_message &&
 8008dfe:	7b7b      	ldrb	r3, [r7, #13]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d004      	beq.n	8008e0e <extraction_possible+0x66>
		sym_not_delimeter &&
 8008e04:	883b      	ldrh	r3, [r7, #0]
 8008e06:	2b63      	cmp	r3, #99	; 0x63
 8008e08:	d801      	bhi.n	8008e0e <extraction_possible+0x66>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <extraction_possible+0x68>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	b2db      	uxtb	r3, r3
		(cmd_len < EXTRACT_MSG_MAX_SIZE);
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd90      	pop	{r4, r7, pc}
	...

08008e20 <extract_pattern>:
// 		cmd_len <= msg_len &&
// 		cmd_len < EXTRACT_MSG_MAX_SIZE &&
// 		is_delimeter(message[from_here + cmd_len])
// 	;
// }
char * extract_pattern (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	803b      	strh	r3, [r7, #0]
	static char pattern [EXTRACT_MSG_MAX_SIZE] = {0};
	*pattern = '\0';
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <extract_pattern+0x50>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]

	if (extraction_possible(message, from_here, cmd_len)) {
 8008e36:	883a      	ldrh	r2, [r7, #0]
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ffb3 	bl	8008da8 <extraction_possible>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00d      	beq.n	8008e64 <extract_pattern+0x44>
		strncpy(pattern, &message[from_here], cmd_len);
 8008e48:	887b      	ldrh	r3, [r7, #2]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	883a      	ldrh	r2, [r7, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	4807      	ldr	r0, [pc, #28]	; (8008e70 <extract_pattern+0x50>)
 8008e54:	f000 fbcf 	bl	80095f6 <strncpy>
		pattern[from_here + cmd_len] = '\0';
 8008e58:	887a      	ldrh	r2, [r7, #2]
 8008e5a:	883b      	ldrh	r3, [r7, #0]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <extract_pattern+0x50>)
 8008e60:	2100      	movs	r1, #0
 8008e62:	54d1      	strb	r1, [r2, r3]
	}

	return pattern;
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <extract_pattern+0x50>)
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001710 	.word	0x20001710

08008e74 <free_spaces>:

char * free_spaces (char * source) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	char * delimeters = {" \t"};
 8008e7c:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <free_spaces+0x28>)
 8008e7e:	60fb      	str	r3, [r7, #12]
	int del_quantity = strspn(source, delimeters);
 8008e80:	68f9      	ldr	r1, [r7, #12]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fbcc 	bl	8009620 <strspn>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	60bb      	str	r3, [r7, #8]
    return (source + del_quantity);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4413      	add	r3, r2
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	080097e8 	.word	0x080097e8

08008ea0 <extract_pattern_from_start>:


static inline char * extract_pattern_from_start (char * string, uint16_t pattern_len) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	807b      	strh	r3, [r7, #2]
	return extract_pattern(string, 0, pattern_len);
 8008eac:	887b      	ldrh	r3, [r7, #2]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff ffb4 	bl	8008e20 <extract_pattern>
 8008eb8:	4603      	mov	r3, r0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <pattern_matched>:

static inline bool pattern_matched (char * pattern, char * template) {
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
	return !strcmp(pattern, template);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7f7 f97e 	bl	80001d0 <strcmp>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bf0c      	ite	eq
 8008eda:	2301      	moveq	r3, #1
 8008edc:	2300      	movne	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <message_payload_continue>:

static inline bool message_payload_continue (char * message) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	return strlen(free_spaces(message));
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ffbf 	bl	8008e74 <free_spaces>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f7 f973 	bl	80001e4 <strlen>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bf14      	ite	ne
 8008f04:	2301      	movne	r3, #1
 8008f06:	2300      	moveq	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <dbase_table_find>:


dbase_record_t * dbase_table_find (dbase_table_t table, char * message) {
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	static uint16_t record;	
	static bool not_found;

	not_found = true;
 8008f1e:	4b45      	ldr	r3, [pc, #276]	; (8009034 <dbase_table_find+0x120>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]
	record = 0;
 8008f24:	4b44      	ldr	r3, [pc, #272]	; (8009038 <dbase_table_find+0x124>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	801a      	strh	r2, [r3, #0]

	while (table[record].command) {
 8008f2a:	e067      	b.n	8008ffc <dbase_table_find+0xe8>
		char * command = table[record].command;
 8008f2c:	4b42      	ldr	r3, [pc, #264]	; (8009038 <dbase_table_find+0x124>)
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4413      	add	r3, r2
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	61fb      	str	r3, [r7, #28]
		int cmd_len = strlen(command);
 8008f44:	69f8      	ldr	r0, [r7, #28]
 8008f46:	f7f7 f94d 	bl	80001e4 <strlen>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	61bb      	str	r3, [r7, #24]
		char
			* msg_after_spaces = free_spaces(message),
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	f7ff ff90 	bl	8008e74 <free_spaces>
 8008f54:	6178      	str	r0, [r7, #20]
			* pattern = extract_pattern_from_start(msg_after_spaces, cmd_len);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6978      	ldr	r0, [r7, #20]
 8008f5e:	f7ff ff9f 	bl	8008ea0 <extract_pattern_from_start>
 8008f62:	6138      	str	r0, [r7, #16]

		if (pattern_matched(pattern, command)) {
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	6938      	ldr	r0, [r7, #16]
 8008f68:	f7ff ffab 	bl	8008ec2 <pattern_matched>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d03a      	beq.n	8008fe8 <dbase_table_find+0xd4>
			dbase_record_t * sub_table = table[record].subcommand;
 8008f72:	4b31      	ldr	r3, [pc, #196]	; (8009038 <dbase_table_find+0x124>)
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	461a      	mov	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4413      	add	r3, r2
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	60fb      	str	r3, [r7, #12]
			register char * msg_after_pattern = msg_after_spaces + cmd_len;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	18d4      	adds	r4, r2, r3

			if (sub_table || message_payload_continue(msg_after_pattern)) {
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d105      	bne.n	8008fa2 <dbase_table_find+0x8e>
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff ffa6 	bl	8008ee8 <message_payload_continue>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01e      	beq.n	8008fe0 <dbase_table_find+0xcc>
				if (sub_table == NULL) {
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d115      	bne.n	8008fd4 <dbase_table_find+0xc0>
					 table[record].parameter = msg_after_pattern;
 8008fa8:	4b23      	ldr	r3, [pc, #140]	; (8009038 <dbase_table_find+0x124>)
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	609c      	str	r4, [r3, #8]
					return &table[record];
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <dbase_table_find+0x124>)
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	e02a      	b.n	800902a <dbase_table_find+0x116>
				}
				return dbase_table_find(sub_table, msg_after_pattern);
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff ff9c 	bl	8008f14 <dbase_table_find>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	e024      	b.n	800902a <dbase_table_find+0x116>
			}
			else { // sub-pattern matched (record was found)
				not_found = false;
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <dbase_table_find+0x120>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
				break;
 8008fe6:	e016      	b.n	8009016 <dbase_table_find+0x102>
			}
		}
		else if (not_found) { // look at next record
 8008fe8:	4b12      	ldr	r3, [pc, #72]	; (8009034 <dbase_table_find+0x120>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <dbase_table_find+0xe8>
			record++;
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <dbase_table_find+0x124>)
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <dbase_table_find+0x124>)
 8008ffa:	801a      	strh	r2, [r3, #0]
	while (table[record].command) {
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <dbase_table_find+0x124>)
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d18a      	bne.n	8008f2c <dbase_table_find+0x18>
		}
	}
	return &table[record];
 8009016:	4b08      	ldr	r3, [pc, #32]	; (8009038 <dbase_table_find+0x124>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	461a      	mov	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4413      	add	r3, r2
}
 800902a:	4618      	mov	r0, r3
 800902c:	3724      	adds	r7, #36	; 0x24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd90      	pop	{r4, r7, pc}
 8009032:	bf00      	nop
 8009034:	20001774 	.word	0x20001774
 8009038:	20001776 	.word	0x20001776

0800903c <get_for_voltage_cut_off>:
#include "measurements_internal.h"

char * get_for_voltage_cut_off (void) {
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
	//return some_voltage_pointer
}
 8009040:	bf00      	nop
 8009042:	4618      	mov	r0, r3
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <get_for_charge_current>:

char * get_for_charge_current (void) {
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
	//return some_current_pointer
 8009050:	bf00      	nop
 8009052:	4618      	mov	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <parser_create>:
6. find function returns found cell address.
7. when not enough cells found find function returns a stub
   empty-body function and "invalid  syntax" response.
*/

void parser_create (command_dbase_t cmd_dbase, int pattern_max_len) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	parser_set_command_dbase((dbase_record_t **)cmd_dbase);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f866 	bl	8009138 <parser_set_command_dbase>
	parser_set_pattern_max_len(pattern_max_len);
 800906c:	6838      	ldr	r0, [r7, #0]
 800906e:	f000 f853 	bl	8009118 <parser_set_pattern_max_len>
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <parse>:
void parser_delete (void) {
	parser_set_command_dbase(NULL);
	parser_set_pattern_max_len(0);
}

void parse (const char * user_message) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	dbase_record_t * command = _parser(user_message);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8c7 	bl	8009218 <_parser>
 800908a:	60f8      	str	r0, [r7, #12]
	parser_set_response(command->response ?
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <parse+0x1e>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	e000      	b.n	800909c <parse+0x20>
 800909a:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <parse+0x54>)
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f85b 	bl	8009158 <parser_set_response>
		command->response :
		PARSER_RESPONSE_STUB
	);
	parser_set_action(command->action ?
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <parse+0x34>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	e002      	b.n	80090b6 <parse+0x3a>
 80090b0:	f000 f81e 	bl	80090f0 <parser_stub_action>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f85e 	bl	8009178 <parser_set_action>
		command->action :
		parser_stub_action()
	);
	parser_set_parameter(command->parameter);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f869 	bl	8009198 <parser_set_parameter>
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	080097ec 	.word	0x080097ec

080090d4 <parser_not_found>:
}

action_t parser_stub_action (void);
dbase_record_t * parser_empty_cmd_dbase (void);

static inline dbase_record_t * parser_not_found (void) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
	return parser_empty_cmd_dbase();
 80090d8:	f000 f814 	bl	8009104 <parser_empty_cmd_dbase>
 80090dc:	4603      	mov	r3, r0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <stub_action>:
 * directory for more details.
 */

#include "../../inc/parser/parser_internal.h"

static void stub_action (void) {
 80090e2:	b480      	push	{r7}
 80090e4:	af00      	add	r7, sp, #0

}
 80090e6:	bf00      	nop
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <parser_stub_action>:
action_t parser_stub_action (void) {
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
	return stub_action;
 80090f4:	4b02      	ldr	r3, [pc, #8]	; (8009100 <parser_stub_action+0x10>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	080090e3 	.word	0x080090e3

08009104 <parser_empty_cmd_dbase>:
	.response = PARSER_RESPONSE_STUB,
	.action = stub_action,
	.subcommand = NULL
};

dbase_record_t * parser_empty_cmd_dbase (void) {
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
	return &_empty_cmd_dbase;
 8009108:	4b02      	ldr	r3, [pc, #8]	; (8009114 <parser_empty_cmd_dbase+0x10>)
}
 800910a:	4618      	mov	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	200000ec 	.word	0x200000ec

08009118 <parser_set_pattern_max_len>:
static void (* _action) (void) = stub_action;
static char
	* _response = PARSER_RESPONSE_STUB,
	* _parameter = NULL;

void parser_set_pattern_max_len (int pattern_max_len) {
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	_pattern_max_len = pattern_max_len;
 8009120:	4a04      	ldr	r2, [pc, #16]	; (8009134 <parser_set_pattern_max_len+0x1c>)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6013      	str	r3, [r2, #0]
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	2000177c 	.word	0x2000177c

08009138 <parser_set_command_dbase>:

void parser_set_command_dbase (dbase_record_t ** cmd_dbase) {
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	_command_dbase = (dbase_record_t *)cmd_dbase;
 8009140:	4a04      	ldr	r2, [pc, #16]	; (8009154 <parser_set_command_dbase+0x1c>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6013      	str	r3, [r2, #0]
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20001778 	.word	0x20001778

08009158 <parser_set_response>:

void parser_set_response (char * response) {
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	_response = response;
 8009160:	4a04      	ldr	r2, [pc, #16]	; (8009174 <parser_set_response+0x1c>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6013      	str	r3, [r2, #0]
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20000104 	.word	0x20000104

08009178 <parser_set_action>:
void parser_set_action (void (* action)(void)) {
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	_action = action;
 8009180:	4a04      	ldr	r2, [pc, #16]	; (8009194 <parser_set_action+0x1c>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6013      	str	r3, [r2, #0]
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000100 	.word	0x20000100

08009198 <parser_set_parameter>:
void parser_set_parameter (char * parameter) {
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	_parameter = parameter;
 80091a0:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <parser_set_parameter+0x1c>)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6013      	str	r3, [r2, #0]
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20001780 	.word	0x20001780

080091b8 <parser_command_dbase>:

int parser_pattern_max_len (void) {
	return _pattern_max_len;
}
dbase_record_t * parser_command_dbase (void) {
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
	return _command_dbase;
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <parser_command_dbase+0x14>)
 80091be:	681b      	ldr	r3, [r3, #0]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20001778 	.word	0x20001778

080091d0 <parser_response>:

char * parser_response (void) {
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
	return _response;
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <parser_response+0x14>)
 80091d6:	681b      	ldr	r3, [r3, #0]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000104 	.word	0x20000104

080091e8 <parser_action>:
action_t parser_action (void) {
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
	return _action;
 80091ec:	4b03      	ldr	r3, [pc, #12]	; (80091fc <parser_action+0x14>)
 80091ee:	681b      	ldr	r3, [r3, #0]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20000100 	.word	0x20000100

08009200 <parser_parameter>:
char * parser_parameter (void) {
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	return _parameter;
 8009204:	4b03      	ldr	r3, [pc, #12]	; (8009214 <parser_parameter+0x14>)
 8009206:	681b      	ldr	r3, [r3, #0]
}
 8009208:	4618      	mov	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20001780 	.word	0x20001780

08009218 <_parser>:


dbase_record_t * _parser (const char * message) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	if (parser_command_dbase() == NULL)
 8009220:	f7ff ffca 	bl	80091b8 <parser_command_dbase>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <_parser+0x1a>
		return parser_empty_cmd_dbase();
 800922a:	f7ff ff6b 	bl	8009104 <parser_empty_cmd_dbase>
 800922e:	4603      	mov	r3, r0
 8009230:	e00b      	b.n	800924a <_parser+0x32>

	dbase_record_t * found_record = find_cmd(message);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fd7a 	bl	8008d2c <find_cmd>
 8009238:	60f8      	str	r0, [r7, #12]

	if (found_record != NULL) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <_parser+0x2c>
		return found_record;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e002      	b.n	800924a <_parser+0x32>
	}

	return parser_not_found(); // must never occure
 8009244:	f7ff ff46 	bl	80090d4 <parser_not_found>
 8009248:	4603      	mov	r3, r0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <set_for_voltage_cut_off>:
#include "system_config_internal.h"

void set_for_voltage_cut_off (void) {
 8009252:	b480      	push	{r7}
 8009254:	af00      	add	r7, sp, #0
	//some_voltage_pointer = parser_parameter();
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <set_for_charge_current>:

void set_for_charge_current (void) {
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
	//some_current_pointer = parser_parameter();
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <set_for_battery_type>:

void set_for_battery_type (void) {
 800926e:	b480      	push	{r7}
 8009270:	af00      	add	r7, sp, #0
	//some_type_pointer = parser_parameter();
}
 8009272:	bf00      	nop
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <get_for_battery_type>:
char * get_for_battery_type (void) {
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
	//return some_type_pointer
 8009280:	bf00      	nop
 8009282:	4618      	mov	r0, r3
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <save_data_from_set>:
#include "system_info_internal.h"

void save_data_from_set (void) {
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
	memory.parameter = parser_parameter();
 8009290:	f7ff ffb6 	bl	8009200 <parser_parameter>
 8009294:	4602      	mov	r2, r0
 8009296:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <save_data_from_set+0x28>)
 8009298:	601a      	str	r2, [r3, #0]
	memory.response = parser_response();
 800929a:	f7ff ff99 	bl	80091d0 <parser_response>
 800929e:	4602      	mov	r2, r0
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <save_data_from_set+0x28>)
 80092a2:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 80092a4:	f7ff ffa0 	bl	80091e8 <parser_action>
 80092a8:	4602      	mov	r2, r0
 80092aa:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <save_data_from_set+0x28>)
 80092ac:	609a      	str	r2, [r3, #8]
}
 80092ae:	bf00      	nop
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20001a04 	.word	0x20001a04

080092b8 <save_data_from_get>:

void save_data_from_get (char * parameter) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	memory.parameter = parameter;
 80092c0:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <save_data_from_get+0x2c>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6013      	str	r3, [r2, #0]
	memory.response = parser_response();
 80092c6:	f7ff ff83 	bl	80091d0 <parser_response>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <save_data_from_get+0x2c>)
 80092ce:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 80092d0:	f7ff ff8a 	bl	80091e8 <parser_action>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <save_data_from_get+0x2c>)
 80092d8:	609a      	str	r2, [r3, #8]
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20001a04 	.word	0x20001a04

080092e8 <init_uart_data_transfer>:
uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA + 1] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0,
		tx_complete = true;

void init_uart_data_transfer (void) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
	uart_data_transfer_events = xEventGroupCreate();
 80092ec:	f7fc fe52 	bl	8005f94 <xEventGroupCreate>
 80092f0:	4602      	mov	r2, r0
 80092f2:	4b0a      	ldr	r3, [pc, #40]	; (800931c <init_uart_data_transfer+0x34>)
 80092f4:	601a      	str	r2, [r3, #0]

	enable_idle_flag_interrupt = true;
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <init_uart_data_transfer+0x38>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <init_uart_data_transfer+0x3c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <init_uart_data_transfer+0x3c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0210 	orr.w	r2, r2, #16
 800930a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 800930c:	2263      	movs	r2, #99	; 0x63
 800930e:	4906      	ldr	r1, [pc, #24]	; (8009328 <init_uart_data_transfer+0x40>)
 8009310:	4804      	ldr	r0, [pc, #16]	; (8009324 <init_uart_data_transfer+0x3c>)
 8009312:	f7fb fdff 	bl	8004f14 <HAL_UART_Receive_DMA>
}
 8009316:	bf00      	nop
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200017e8 	.word	0x200017e8
 8009320:	200017ec 	.word	0x200017ec
 8009324:	20001ad8 	.word	0x20001ad8
 8009328:	20001784 	.word	0x20001784

0800932c <event_group_set_bit_from_isr>:

void transmit_data_by_uart (void) {
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
}

void event_group_set_bit_from_isr (EventGroupHandle_t event_group, uint32_t bit_to_set) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	60bb      	str	r3, [r7, #8]

	xResult = xEventGroupSetBitsFromISR (event_group, bit_to_set, & xHigherPriorityTaskWoken);
 800933a:	f107 0308 	add.w	r3, r7, #8
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	480b      	ldr	r0, [pc, #44]	; (8009370 <event_group_set_bit_from_isr+0x44>)
 8009344:	f7ff f8bc 	bl	80084c0 <xTimerPendFunctionCallFromISR>
 8009348:	60f8      	str	r0, [r7, #12]

	if (xResult != pdFAIL) {
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <event_group_set_bit_from_isr+0x3a>
	  portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <event_group_set_bit_from_isr+0x3a>
 8009356:	4b07      	ldr	r3, [pc, #28]	; (8009374 <event_group_set_bit_from_isr+0x48>)
 8009358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
	}
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	0800626f 	.word	0x0800626f
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a24      	ldr	r2, [pc, #144]	; (8009418 <HAL_UART_IDLE_Callback+0xa0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d142      	bne.n	8009410 <HAL_UART_IDLE_Callback+0x98>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2210      	movs	r2, #16
 8009390:	621a      	str	r2, [r3, #32]

		if(enable_idle_flag_interrupt){
 8009392:	4b22      	ldr	r3, [pc, #136]	; (800941c <HAL_UART_IDLE_Callback+0xa4>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_UART_IDLE_Callback+0x2a>
			enable_idle_flag_interrupt = false;
 800939a:	4b20      	ldr	r3, [pc, #128]	; (800941c <HAL_UART_IDLE_Callback+0xa4>)
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
			return;
 80093a0:	e036      	b.n	8009410 <HAL_UART_IDLE_Callback+0x98>
		}

		uint8_t command_len = strlen((const char *)rx_uart_data);
 80093a2:	481f      	ldr	r0, [pc, #124]	; (8009420 <HAL_UART_IDLE_Callback+0xa8>)
 80093a4:	f7f6 ff1e 	bl	80001e4 <strlen>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
		if (rx_uart_data[command_len - 1] != '\r')
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4a1b      	ldr	r2, [pc, #108]	; (8009420 <HAL_UART_IDLE_Callback+0xa8>)
 80093b2:	5cd3      	ldrb	r3, [r2, r3]
 80093b4:	2b0d      	cmp	r3, #13
 80093b6:	d126      	bne.n	8009406 <HAL_UART_IDLE_Callback+0x8e>
			return;
		rx_uart_data[command_len - 1] = '\0';
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	4a18      	ldr	r2, [pc, #96]	; (8009420 <HAL_UART_IDLE_Callback+0xa8>)
 80093be:	2100      	movs	r1, #0
 80093c0:	54d1      	strb	r1, [r2, r3]

		if (strlen((const char *)rx_uart_data) < MIN_LEN_COMMAND)
 80093c2:	4817      	ldr	r0, [pc, #92]	; (8009420 <HAL_UART_IDLE_Callback+0xa8>)
 80093c4:	f7f6 ff0e 	bl	80001e4 <strlen>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b0e      	cmp	r3, #14
 80093cc:	d91d      	bls.n	800940a <HAL_UART_IDLE_Callback+0x92>
			return;

		if(tx_complete == false)
 80093ce:	4b15      	ldr	r3, [pc, #84]	; (8009424 <HAL_UART_IDLE_Callback+0xac>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f083 0301 	eor.w	r3, r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d118      	bne.n	800940e <HAL_UART_IDLE_Callback+0x96>
			return;
		else
			tx_complete = false;
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <HAL_UART_IDLE_Callback+0xac>)
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]

		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0210 	bic.w	r2, r2, #16
 80093f0:	601a      	str	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fb fea0 	bl	8005138 <HAL_UART_AbortReceive_IT>

		event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 80093f8:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <HAL_UART_IDLE_Callback+0xb0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2101      	movs	r1, #1
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff ff94 	bl	800932c <event_group_set_bit_from_isr>
 8009404:	e004      	b.n	8009410 <HAL_UART_IDLE_Callback+0x98>
			return;
 8009406:	bf00      	nop
 8009408:	e002      	b.n	8009410 <HAL_UART_IDLE_Callback+0x98>
			return;
 800940a:	bf00      	nop
 800940c:	e000      	b.n	8009410 <HAL_UART_IDLE_Callback+0x98>
			return;
 800940e:	bf00      	nop
	}
}
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	40013800 	.word	0x40013800
 800941c:	200017ec 	.word	0x200017ec
 8009420:	20001784 	.word	0x20001784
 8009424:	20000108 	.word	0x20000108
 8009428:	200017e8 	.word	0x200017e8

0800942c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0210 	bic.w	r2, r2, #16
 8009442:	601a      	str	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fb fe77 	bl	8005138 <HAL_UART_AbortReceive_IT>

	event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <HAL_UART_RxCpltCallback+0x34>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2101      	movs	r1, #1
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff ff6b 	bl	800932c <event_group_set_bit_from_isr>
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200017e8 	.word	0x200017e8

08009464 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	event_group_set_bit_from_isr(uart_data_transfer_events, TX_DATA_COMPLETE);
 800946c:	4b04      	ldr	r3, [pc, #16]	; (8009480 <HAL_UART_TxCpltCallback+0x1c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2102      	movs	r1, #2
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ff5a 	bl	800932c <event_group_set_bit_from_isr>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	200017e8 	.word	0x200017e8

08009484 <rx_uart_data_task>:

#include <string.h>
void rx_uart_data_task (void const * argument) {
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af02      	add	r7, sp, #8
 800948a:	6078      	str	r0, [r7, #4]
	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 800948c:	4b13      	ldr	r3, [pc, #76]	; (80094dc <rx_uart_data_task+0x58>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	f04f 33ff 	mov.w	r3, #4294967295
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2301      	movs	r3, #1
 8009498:	2201      	movs	r2, #1
 800949a:	2101      	movs	r1, #1
 800949c:	f7fc fd94 	bl	8005fc8 <xEventGroupWaitBits>
/*
	parse this

*/
// EXAMPLE:
		parse((const char *)rx_uart_data);
 80094a0:	480f      	ldr	r0, [pc, #60]	; (80094e0 <rx_uart_data_task+0x5c>)
 80094a2:	f7ff fdeb 	bl	800907c <parse>
		if (strlen(rx_uart_data) > strlen("get charge_current")) {
 80094a6:	480e      	ldr	r0, [pc, #56]	; (80094e0 <rx_uart_data_task+0x5c>)
 80094a8:	f7f6 fe9c 	bl	80001e4 <strlen>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b12      	cmp	r3, #18
 80094b0:	d900      	bls.n	80094b4 <rx_uart_data_task+0x30>
			asm("nop");
 80094b2:	bf00      	nop
		}
		if (strcmp((const char *)rx_uart_data, "get charge_current") ) {
 80094b4:	490b      	ldr	r1, [pc, #44]	; (80094e4 <rx_uart_data_task+0x60>)
 80094b6:	480a      	ldr	r0, [pc, #40]	; (80094e0 <rx_uart_data_task+0x5c>)
 80094b8:	f7f6 fe8a 	bl	80001d0 <strcmp>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d000      	beq.n	80094c4 <rx_uart_data_task+0x40>
			asm("nop");
 80094c2:	bf00      	nop
		}

		memset(rx_uart_data, 0, MAX_SIZE_RX_UART_DATA);
 80094c4:	2263      	movs	r2, #99	; 0x63
 80094c6:	2100      	movs	r1, #0
 80094c8:	4805      	ldr	r0, [pc, #20]	; (80094e0 <rx_uart_data_task+0x5c>)
 80094ca:	f000 f88c 	bl	80095e6 <memset>

		// while not have parse call
		xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <rx_uart_data_task+0x58>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2104      	movs	r1, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fc fe41 	bl	800615c <xEventGroupSetBits>
	for(;;) {
 80094da:	e7d7      	b.n	800948c <rx_uart_data_task+0x8>
 80094dc:	200017e8 	.word	0x200017e8
 80094e0:	20001784 	.word	0x20001784
 80094e4:	08009828 	.word	0x08009828

080094e8 <tx_uart_data_task>:
	}
}

void tx_uart_data_task(void const * argument) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af02      	add	r7, sp, #8
 80094ee:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 80094f4:	4b1f      	ldr	r3, [pc, #124]	; (8009574 <tx_uart_data_task+0x8c>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	f04f 33ff 	mov.w	r3, #4294967295
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	2301      	movs	r3, #1
 8009500:	2201      	movs	r2, #1
 8009502:	2104      	movs	r1, #4
 8009504:	f7fc fd60 	bl	8005fc8 <xEventGroupWaitBits>

		//get pointer tx_data
		//	tx_data = GET_POINTER_FUNCTION
		// EXAMPLE:
		tx_data = parser_response();
 8009508:	f7ff fe62 	bl	80091d0 <parser_response>
 800950c:	4603      	mov	r3, r0
 800950e:	60fb      	str	r3, [r7, #12]

		if(tx_data != 0)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <tx_uart_data_task+0x44>
			HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7f6 fe64 	bl	80001e4 <strlen>
 800951c:	4603      	mov	r3, r0
 800951e:	b29b      	uxth	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	4814      	ldr	r0, [pc, #80]	; (8009578 <tx_uart_data_task+0x90>)
 8009526:	f7fb fc79 	bl	8004e1c <HAL_UART_Transmit_DMA>
 800952a:	e004      	b.n	8009536 <tx_uart_data_task+0x4e>
		else
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error\r\n", strlen("debug message or error\r\n"));
 800952c:	2218      	movs	r2, #24
 800952e:	4913      	ldr	r1, [pc, #76]	; (800957c <tx_uart_data_task+0x94>)
 8009530:	4811      	ldr	r0, [pc, #68]	; (8009578 <tx_uart_data_task+0x90>)
 8009532:	f7fb fc73 	bl	8004e1c <HAL_UART_Transmit_DMA>

		xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 8009536:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <tx_uart_data_task+0x8c>)
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	2301      	movs	r3, #1
 8009542:	2201      	movs	r2, #1
 8009544:	2102      	movs	r1, #2
 8009546:	f7fc fd3f 	bl	8005fc8 <xEventGroupWaitBits>

		tx_complete = true;
 800954a:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <tx_uart_data_task+0x98>)
 800954c:	2201      	movs	r2, #1
 800954e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Abort(&huart1);
 8009550:	4809      	ldr	r0, [pc, #36]	; (8009578 <tx_uart_data_task+0x90>)
 8009552:	f7fb fd63 	bl	800501c <HAL_UART_Abort>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <tx_uart_data_task+0x90>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <tx_uart_data_task+0x90>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f042 0210 	orr.w	r2, r2, #16
 8009564:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8009566:	2263      	movs	r2, #99	; 0x63
 8009568:	4906      	ldr	r1, [pc, #24]	; (8009584 <tx_uart_data_task+0x9c>)
 800956a:	4803      	ldr	r0, [pc, #12]	; (8009578 <tx_uart_data_task+0x90>)
 800956c:	f7fb fcd2 	bl	8004f14 <HAL_UART_Receive_DMA>
	for(;;) {
 8009570:	e7c0      	b.n	80094f4 <tx_uart_data_task+0xc>
 8009572:	bf00      	nop
 8009574:	200017e8 	.word	0x200017e8
 8009578:	20001ad8 	.word	0x20001ad8
 800957c:	0800983c 	.word	0x0800983c
 8009580:	20000108 	.word	0x20000108
 8009584:	20001784 	.word	0x20001784

08009588 <__libc_init_array>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4e0d      	ldr	r6, [pc, #52]	; (80095c0 <__libc_init_array+0x38>)
 800958c:	4c0d      	ldr	r4, [pc, #52]	; (80095c4 <__libc_init_array+0x3c>)
 800958e:	1ba4      	subs	r4, r4, r6
 8009590:	10a4      	asrs	r4, r4, #2
 8009592:	2500      	movs	r5, #0
 8009594:	42a5      	cmp	r5, r4
 8009596:	d109      	bne.n	80095ac <__libc_init_array+0x24>
 8009598:	4e0b      	ldr	r6, [pc, #44]	; (80095c8 <__libc_init_array+0x40>)
 800959a:	4c0c      	ldr	r4, [pc, #48]	; (80095cc <__libc_init_array+0x44>)
 800959c:	f000 f852 	bl	8009644 <_init>
 80095a0:	1ba4      	subs	r4, r4, r6
 80095a2:	10a4      	asrs	r4, r4, #2
 80095a4:	2500      	movs	r5, #0
 80095a6:	42a5      	cmp	r5, r4
 80095a8:	d105      	bne.n	80095b6 <__libc_init_array+0x2e>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095b0:	4798      	blx	r3
 80095b2:	3501      	adds	r5, #1
 80095b4:	e7ee      	b.n	8009594 <__libc_init_array+0xc>
 80095b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ba:	4798      	blx	r3
 80095bc:	3501      	adds	r5, #1
 80095be:	e7f2      	b.n	80095a6 <__libc_init_array+0x1e>
 80095c0:	08009890 	.word	0x08009890
 80095c4:	08009890 	.word	0x08009890
 80095c8:	08009890 	.word	0x08009890
 80095cc:	08009894 	.word	0x08009894

080095d0 <memcpy>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	1e43      	subs	r3, r0, #1
 80095d4:	440a      	add	r2, r1
 80095d6:	4291      	cmp	r1, r2
 80095d8:	d100      	bne.n	80095dc <memcpy+0xc>
 80095da:	bd10      	pop	{r4, pc}
 80095dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e4:	e7f7      	b.n	80095d6 <memcpy+0x6>

080095e6 <memset>:
 80095e6:	4402      	add	r2, r0
 80095e8:	4603      	mov	r3, r0
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d100      	bne.n	80095f0 <memset+0xa>
 80095ee:	4770      	bx	lr
 80095f0:	f803 1b01 	strb.w	r1, [r3], #1
 80095f4:	e7f9      	b.n	80095ea <memset+0x4>

080095f6 <strncpy>:
 80095f6:	b570      	push	{r4, r5, r6, lr}
 80095f8:	3901      	subs	r1, #1
 80095fa:	4604      	mov	r4, r0
 80095fc:	b902      	cbnz	r2, 8009600 <strncpy+0xa>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	4623      	mov	r3, r4
 8009602:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009606:	f803 5b01 	strb.w	r5, [r3], #1
 800960a:	1e56      	subs	r6, r2, #1
 800960c:	b92d      	cbnz	r5, 800961a <strncpy+0x24>
 800960e:	4414      	add	r4, r2
 8009610:	42a3      	cmp	r3, r4
 8009612:	d0f4      	beq.n	80095fe <strncpy+0x8>
 8009614:	f803 5b01 	strb.w	r5, [r3], #1
 8009618:	e7fa      	b.n	8009610 <strncpy+0x1a>
 800961a:	461c      	mov	r4, r3
 800961c:	4632      	mov	r2, r6
 800961e:	e7ed      	b.n	80095fc <strncpy+0x6>

08009620 <strspn>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4603      	mov	r3, r0
 8009624:	461a      	mov	r2, r3
 8009626:	f812 5b01 	ldrb.w	r5, [r2], #1
 800962a:	b13d      	cbz	r5, 800963c <strspn+0x1c>
 800962c:	1e4c      	subs	r4, r1, #1
 800962e:	e001      	b.n	8009634 <strspn+0x14>
 8009630:	42ae      	cmp	r6, r5
 8009632:	d005      	beq.n	8009640 <strspn+0x20>
 8009634:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8009638:	2e00      	cmp	r6, #0
 800963a:	d1f9      	bne.n	8009630 <strspn+0x10>
 800963c:	1a18      	subs	r0, r3, r0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	4613      	mov	r3, r2
 8009642:	e7ef      	b.n	8009624 <strspn+0x4>

08009644 <_init>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr

08009650 <_fini>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr
