
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000937c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08009740  08009740  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009740  08009740  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009744  08009744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  2000010c  08009854  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b58  08009854  00021b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252f8  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e32  00000000  00000000  00045434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c18  00000000  00000000  0004a268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  0004be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d2c  00000000  00000000  0004d820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019af1  00000000  00000000  0007054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce179  00000000  00000000  0008a03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001581b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007384  00000000  00000000  00158234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f4 	.word	0x080094f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	080094f4 	.word	0x080094f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001fa:	f107 031c 	add.w	r3, r7, #28
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800021c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000232:	2200      	movs	r2, #0
 8000234:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000246:	2201      	movs	r2, #1
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000252:	2201      	movs	r2, #1
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000260:	2204      	movs	r2, #4
 8000262:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000266:	2200      	movs	r2, #0
 8000268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000272:	f000 ffe7 	bl	8001244 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800027c:	f000 fdae 	bl	8000ddc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000284:	f107 031c 	add.w	r3, r7, #28
 8000288:	4619      	mov	r1, r3
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800028c:	f001 fc2e 	bl	8001aec <HAL_ADCEx_MultiModeConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000296:	f000 fda1 	bl	8000ddc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800029a:	2306      	movs	r3, #6
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC1_Init+0xdc>)
 80002b8:	f001 f956 	bl	8001568 <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002c2:	f000 fd8b 	bl	8000ddc <Error_Handler>
  }

}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20001840 	.word	0x20001840

080002d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002ec:	4a27      	ldr	r2, [pc, #156]	; (800038c <MX_ADC2_Init+0xb8>)
 80002ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC2_Init+0xb4>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000318:	2201      	movs	r2, #1
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_ADC2_Init+0xb4>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000324:	2201      	movs	r2, #1
 8000326:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC2_Init+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC2_Init+0xb4>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000342:	4811      	ldr	r0, [pc, #68]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000344:	f000 ff7e 	bl	8001244 <HAL_ADC_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800034e:	f000 fd45 	bl	8000ddc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000352:	230c      	movs	r3, #12
 8000354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000356:	2301      	movs	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000370:	f001 f8fa 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800037a:	f000 fd2f 	bl	8000ddc <Error_Handler>
  }

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200017f0 	.word	0x200017f0
 800038c:	50000100 	.word	0x50000100

08000390 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b0:	d16d      	bne.n	800048e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003b2:	4b5e      	ldr	r3, [pc, #376]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a5c      	ldr	r2, [pc, #368]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80003bc:	4b5b      	ldr	r3, [pc, #364]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10b      	bne.n	80003dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80003c4:	4b5a      	ldr	r3, [pc, #360]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a59      	ldr	r2, [pc, #356]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b57      	ldr	r3, [pc, #348]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d8:	623b      	str	r3, [r7, #32]
 80003da:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b54      	ldr	r3, [pc, #336]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a53      	ldr	r2, [pc, #332]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b51      	ldr	r3, [pc, #324]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f0:	61fb      	str	r3, [r7, #28]
 80003f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b4e      	ldr	r3, [pc, #312]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a4d      	ldr	r2, [pc, #308]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b4b      	ldr	r3, [pc, #300]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000408:	61bb      	str	r3, [r7, #24]
 800040a:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800040c:	2303      	movs	r3, #3
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	2303      	movs	r3, #3
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	4619      	mov	r1, r3
 800041e:	4845      	ldr	r0, [pc, #276]	; (8000534 <HAL_ADC_MspInit+0x1a4>)
 8000420:	f001 ff86 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000424:	2303      	movs	r3, #3
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000428:	2303      	movs	r3, #3
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000434:	4619      	mov	r1, r3
 8000436:	4840      	ldr	r0, [pc, #256]	; (8000538 <HAL_ADC_MspInit+0x1a8>)
 8000438:	f001 ff7a 	bl	8002330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800043c:	4b3f      	ldr	r3, [pc, #252]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800043e:	4a40      	ldr	r2, [pc, #256]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 8000440:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000442:	4b3e      	ldr	r3, [pc, #248]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000448:	4b3c      	ldr	r3, [pc, #240]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000454:	4b39      	ldr	r3, [pc, #228]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800045a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800045e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000462:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000464:	4b35      	ldr	r3, [pc, #212]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000466:	2220      	movs	r2, #32
 8000468:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000470:	4832      	ldr	r0, [pc, #200]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000472:	f001 fd43 	bl	8001efc <HAL_DMA_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800047c:	f000 fcae 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a2e      	ldr	r2, [pc, #184]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000484:	639a      	str	r2, [r3, #56]	; 0x38
 8000486:	4a2d      	ldr	r2, [pc, #180]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800048c:	e049      	b.n	8000522 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d144      	bne.n	8000522 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <HAL_ADC_MspInit+0x19c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a23      	ldr	r2, [pc, #140]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80004a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10b      	bne.n	80004c2 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004aa:	4b21      	ldr	r3, [pc, #132]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a20      	ldr	r2, [pc, #128]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230c      	movs	r3, #12
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f6:	2303      	movs	r3, #3
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <HAL_ADC_MspInit+0x1a4>)
 8000506:	f001 ff13 	bl	8002330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800050a:	2304      	movs	r3, #4
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4619      	mov	r1, r3
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <HAL_ADC_MspInit+0x1a8>)
 800051e:	f001 ff07 	bl	8002330 <HAL_GPIO_Init>
}
 8000522:	bf00      	nop
 8000524:	3738      	adds	r7, #56	; 0x38
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000128 	.word	0x20000128
 8000530:	40021000 	.word	0x40021000
 8000534:	48000800 	.word	0x48000800
 8000538:	48000400 	.word	0x48000400
 800053c:	20001890 	.word	0x20001890
 8000540:	40020008 	.word	0x40020008
 8000544:	50000100 	.word	0x50000100

08000548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_DMA_Init+0x58>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <MX_DMA_Init+0x58>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_DMA_Init+0x58>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	200b      	movs	r0, #11
 800056c:	f001 fc9c 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000570:	200b      	movs	r0, #11
 8000572:	f001 fcb5 	bl	8001ee0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	200e      	movs	r0, #14
 800057c:	f001 fc94 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000580:	200e      	movs	r0, #14
 8000582:	f001 fcad 	bl	8001ee0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2103      	movs	r1, #3
 800058a:	200f      	movs	r0, #15
 800058c:	f001 fc8c 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000590:	200f      	movs	r0, #15
 8000592:	f001 fca5 	bl	8001ee0 <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000012c 	.word	0x2000012c
 80005d4:	20000180 	.word	0x20000180

080005d8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetTimerTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetTimerTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000380 	.word	0x20000380
 8000608:	200003d4 	.word	0x200003d4

0800060c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b09a      	sub	sp, #104	; 0x68
 8000610:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_FREERTOS_Init+0x9c>)
 8000614:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 800061e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fb71 	bl	8005d0c <osMessageCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_FREERTOS_Init+0xa0>)
 800062e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_FREERTOS_Init+0xa4>)
 8000632:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fafe 	bl	8005c4c <osThreadCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_FREERTOS_Init+0xa8>)
 8000654:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityLow, 0, 128);
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_FREERTOS_Init+0xac>)
 8000658:	f107 0420 	add.w	r4, r7, #32
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 faeb 	bl	8005c4c <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_FREERTOS_Init+0xb0>)
 800067a:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityLow, 0, 128);
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_FREERTOS_Init+0xb4>)
 800067e:	1d3c      	adds	r4, r7, #4
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fada 	bl	8005c4c <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_FREERTOS_Init+0xb8>)
 800069c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800069e:	bf00      	nop
 80006a0:	3768      	adds	r7, #104	; 0x68
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	0800950c 	.word	0x0800950c
 80006ac:	200018dc 	.word	0x200018dc
 80006b0:	08009528 	.word	0x08009528
 80006b4:	200018d8 	.word	0x200018d8
 80006b8:	08009554 	.word	0x08009554
 80006bc:	200018e0 	.word	0x200018e0
 80006c0:	08009580 	.word	0x08009580
 80006c4:	200018d4 	.word	0x200018d4

080006c8 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <StartDefaultTask+0x5c>)
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fb40 	bl	8005d60 <osMessageGet>
	if (event.status == osEventMessage) {
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b10      	cmp	r3, #16
 80006e4:	d11a      	bne.n	800071c <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <StartDefaultTask+0x60>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <StartDefaultTask+0x64>)
 80006f2:	5499      	strb	r1, [r3, r2]
		num_cell++;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <StartDefaultTask+0x60>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <StartDefaultTask+0x60>)
 80006fe:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <StartDefaultTask+0x60>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <StartDefaultTask+0x64>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <StartDefaultTask+0x4e>
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <StartDefaultTask+0x60>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2b64      	cmp	r3, #100	; 0x64
 8000714:	d102      	bne.n	800071c <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <StartDefaultTask+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f005 fae1 	bl	8005ce4 <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 8000722:	e7d5      	b.n	80006d0 <StartDefaultTask+0x8>
 8000724:	200018dc 	.word	0x200018dc
 8000728:	200007d4 	.word	0x200007d4
 800072c:	200007d8 	.word	0x200007d8

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <MX_GPIO_Init+0x74>)
 800073c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0x74>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_GPIO_Init+0x74>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_GPIO_Init+0x74>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a8      	sub	sp, #160	; 0xa0
 80007ac:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80007ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80007bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c0:	2254      	movs	r2, #84	; 0x54
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 fe66 	bl	8009496 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f008 fe5f 	bl	8009496 <memset>
  HRTIM_SimpleOCChannelCfgTypeDef pSimpleOCChannelCfg = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]

  hhrtim1.Instance = HRTIM1;
 80007f0:	4bc9      	ldr	r3, [pc, #804]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80007f2:	4aca      	ldr	r2, [pc, #808]	; (8000b1c <MX_HRTIM1_Init+0x374>)
 80007f4:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80007f6:	4bc8      	ldr	r3, [pc, #800]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80007fc:	4bc6      	ldr	r3, [pc, #792]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000802:	48c5      	ldr	r0, [pc, #788]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000804:	f001 ff06 	bl	8002614 <HAL_HRTIM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_HRTIM1_Init+0x6a>
  {
    Error_Handler();
 800080e:	f000 fae5 	bl	8000ddc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000812:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000820:	2305      	movs	r3, #5
 8000822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000826:	2308      	movs	r3, #8
 8000828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800082c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000830:	461a      	mov	r2, r3
 8000832:	2105      	movs	r1, #5
 8000834:	48b8      	ldr	r0, [pc, #736]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000836:	f001 ffb9 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 8000840:	f000 facc 	bl	8000ddc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DMASrcAddress = 0x0000;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000854:	2301      	movs	r3, #1
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800085c:	2300      	movs	r3, #0
 800085e:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000860:	2300      	movs	r3, #0
 8000862:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000868:	2300      	movs	r3, #0
 800086a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800086c:	2300      	movs	r3, #0
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000870:	2300      	movs	r3, #0
 8000872:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000874:	2300      	movs	r3, #0
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800087c:	461a      	mov	r2, r3
 800087e:	2105      	movs	r1, #5
 8000880:	48a5      	ldr	r0, [pc, #660]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000882:	f002 f922 	bl	8002aca <HAL_HRTIM_WaveformTimerConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 800088c:	f000 faa6 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000890:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000894:	461a      	mov	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	489f      	ldr	r0, [pc, #636]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 800089a:	f001 ff87 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 80008a4:	f000 fa9a 	bl	8000ddc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DMASrcAddress = 0x0000;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008bc:	2300      	movs	r3, #0
 80008be:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80008c8:	2300      	movs	r3, #0
 80008ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80008e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e8:	461a      	mov	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	488a      	ldr	r0, [pc, #552]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80008ee:	f002 f8ec 	bl	8002aca <HAL_HRTIM_WaveformTimerConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 80008f8:	f000 fa70 	bl	8000ddc <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000900:	2300      	movs	r3, #0
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000904:	2301      	movs	r3, #1
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000908:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800090c:	461a      	mov	r2, r3
 800090e:	2101      	movs	r1, #1
 8000910:	4881      	ldr	r0, [pc, #516]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000912:	f002 f8da 	bl	8002aca <HAL_HRTIM_WaveformTimerConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_HRTIM1_Init+0x178>
  {
    Error_Handler();
 800091c:	f000 fa5e 	bl	8000ddc <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 8000928:	2301      	movs	r3, #1
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 800092c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000930:	461a      	mov	r2, r3
 8000932:	2102      	movs	r1, #2
 8000934:	4878      	ldr	r0, [pc, #480]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000936:	f002 f8c8 	bl	8002aca <HAL_HRTIM_WaveformTimerConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_HRTIM1_Init+0x19c>
  {
    Error_Handler();
 8000940:	f000 fa4c 	bl	8000ddc <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000944:	2300      	movs	r3, #0
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMADstAddress = 0x0000;
 8000948:	2300      	movs	r3, #0
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DMASize = 0x1;
 800094c:	2301      	movs	r3, #1
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800095a:	461a      	mov	r2, r3
 800095c:	2103      	movs	r1, #3
 800095e:	486e      	ldr	r0, [pc, #440]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000960:	f002 f8b3 	bl	8002aca <HAL_HRTIM_WaveformTimerConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 800096a:	f000 fa37 	bl	8000ddc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2201      	movs	r2, #1
 8000994:	2100      	movs	r1, #0
 8000996:	4860      	ldr	r0, [pc, #384]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000998:	f002 f909 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_HRTIM1_Init+0x1fe>
  {
    Error_Handler();
 80009a2:	f000 fa1b 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2204      	movs	r2, #4
 80009ac:	2101      	movs	r1, #1
 80009ae:	485a      	ldr	r0, [pc, #360]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80009b0:	f002 f8fd 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 80009ba:	f000 fa0f 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2210      	movs	r2, #16
 80009c4:	2102      	movs	r1, #2
 80009c6:	4854      	ldr	r0, [pc, #336]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80009c8:	f002 f8f1 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_HRTIM1_Init+0x22e>
  {
    Error_Handler();
 80009d2:	f000 fa03 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	2103      	movs	r1, #3
 80009de:	484e      	ldr	r0, [pc, #312]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80009e0:	f002 f8e5 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_HRTIM1_Init+0x246>
  {
    Error_Handler();
 80009ea:	f000 f9f7 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2202      	movs	r2, #2
 80009f4:	2100      	movs	r1, #0
 80009f6:	4848      	ldr	r0, [pc, #288]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 80009f8:	f002 f8d9 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_HRTIM1_Init+0x25e>
  {
    Error_Handler();
 8000a02:	f000 f9eb 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4842      	ldr	r0, [pc, #264]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a10:	f002 f8cd 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_HRTIM1_Init+0x276>
  {
    Error_Handler();
 8000a1a:	f000 f9df 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2220      	movs	r2, #32
 8000a24:	2102      	movs	r1, #2
 8000a26:	483c      	ldr	r0, [pc, #240]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a28:	f002 f8c1 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8000a32:	f000 f9d3 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	4836      	ldr	r0, [pc, #216]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a40:	f002 f8b5 	bl	8002bae <HAL_HRTIM_WaveformOutputConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 8000a4a:	f000 f9c7 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a52:	461a      	mov	r2, r3
 8000a54:	2101      	movs	r1, #1
 8000a56:	4830      	ldr	r0, [pc, #192]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a58:	f001 fea8 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_HRTIM1_Init+0x2be>
  {
    Error_Handler();
 8000a62:	f000 f9bb 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000a66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	482a      	ldr	r0, [pc, #168]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a70:	f001 fe9c 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8000a7a:	f000 f9af 	bl	8000ddc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000a7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a82:	461a      	mov	r2, r3
 8000a84:	2103      	movs	r1, #3
 8000a86:	4824      	ldr	r0, [pc, #144]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000a88:	f001 fe90 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_HRTIM1_Init+0x2ee>
  {
    Error_Handler();
 8000a92:	f000 f9a3 	bl	8000ddc <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 8000a96:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000a9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000aa8:	f001 fe80 	bl	80027ac <HAL_HRTIM_TimeBaseConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_HRTIM1_Init+0x30e>
  {
    Error_Handler();
 8000ab2:	f000 f993 	bl	8000ddc <Error_Handler>
  }
  pSimpleOCChannelCfg.Mode = HRTIM_BASICOCMODE_TOGGLE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
  pSimpleOCChannelCfg.Pulse = 0xFFFD;
 8000aba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000abe:	613b      	str	r3, [r7, #16]
  pSimpleOCChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  pSimpleOCChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pSimpleOCChannelCfg) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000ad4:	f001 fe92 	bl	80027fc <HAL_HRTIM_SimpleOCChannelConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_HRTIM1_Init+0x33a>
  {
    Error_Handler();
 8000ade:	f000 f97d 	bl	8000ddc <Error_Handler>
  }
  pSimplePWMChannelCfg.Pulse = 0xFFFD;
 8000ae2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000ae6:	603b      	str	r3, [r7, #0]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pSimplePWMChannelCfg) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af6:	2104      	movs	r1, #4
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000afa:	f001 ff3e 	bl	800297a <HAL_HRTIM_SimplePWMChannelConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_HRTIM1_Init+0x360>
  {
    Error_Handler();
 8000b04:	f000 f96a 	bl	8000ddc <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_HRTIM1_Init+0x370>)
 8000b0a:	f000 f829 	bl	8000b60 <HAL_HRTIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	37a0      	adds	r7, #160	; 0xa0
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200018e4 	.word	0x200018e4
 8000b1c:	40017400 	.word	0x40017400

08000b20 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_HRTIM_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_HRTIM_MspInit+0x3c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_HRTIM_MspInit+0x3c>)
 8000b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_HRTIM_MspInit+0x3c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40017400 	.word	0x40017400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <HAL_HRTIM_MspPostInit+0xdc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d157      	bne.n	8000c32 <HAL_HRTIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_HRTIM_MspPostInit+0xe0>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000bdc:	230d      	movs	r3, #13
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_HRTIM_MspPostInit+0xe4>)
 8000be8:	f001 fba2 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <HAL_HRTIM_MspPostInit+0xe8>)
 8000c0a:	f001 fb91 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000c20:	230d      	movs	r3, #13
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f001 fb7f 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40017400 	.word	0x40017400
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800

08000c4c <set_vol_cut_off>:
#include "system_config/system_config_internal.h"
#include "measurements/measurements_internal.h"

#include <string.h>

void set_vol_cut_off (void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000c50:	f008 fa74 	bl	800913c <save_data_from_set>
	set_for_voltage_cut_off();
 8000c54:	f008 fa55 	bl	8009102 <set_for_voltage_cut_off>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <set_charge_current>:

void set_charge_current (void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000c60:	f008 fa6c 	bl	800913c <save_data_from_set>
	set_for_charge_current();
 8000c64:	f008 fa54 	bl	8009110 <set_for_charge_current>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <set_battery_type>:

void set_battery_type (void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000c70:	f008 fa64 	bl	800913c <save_data_from_set>
	set_for_battery_type();
 8000c74:	f008 fa53 	bl	800911e <set_for_battery_type>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <get_vol_cut_off>:
		RESP_INVALID_PARAMETER)
};
	
// HERE MUST BE DECLARATIONS ONLY!
// NOT IMPLEMENTETIONS!
void get_vol_cut_off (void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_voltage_cut_off());
 8000c80:	f008 f934 	bl	8008eec <get_for_voltage_cut_off>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fa6e 	bl	8009168 <save_data_from_get>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <get_charge_current>:

void get_charge_current (void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_charge_current());
 8000c94:	f008 f932 	bl	8008efc <get_for_charge_current>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fa64 	bl	8009168 <save_data_from_get>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <get_battery_type>:

void get_battery_type (void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_battery_type());
 8000ca8:	f008 fa40 	bl	800912c <get_for_battery_type>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 fa5a 	bl	8009168 <save_data_from_get>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fa8c 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f81a 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f7ff fd34 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc8:	f7ff fc3e 	bl	8000548 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ccc:	f000 f98a 	bl	8000fe4 <MX_USART1_UART_Init>
  MX_HRTIM1_Init();
 8000cd0:	f7ff fd6a 	bl	80007a8 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8000cd4:	f7ff fa8e 	bl	80001f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000cd8:	f7ff fafc 	bl	80002d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
//  INIT PARSER EXAMPLE:
  parser_create(&smart_charger_commands, MAX_CMD_LEN);
 8000cdc:	211e      	movs	r1, #30
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <main+0x3c>)
 8000ce0:	f008 f914 	bl	8008f0c <parser_create>
  init_uart_data_transfer();
 8000ce4:	f008 fa58 	bl	8009198 <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ce8:	f7ff fc90 	bl	800060c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000cec:	f004 ffa7 	bl	8005c3e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x38>
 8000cf2:	bf00      	nop
 8000cf4:	200000a0 	.word	0x200000a0

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fbc5 	bl	8009496 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	2310      	movs	r3, #16
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fa8d 	bl	800326c <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d58:	f000 f840 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 f97f 	bl	800407c <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d84:	f000 f82a 	bl	8000ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 8000d88:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d8c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d96:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fbd4 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000daa:	f000 f817 	bl	8000ddc <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3758      	adds	r7, #88	; 0x58
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dca:	f000 fa1b 	bl	8001204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_MspInit+0x70>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_MspInit+0x70>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_MspInit+0x70>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_MspInit+0x70>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_MspInit+0x70>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_MspInit+0x70>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	f06f 0009 	mvn.w	r0, #9
 8000e2a:	f001 f83d 	bl	8001ea8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	f06f 0004 	mvn.w	r0, #4
 8000e36:	f001 f837 	bl	8001ea8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	f06f 0003 	mvn.w	r0, #3
 8000e42:	f001 f831 	bl	8001ea8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	210f      	movs	r1, #15
 8000e4a:	f06f 0001 	mvn.w	r0, #1
 8000e4e:	f001 f82b 	bl	8001ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2019      	movs	r0, #25
 8000e76:	f001 f817 	bl	8001ea8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f001 f830 	bl	8001ee0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_InitTick+0x9c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_InitTick+0x9c>)
 8000e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_InitTick+0x9c>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e98:	f107 0210 	add.w	r2, r7, #16
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fb20 	bl	80044e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ea8:	f003 fafc 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8000eac:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_InitTick+0xa0>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ede:	f003 fc6b 	bl	80047b8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_InitTick+0xa4>)
 8000eea:	f003 fc9b 	bl	8004824 <HAL_TIM_Base_Start_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	200019cc 	.word	0x200019cc
 8000f08:	40012c00 	.word	0x40012c00

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DMA1_Channel1_IRQHandler+0x10>)
 8000f46:	f001 f8f6 	bl	8002136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20001890 	.word	0x20001890

08000f54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <DMA1_Channel4_IRQHandler+0x10>)
 8000f5a:	f001 f8ec 	bl	8002136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001a0c 	.word	0x20001a0c

08000f68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA1_Channel5_IRQHandler+0x10>)
 8000f6e:	f001 f8e2 	bl	8002136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20001a50 	.word	0x20001a50

08000f7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f82:	f003 fc79 	bl	8004878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200019cc 	.word	0x200019cc

08000f90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <USART1_IRQHandler+0x24>)
 8000f96:	f004 f897 	bl	80050c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <USART1_IRQHandler+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d102      	bne.n	8000fae <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART1_IRQHandler+0x24>)
 8000faa:	f008 f93d 	bl	8009228 <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20001a94 	.word	0x20001a94

08000fb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <SystemInit+0x28>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <SystemInit+0x28>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SystemInit+0x28>)
 8000fce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USART1_UART_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_USART1_UART_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_USART1_UART_Init+0x58>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART1_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USART1_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART1_UART_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART1_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART1_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART1_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART1_UART_Init+0x58>)
 8001028:	f003 fe04 	bl	8004c34 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001032:	f7ff fed3 	bl	8000ddc <Error_Handler>
  }

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001a94 	.word	0x20001a94
 8001040:	40013800 	.word	0x40013800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a41      	ldr	r2, [pc, #260]	; (8001168 <HAL_UART_MspInit+0x124>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d17b      	bne.n	800115e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_UART_MspInit+0x128>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_UART_MspInit+0x128>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b3e      	ldr	r3, [pc, #248]	; (800116c <HAL_UART_MspInit+0x128>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_UART_MspInit+0x128>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a3a      	ldr	r2, [pc, #232]	; (800116c <HAL_UART_MspInit+0x128>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_UART_MspInit+0x128>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <HAL_UART_MspInit+0x12c>)
 80010b2:	f001 f93d 	bl	8002330 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_UART_MspInit+0x134>)
 80010ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010e6:	4823      	ldr	r0, [pc, #140]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010e8:	f000 ff08 	bl	8001efc <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80010f2:	f7ff fe73 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_UART_MspInit+0x130>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_UART_MspInit+0x138>)
 8001104:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_UART_MspInit+0x13c>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_MspInit+0x138>)
 800110a:	2210      	movs	r2, #16
 800110c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0x138>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0x138>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x138>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_MspInit+0x138>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x138>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_MspInit+0x138>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <HAL_UART_MspInit+0x138>)
 8001134:	f000 fee2 	bl	8001efc <HAL_DMA_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800113e:	f7ff fe4d 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_UART_MspInit+0x138>)
 8001146:	669a      	str	r2, [r3, #104]	; 0x68
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_UART_MspInit+0x138>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2105      	movs	r1, #5
 8001152:	2025      	movs	r0, #37	; 0x25
 8001154:	f000 fea8 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001158:	2025      	movs	r0, #37	; 0x25
 800115a:	f000 fec1 	bl	8001ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40013800 	.word	0x40013800
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400
 8001174:	20001a50 	.word	0x20001a50
 8001178:	40020058 	.word	0x40020058
 800117c:	20001a0c 	.word	0x20001a0c
 8001180:	40020044 	.word	0x40020044

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001188:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800118a:	e003      	b.n	8001194 <LoopCopyDataInit>

0800118c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800118e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001190:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001192:	3104      	adds	r1, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001198:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800119a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800119c:	d3f6      	bcc.n	800118c <CopyDataInit>
	ldr	r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80011a0:	e002      	b.n	80011a8 <LoopFillZerobss>

080011a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a4:	f842 3b04 	str.w	r3, [r2], #4

080011a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <LoopForever+0x16>)
	cmp	r2, r3
 80011aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011ac:	d3f9      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ae:	f7ff ff03 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f008 f941 	bl	8009438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff fd7f 	bl	8000cb8 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80011c0:	08009748 	.word	0x08009748
	ldr	r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011c8:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 80011cc:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 80011d0:	20001b58 	.word	0x20001b58

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 fe52 	bl	8001e92 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fe36 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdfa 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200000e4 	.word	0x200000e4
 8001228:	20001b14 	.word	0x20001b14

0800122c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20001b14 	.word	0x20001b14

08001244 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09a      	sub	sp, #104	; 0x68
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e172      	b.n	800154a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d176      	bne.n	8001364 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d152      	bne.n	8001324 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff f879 	bl	8000390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d13b      	bne.n	8001324 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fce3 	bl	8001c78 <ADC_Disable>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12f      	bne.n	8001324 <HAL_ADC_Init+0xe0>
 80012c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d12b      	bne.n	8001324 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001300:	4b94      	ldr	r3, [pc, #592]	; (8001554 <HAL_ADC_Init+0x310>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_ADC_Init+0x314>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9a      	lsrs	r2, r3, #18
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	e002      	b.n	800131e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800133c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001340:	d110      	bne.n	8001364 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f023 0312 	bic.w	r3, r3, #18
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 80df 	bne.w	8001530 <HAL_ADC_Init+0x2ec>
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80da 	bne.w	8001530 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80d2 	bne.w	8001530 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001394:	f043 0202 	orr.w	r2, r3, #2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b6f      	ldr	r3, [pc, #444]	; (800155c <HAL_ADC_Init+0x318>)
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a8:	d102      	bne.n	80013b0 <HAL_ADC_Init+0x16c>
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_ADC_Init+0x31c>)
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	e002      	b.n	80013b6 <HAL_ADC_Init+0x172>
 80013b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013b4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_ADC_Init+0x192>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x192>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_ADC_Init+0x194>
 80013d6:	2300      	movs	r3, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11c      	bne.n	8001416 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013dc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d010      	beq.n	8001404 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_ADC_Init+0x1ba>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Init+0x1ba>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_ADC_Init+0x1bc>
 80013fe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	431a      	orrs	r2, r3
 8001412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001414:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7e5b      	ldrb	r3, [r3, #25]
 800141a:	035b      	lsls	r3, r3, #13
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001420:	2a01      	cmp	r2, #1
 8001422:	d002      	beq.n	800142a <HAL_ADC_Init+0x1e6>
 8001424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001428:	e000      	b.n	800142c <HAL_ADC_Init+0x1e8>
 800142a:	2200      	movs	r2, #0
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4313      	orrs	r3, r2
 800143a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800143c:	4313      	orrs	r3, r2
 800143e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d11b      	bne.n	8001482 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7e5b      	ldrb	r3, [r3, #25]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	045a      	lsls	r2, r3, #17
 800145a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800145c:	4313      	orrs	r3, r2
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	663b      	str	r3, [r7, #96]	; 0x60
 8001464:	e00d      	b.n	8001482 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800146e:	f043 0220 	orr.w	r2, r3, #32
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	2b01      	cmp	r3, #1
 8001488:	d007      	beq.n	800149a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	4313      	orrs	r3, r2
 8001494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001496:	4313      	orrs	r3, r2
 8001498:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d114      	bne.n	80014d2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b6:	f023 0302 	bic.w	r3, r3, #2
 80014ba:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	039a      	lsls	r2, r3, #14
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ce:	4313      	orrs	r3, r2
 80014d0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_ADC_Init+0x320>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014e2:	430b      	orrs	r3, r1
 80014e4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10c      	bne.n	8001508 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f023 010f 	bic.w	r1, r3, #15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
 8001506:	e007      	b.n	8001518 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 020f 	bic.w	r2, r2, #15
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f023 0303 	bic.w	r3, r3, #3
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
 800152e:	e00a      	b.n	8001546 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f023 0312 	bic.w	r3, r3, #18
 8001538:	f043 0210 	orr.w	r2, r3, #16
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001540:	2301      	movs	r3, #1
 8001542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800154a:	4618      	mov	r0, r3
 800154c:	3768      	adds	r7, #104	; 0x68
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000dc 	.word	0x200000dc
 8001558:	431bde83 	.word	0x431bde83
 800155c:	50000300 	.word	0x50000300
 8001560:	50000100 	.word	0x50000100
 8001564:	fff0c007 	.word	0xfff0c007

08001568 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001568:	b480      	push	{r7}
 800156a:	b09b      	sub	sp, #108	; 0x6c
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x22>
 8001586:	2302      	movs	r3, #2
 8001588:	e2a5      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x56e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 8289 	bne.w	8001ab4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d81c      	bhi.n	80015e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	461a      	mov	r2, r3
 80015be:	231f      	movs	r3, #31
 80015c0:	4093      	lsls	r3, r2
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4019      	ands	r1, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa00 f203 	lsl.w	r2, r0, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
 80015e2:	e063      	b.n	80016ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d81e      	bhi.n	800162a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	3b1e      	subs	r3, #30
 8001600:	221f      	movs	r2, #31
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	3b1e      	subs	r3, #30
 800161c:	fa00 f203 	lsl.w	r2, r0, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
 8001628:	e040      	b.n	80016ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b0e      	cmp	r3, #14
 8001630:	d81e      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	3b3c      	subs	r3, #60	; 0x3c
 8001646:	221f      	movs	r2, #31
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	4019      	ands	r1, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3b3c      	subs	r3, #60	; 0x3c
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
 800166e:	e01d      	b.n	80016ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3b5a      	subs	r3, #90	; 0x5a
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	4019      	ands	r1, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	3b5a      	subs	r3, #90	; 0x5a
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80e5 	bne.w	8001886 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b09      	cmp	r3, #9
 80016c2:	d91c      	bls.n	80016fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6999      	ldr	r1, [r3, #24]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	3b1e      	subs	r3, #30
 80016d6:	2207      	movs	r2, #7
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	4019      	ands	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6898      	ldr	r0, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	3b1e      	subs	r3, #30
 80016f0:	fa00 f203 	lsl.w	r2, r0, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	e019      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6959      	ldr	r1, [r3, #20]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	4019      	ands	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6898      	ldr	r0, [r3, #8]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	3b01      	subs	r3, #1
 8001750:	2b03      	cmp	r3, #3
 8001752:	d84f      	bhi.n	80017f4 <HAL_ADC_ConfigChannel+0x28c>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_ADC_ConfigChannel+0x1f4>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	0800176d 	.word	0x0800176d
 8001760:	0800178f 	.word	0x0800178f
 8001764:	080017b1 	.word	0x080017b1
 8001768:	080017d3 	.word	0x080017d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001772:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <HAL_ADC_ConfigChannel+0x484>)
 8001774:	4013      	ands	r3, r2
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	0691      	lsls	r1, r2, #26
 800177c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800177e:	430a      	orrs	r2, r1
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800178a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800178c:	e07e      	b.n	800188c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001794:	4b95      	ldr	r3, [pc, #596]	; (80019ec <HAL_ADC_ConfigChannel+0x484>)
 8001796:	4013      	ands	r3, r2
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	0691      	lsls	r1, r2, #26
 800179e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a0:	430a      	orrs	r2, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ae:	e06d      	b.n	800188c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <HAL_ADC_ConfigChannel+0x484>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	0691      	lsls	r1, r2, #26
 80017c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d0:	e05c      	b.n	800188c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017d8:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_ADC_ConfigChannel+0x484>)
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	0691      	lsls	r1, r2, #26
 80017e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e4:	430a      	orrs	r2, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f2:	e04b      	b.n	800188c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	069b      	lsls	r3, r3, #26
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001816:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800181e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	069b      	lsls	r3, r3, #26
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800183a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	069b      	lsls	r3, r3, #26
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	069b      	lsls	r3, r3, #26
 8001870:	429a      	cmp	r2, r3
 8001872:	d10a      	bne.n	800188a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001882:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001884:	e001      	b.n	800188a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001886:	bf00      	nop
 8001888:	e000      	b.n	800188c <HAL_ADC_ConfigChannel+0x324>
      break;
 800188a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d108      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x344>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x344>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_ADC_ConfigChannel+0x346>
 80018ac:	2300      	movs	r3, #0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 810b 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d00f      	beq.n	80018dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80018da:	e049      	b.n	8001970 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d91c      	bls.n	8001938 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6999      	ldr	r1, [r3, #24]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	3b1b      	subs	r3, #27
 8001910:	2207      	movs	r2, #7
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	4019      	ands	r1, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6898      	ldr	r0, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	3b1b      	subs	r3, #27
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	e01b      	b.n	8001970 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6959      	ldr	r1, [r3, #20]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_ADC_ConfigChannel+0x488>)
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b10      	cmp	r3, #16
 800197a:	d105      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800197c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800198c:	2b11      	cmp	r3, #17
 800198e:	d105      	bne.n	800199c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	f040 8092 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 808b 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019bc:	d102      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x45c>
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_ADC_ConfigChannel+0x48c>)
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e002      	b.n	80019ca <HAL_ADC_ConfigChannel+0x462>
 80019c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019c8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10f      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x490>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x490>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e007      	b.n	80019fa <HAL_ADC_ConfigChannel+0x492>
 80019ea:	bf00      	nop
 80019ec:	83fff000 	.word	0x83fff000
 80019f0:	50000300 	.word	0x50000300
 80019f4:	50000100 	.word	0x50000100
 80019f8:	2300      	movs	r3, #0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d150      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d107      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x4b8>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x4b8>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x4ba>
 8001a20:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d13c      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d11d      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x502>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a36:	d118      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a42:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_ADC_ConfigChannel+0x57c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_ADC_ConfigChannel+0x580>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9a      	lsrs	r2, r3, #18
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a5a:	e002      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a68:	e02e      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d10b      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x522>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7a:	d106      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a86:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a88:	e01e      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d11a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a9e:	e013      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ab2:	e00a      	b.n	8001aca <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	376c      	adds	r7, #108	; 0x6c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200000dc 	.word	0x200000dc
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b099      	sub	sp, #100	; 0x64
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b04:	d102      	bne.n	8001b0c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b06:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	e002      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001b0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0a2      	b.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e09b      	b.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d17f      	bne.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d179      	bne.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b4e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d040      	beq.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6a:	035b      	lsls	r3, r3, #13
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b72:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d15c      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001bb6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d14b      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bc4:	f023 030f 	bic.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	6811      	ldr	r1, [r2, #0]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	6892      	ldr	r2, [r2, #8]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bd6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd8:	e03c      	b.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001be4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d108      	bne.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001c06:	2300      	movs	r3, #0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d123      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c28:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d112      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c3e:	e009      	b.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c52:	e000      	b.n	8001c56 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c54:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c62:	4618      	mov	r0, r3
 8001c64:	3764      	adds	r7, #100	; 0x64
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	50000100 	.word	0x50000100
 8001c74:	50000300 	.word	0x50000300

08001c78 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <ADC_Disable+0x2c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <ADC_Disable+0x2c>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <ADC_Disable+0x2e>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030d 	and.w	r3, r3, #13
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10f      	bne.n	8001cd8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0202 	orr.w	r2, r2, #2
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff faac 	bl	800122c <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cd6:	e022      	b.n	8001d1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0210 	orr.w	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e01c      	b.n	8001d2e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cf4:	f7ff fa9a 	bl	800122c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d90d      	bls.n	8001d1e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d0e3      	beq.n	8001cf4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff4c 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eba:	f7ff ff61 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	6978      	ldr	r0, [r7, #20]
 8001ec6:	f7ff ffb1 	bl	8001e2c <NVIC_EncodePriority>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff80 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff54 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e037      	b.n	8001f82 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f2c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9c3 	bl	80022f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}  
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Start_IT+0x20>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e04a      	b.n	8002040 <HAL_DMA_Start_IT+0xb6>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d13a      	bne.n	8002032 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f957 	bl	8002294 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 020e 	orr.w	r2, r2, #14
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e00f      	b.n	8002020 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 020a 	orr.w	r2, r2, #10
 800200e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e005      	b.n	800203e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800203e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002056:	2b02      	cmp	r3, #2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e020      	b.n	80020ae <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020e 	bic.w	r2, r2, #14
 800207a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d005      	beq.n	80020dc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e027      	b.n	800212c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020e 	bic.w	r2, r2, #14
 80020ea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
    } 
  }
  return status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2204      	movs	r2, #4
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d024      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x72>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01f      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0204 	bic.w	r2, r2, #4
 8002184:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2104      	movs	r1, #4
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06a      	beq.n	8002274 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021a6:	e065      	b.n	8002274 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2202      	movs	r2, #2
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_IRQHandler+0xdc>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 020a 	bic.w	r2, r2, #10
 80021de:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	2102      	movs	r1, #2
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d035      	beq.n	8002274 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002210:	e030      	b.n	8002274 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2208      	movs	r2, #8
 8002218:	409a      	lsls	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d028      	beq.n	8002274 <HAL_DMA_IRQHandler+0x13e>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020e 	bic.w	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
    }
  }
}  
 8002272:	e7ff      	b.n	8002274 <HAL_DMA_IRQHandler+0x13e>
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <DMA_CalcBaseAndBitshift+0x34>)
 8002300:	4413      	add	r3, r2
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <DMA_CalcBaseAndBitshift+0x38>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <DMA_CalcBaseAndBitshift+0x3c>)
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	bffdfff8 	.word	0xbffdfff8
 8002328:	cccccccd 	.word	0xcccccccd
 800232c:	40020000 	.word	0x40020000

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e14e      	b.n	80025de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8140 	beq.w	80025d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d00b      	beq.n	8002378 <HAL_GPIO_Init+0x48>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d007      	beq.n	8002378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236c:	2b11      	cmp	r3, #17
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b12      	cmp	r3, #18
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0xea>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b12      	cmp	r3, #18
 8002418:	d123      	bne.n	8002462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 809a 	beq.w	80025d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a54      	ldr	r2, [pc, #336]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b52      	ldr	r3, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024bc:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_GPIO_Init+0x2d0>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e6:	d013      	beq.n	8002510 <HAL_GPIO_Init+0x1e0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a46      	ldr	r2, [pc, #280]	; (8002604 <HAL_GPIO_Init+0x2d4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00d      	beq.n	800250c <HAL_GPIO_Init+0x1dc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a45      	ldr	r2, [pc, #276]	; (8002608 <HAL_GPIO_Init+0x2d8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <HAL_GPIO_Init+0x1d8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a44      	ldr	r2, [pc, #272]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d101      	bne.n	8002504 <HAL_GPIO_Init+0x1d4>
 8002500:	2303      	movs	r3, #3
 8002502:	e006      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 8002504:	2305      	movs	r3, #5
 8002506:	e004      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 8002508:	2302      	movs	r3, #2
 800250a:	e002      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 8002510:	2300      	movs	r3, #0
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4093      	lsls	r3, r2
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002522:	4937      	ldr	r1, [pc, #220]	; (8002600 <HAL_GPIO_Init+0x2d0>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002554:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800257e:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025a8:	4a19      	ldr	r2, [pc, #100]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f aea9 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	48000400 	.word	0x48000400
 8002608:	48000800 	.word	0x48000800
 800260c:	48000c00 	.word	0x48000c00
 8002610:	40010400 	.word	0x40010400

08002614 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0ba      	b.n	800279c <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02e      	beq.n	80026c8 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_HRTIM_Init+0x190>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10b      	bne.n	800268c <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_HRTIM_Init+0x194>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a4b      	ldr	r2, [pc, #300]	; (80027a8 <HAL_HRTIM_Init+0x194>)
 800267a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_HRTIM_Init+0x194>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800269a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026b0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7fe fa29 	bl	8000b20 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e03e      	b.n	8002794 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002716:	7dfa      	ldrb	r2, [r7, #23]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3318      	adds	r3, #24
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800272a:	7dfa      	ldrb	r2, [r7, #23]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	331c      	adds	r3, #28
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800273e:	7dfa      	ldrb	r2, [r7, #23]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3320      	adds	r3, #32
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002752:	7dfa      	ldrb	r2, [r7, #23]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002766:	7dfa      	ldrb	r2, [r7, #23]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3328      	adds	r3, #40	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800277a:	7dfa      	ldrb	r2, [r7, #23]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3330      	adds	r3, #48	; 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	3301      	adds	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d9bd      	bls.n	8002716 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40017400 	.word	0x40017400
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d101      	bne.n	80027c8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	e015      	b.n	80027f4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d104      	bne.n	80027e0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fa19 	bl	8002c10 <HRTIM_MasterBase_Config>
 80027de:	e004      	b.n	80027ea <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fa42 	bl	8002c6e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_HRTIM_SimpleOCChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleOCChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t OCChannel,
                                                 HRTIM_SimpleOCChannelCfgTypeDef* pSimpleOCChannelCfg)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  uint32_t CompareUnit = (uint32_t)RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_HRTIM_BASICOCMODE(pSimpleOCChannelCfg->Mode));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimpleOCChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimpleOCChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimpleOCChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d101      	bne.n	800281e <HAL_HRTIM_SimpleOCChannelConfig+0x22>
  {
     return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	e0a9      	b.n	8002972 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer compare unit */
  switch (OCChannel)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d01d      	beq.n	8002868 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d80b      	bhi.n	8002848 <HAL_HRTIM_SimpleOCChannelConfig+0x4c>
 8002830:	2b02      	cmp	r3, #2
 8002832:	d025      	beq.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d802      	bhi.n	800283e <HAL_HRTIM_SimpleOCChannelConfig+0x42>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d015      	beq.n	8002868 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 800283c:	e02c      	b.n	8002898 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 800283e:	2b04      	cmp	r3, #4
 8002840:	d012      	beq.n	8002868 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d01c      	beq.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 8002846:	e027      	b.n	8002898 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d019      	beq.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d804      	bhi.n	800285a <HAL_HRTIM_SimpleOCChannelConfig+0x5e>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d015      	beq.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d007      	beq.n	8002868 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 8002858:	e01e      	b.n	8002898 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	d003      	beq.n	8002868 <HAL_HRTIM_SimpleOCChannelConfig+0x6c>
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d00c      	beq.n	8002880 <HAL_HRTIM_SimpleOCChannelConfig+0x84>
 8002866:	e017      	b.n	8002898 <HAL_HRTIM_SimpleOCChannelConfig+0x9c>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      CompareUnit = HRTIM_COMPAREUNIT_1;
 8002868:	2301      	movs	r3, #1
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimpleOCChannelCfg->Pulse;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	01db      	lsls	r3, r3, #7
 8002878:	440b      	add	r3, r1
 800287a:	339c      	adds	r3, #156	; 0x9c
 800287c:	601a      	str	r2, [r3, #0]
      break;
 800287e:	e014      	b.n	80028aa <HAL_HRTIM_SimpleOCChannelConfig+0xae>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      CompareUnit = HRTIM_COMPAREUNIT_2;
 8002880:	2302      	movs	r3, #2
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimpleOCChannelCfg->Pulse;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	01db      	lsls	r3, r3, #7
 8002890:	440b      	add	r3, r1
 8002892:	33a4      	adds	r3, #164	; 0xa4
 8002894:	601a      	str	r2, [r3, #0]
      break;
 8002896:	e008      	b.n	80028aa <HAL_HRTIM_SimpleOCChannelConfig+0xae>
    }
  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2207      	movs	r2, #7
 800289c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80028a8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b07      	cmp	r3, #7
 80028b4:	d101      	bne.n	80028ba <HAL_HRTIM_SimpleOCChannelConfig+0xbe>
  {
     return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e05b      	b.n	8002972 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimpleOCChannelCfg->Polarity & HRTIM_OUTR_POL1);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimpleOCChannelCfg->IdleLevel & HRTIM_OUTR_IDLES1);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30

  switch (pSimpleOCChannelCfg->Mode)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d019      	beq.n	800291a <HAL_HRTIM_SimpleOCChannelConfig+0x11e>
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d00c      	beq.n	8002904 <HAL_HRTIM_SimpleOCChannelConfig+0x108>
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d120      	bne.n	8002930 <HAL_HRTIM_SimpleOCChannelConfig+0x134>
  {
  case HRTIM_BASICOCMODE_TOGGLE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_HRTIM_SimpleOCChannelConfig+0xfe>
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80028f4:	2308      	movs	r3, #8
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	e001      	b.n	80028fe <HAL_HRTIM_SimpleOCChannelConfig+0x102>
      }
      else
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 80028fa:	2310      	movs	r3, #16
 80028fc:	61bb      	str	r3, [r7, #24]
      }
      OutputCfg.ResetSource = OutputCfg.SetSource;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	61fb      	str	r3, [r7, #28]
      break;
 8002902:	e022      	b.n	800294a <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  case HRTIM_BASICOCMODE_ACTIVE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_HRTIM_SimpleOCChannelConfig+0x114>
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 800290a:	2308      	movs	r3, #8
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e001      	b.n	8002914 <HAL_HRTIM_SimpleOCChannelConfig+0x118>
      }
      else
      {
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002910:	2310      	movs	r3, #16
 8002912:	61bb      	str	r3, [r7, #24]
      }
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
      break;
 8002918:	e017      	b.n	800294a <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  case HRTIM_BASICOCMODE_INACTIVE:
    {
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_HRTIM_SimpleOCChannelConfig+0x12a>
      {
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002920:	2308      	movs	r3, #8
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	e001      	b.n	800292a <HAL_HRTIM_SimpleOCChannelConfig+0x12e>
      }
      else
      {
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002926:	2310      	movs	r3, #16
 8002928:	61fb      	str	r3, [r7, #28]
      }
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
      break;
 800292e:	e00c      	b.n	800294a <HAL_HRTIM_SimpleOCChannelConfig+0x14e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2207      	movs	r2, #7
 8002934:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
      OutputCfg.SetSource   = HRTIM_OUTPUTSET_NONE;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002948:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b07      	cmp	r3, #7
 8002954:	d101      	bne.n	800295a <HAL_HRTIM_SimpleOCChannelConfig+0x15e>
  {
     return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00b      	b.n	8002972 <HAL_HRTIM_SimpleOCChannelConfig+0x176>
  }

  HRTIM_OutputConfig(hhrtim,
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb6a 	bl	800303c <HRTIM_OutputConfig>
                     TimerIdx,
                     OCChannel,
                     &OutputCfg);

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3738      	adds	r7, #56	; 0x38
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08e      	sub	sp, #56	; 0x38
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d101      	bne.n	8002998 <HAL_HRTIM_SimplePWMChannelConfig+0x1e>
  {
     return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
 8002996:	e094      	b.n	8002ac2 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_HRTIM_SimplePWMChannelConfig+0x2c>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e08d      	b.n	8002ac2 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer compare unit */
  switch (PWMChannel)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d01d      	beq.n	80029f8 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d80b      	bhi.n	80029d8 <HAL_HRTIM_SimplePWMChannelConfig+0x5e>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d025      	beq.n	8002a10 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d802      	bhi.n	80029ce <HAL_HRTIM_SimplePWMChannelConfig+0x54>
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d015      	beq.n	80029f8 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 80029cc:	e02c      	b.n	8002a28 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d012      	beq.n	80029f8 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d01c      	beq.n	8002a10 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 80029d6:	e027      	b.n	8002a28 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d019      	beq.n	8002a10 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d804      	bhi.n	80029ea <HAL_HRTIM_SimplePWMChannelConfig+0x70>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d015      	beq.n	8002a10 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d007      	beq.n	80029f8 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 80029e8:	e01e      	b.n	8002a28 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d003      	beq.n	80029f8 <HAL_HRTIM_SimplePWMChannelConfig+0x7e>
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d00c      	beq.n	8002a10 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
 80029f6:	e017      	b.n	8002a28 <HAL_HRTIM_SimplePWMChannelConfig+0xae>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	01db      	lsls	r3, r3, #7
 8002a04:	440b      	add	r3, r1
 8002a06:	339c      	adds	r3, #156	; 0x9c
 8002a08:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	61bb      	str	r3, [r7, #24]
      break;
 8002a0e:	e018      	b.n	8002a42 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	440b      	add	r3, r1
 8002a1e:	33a4      	adds	r3, #164	; 0xa4
 8002a20:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002a22:	2310      	movs	r3, #16
 8002a24:	61bb      	str	r3, [r7, #24]
      break;
 8002a26:	e00c      	b.n	8002a42 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
    }
  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
      OutputCfg.SetSource   = HRTIM_OUTPUTSET_NONE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002a40:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d101      	bne.n	8002a52 <HAL_HRTIM_SimplePWMChannelConfig+0xd8>
  {
     return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e037      	b.n	8002ac2 <HAL_HRTIM_SimplePWMChannelConfig+0x148>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002a72:	2300      	movs	r3, #0
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8002a76:	2304      	movs	r3, #4
 8002a78:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fada 	bl	800303c <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	01db      	lsls	r3, r3, #7
 8002a92:	4413      	add	r3, r2
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	01db      	lsls	r3, r3, #7
 8002aaa:	4413      	add	r3, r2
 8002aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aae:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3738      	adds	r7, #56	; 0x38
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e05f      	b.n	8002ba6 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e058      	b.n	8002ba6 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d104      	bne.n	8002b14 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8ee 	bl	8002cee <HRTIM_MasterWaveform_Config>
 8002b12:	e004      	b.n	8002b1e <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f94f 	bl	8002dbc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4403      	add	r3, r0
 8002b30:	3320      	adds	r3, #32
 8002b32:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4403      	add	r3, r0
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4403      	add	r3, r0
 8002b5c:	3328      	adds	r3, #40	; 0x28
 8002b5e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4403      	add	r3, r0
 8002b72:	332c      	adds	r3, #44	; 0x2c
 8002b74:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4403      	add	r3, r0
 8002b88:	3330      	adds	r3, #48	; 0x30
 8002b8a:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb0a 	bl	80031a8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d101      	bne.n	8002bcc <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e01d      	b.n	8002c08 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e016      	b.n	8002c08 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fa23 	bl	800303c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 0307 	bic.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0318 	bic.w	r3, r3, #24
 8002c3a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	01db      	lsls	r3, r3, #7
 8002c84:	4413      	add	r3, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 0318 	bic.w	r3, r3, #24
 8002ca2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	01db      	lsls	r3, r3, #7
 8002cb8:	4413      	add	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	01db      	lsls	r3, r3, #7
 8002cca:	440b      	add	r3, r1
 8002ccc:	3394      	adds	r3, #148	; 0x94
 8002cce:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	01db      	lsls	r3, r3, #7
 8002cdc:	440b      	add	r3, r1
 8002cde:	3398      	adds	r3, #152	; 0x98
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002d08:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f023 0320 	bic.w	r3, r3, #32
 8002d10:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d22:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d34:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d46:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002d58:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d6a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d7e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b08b      	sub	sp, #44	; 0x2c
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	01db      	lsls	r3, r3, #7
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	01db      	lsls	r3, r3, #7
 8002de4:	440b      	add	r3, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	01db      	lsls	r3, r3, #7
 8002df2:	4413      	add	r3, r2
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	01db      	lsls	r3, r3, #7
 8002e00:	4413      	add	r3, r2
 8002e02:	33e8      	adds	r3, #232	; 0xe8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	4413      	add	r3, r2
 8002e12:	33e4      	adds	r3, #228	; 0xe4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002e20:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f023 0320 	bic.w	r3, r3, #32
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4313      	orrs	r3, r2
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4313      	orrs	r3, r2
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	4313      	orrs	r3, r2
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	4313      	orrs	r3, r2
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9e:	d103      	bne.n	8002ea8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	4313      	orrs	r3, r2
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f023 031f 	bic.w	r3, r3, #31
 8002ee4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002efa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	6a3a      	ldr	r2, [r7, #32]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002f28:	d004      	beq.n	8002f34 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8002f32:	d103      	bne.n	8002f3c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d108      	bne.n	8002f4e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8002f42:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d843      	bhi.n	8002fe2 <HRTIM_TimingUnitWaveform_Config+0x226>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f75 	.word	0x08002f75
 8002f64:	08002f8b 	.word	0x08002f8b
 8002f68:	08002fa1 	.word	0x08002fa1
 8002f6c:	08002fb7 	.word	0x08002fb7
 8002f70:	08002fcd 	.word	0x08002fcd
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f7a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]
      break;
 8002f88:	e02c      	b.n	8002fe4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61fb      	str	r3, [r7, #28]
      break;
 8002f9e:	e021      	b.n	8002fe4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fa6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
      break;
 8002fb4:	e016      	b.n	8002fe4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002fbc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]
      break;
 8002fca:	e00b      	b.n	8002fe4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	015b      	lsls	r3, r3, #5
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
      break;
 8002fe0:	e000      	b.n	8002fe4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002fe2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3301      	adds	r3, #1
 8002fec:	01db      	lsls	r3, r3, #7
 8002fee:	4413      	add	r3, r2
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	4413      	add	r3, r2
 8002ffe:	33e8      	adds	r3, #232	; 0xe8
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	4413      	add	r3, r2
 800300e:	33e4      	adds	r3, #228	; 0xe4
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	01db      	lsls	r3, r3, #7
 800301c:	4413      	add	r3, r2
 800301e:	33d4      	adds	r3, #212	; 0xd4
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800302e:	bf00      	nop
 8003030:	372c      	adds	r7, #44	; 0x2c
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	4413      	add	r3, r2
 8003058:	33e4      	adds	r3, #228	; 0xe4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	33b8      	adds	r3, #184	; 0xb8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d01d      	beq.n	80030b0 <HRTIM_OutputConfig+0x74>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d80b      	bhi.n	8003090 <HRTIM_OutputConfig+0x54>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d02c      	beq.n	80030d6 <HRTIM_OutputConfig+0x9a>
 800307c:	2b02      	cmp	r3, #2
 800307e:	d802      	bhi.n	8003086 <HRTIM_OutputConfig+0x4a>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d015      	beq.n	80030b0 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 8003084:	e03c      	b.n	8003100 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003086:	2b04      	cmp	r3, #4
 8003088:	d012      	beq.n	80030b0 <HRTIM_OutputConfig+0x74>
 800308a:	2b08      	cmp	r3, #8
 800308c:	d023      	beq.n	80030d6 <HRTIM_OutputConfig+0x9a>
    break;
 800308e:	e037      	b.n	8003100 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d020      	beq.n	80030d6 <HRTIM_OutputConfig+0x9a>
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d804      	bhi.n	80030a2 <HRTIM_OutputConfig+0x66>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d01c      	beq.n	80030d6 <HRTIM_OutputConfig+0x9a>
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d007      	beq.n	80030b0 <HRTIM_OutputConfig+0x74>
    break;
 80030a0:	e02e      	b.n	8003100 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a6:	d003      	beq.n	80030b0 <HRTIM_OutputConfig+0x74>
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ac:	d013      	beq.n	80030d6 <HRTIM_OutputConfig+0x9a>
    break;
 80030ae:	e027      	b.n	8003100 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	01db      	lsls	r3, r3, #7
 80030bc:	440b      	add	r3, r1
 80030be:	33bc      	adds	r3, #188	; 0xbc
 80030c0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	01db      	lsls	r3, r3, #7
 80030ce:	440b      	add	r3, r1
 80030d0:	33c0      	adds	r3, #192	; 0xc0
 80030d2:	601a      	str	r2, [r3, #0]
      break;
 80030d4:	e014      	b.n	8003100 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	01db      	lsls	r3, r3, #7
 80030e2:	440b      	add	r3, r1
 80030e4:	33c4      	adds	r3, #196	; 0xc4
 80030e6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	01db      	lsls	r3, r3, #7
 80030f4:	440b      	add	r3, r1
 80030f6:	33c8      	adds	r3, #200	; 0xc8
 80030f8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80030fa:	2310      	movs	r3, #16
 80030fc:	61bb      	str	r3, [r7, #24]
      break;
 80030fe:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003100:	22fe      	movs	r2, #254	; 0xfe
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003108:	43db      	mvns	r3, r3
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d111      	bne.n	800318c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	4313      	orrs	r3, r2
 800318a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4413      	add	r3, r2
 8003196:	33e4      	adds	r3, #228	; 0xe4
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	601a      	str	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	3724      	adds	r7, #36	; 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d851      	bhi.n	800325c <HRTIM_ForceRegistersUpdate+0xb4>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HRTIM_ForceRegistersUpdate+0x18>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031ef 	.word	0x080031ef
 80031c4:	08003205 	.word	0x08003205
 80031c8:	0800321b 	.word	0x0800321b
 80031cc:	08003231 	.word	0x08003231
 80031d0:	08003247 	.word	0x08003247
 80031d4:	080031d9 	.word	0x080031d9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80031ec:	e037      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0202 	orr.w	r2, r2, #2
 80031fe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003202:	e02c      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0204 	orr.w	r2, r2, #4
 8003214:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003218:	e021      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800322e:	e016      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0210 	orr.w	r2, r2, #16
 8003240:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003244:	e00b      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0220 	orr.w	r2, r2, #32
 8003256:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800325a:	e000      	b.n	800325e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800325c:	bf00      	nop
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003272:	af00      	add	r7, sp, #0
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f000 bef4 	b.w	800406e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 816a 	beq.w	800356a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003296:	4bb3      	ldr	r3, [pc, #716]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d00c      	beq.n	80032bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a2:	4bb0      	ldr	r3, [pc, #704]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d159      	bne.n	8003362 <HAL_RCC_OscConfig+0xf6>
 80032ae:	4bad      	ldr	r3, [pc, #692]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d152      	bne.n	8003362 <HAL_RCC_OscConfig+0xf6>
 80032bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_OscConfig+0x82>
 80032e8:	4b9e      	ldr	r3, [pc, #632]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0xae>
 80032ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003306:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800330a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003316:	4b93      	ldr	r3, [pc, #588]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800331e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003322:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003326:	fa92 f2a2 	rbit	r2, r2
 800332a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800332e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 810c 	beq.w	8003568 <HAL_RCC_OscConfig+0x2fc>
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8106 	bne.w	8003568 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f000 be86 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x110>
 800336e:	4b7d      	ldr	r3, [pc, #500]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7c      	ldr	r2, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e030      	b.n	80033de <HAL_RCC_OscConfig+0x172>
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x134>
 8003386:	4b77      	ldr	r3, [pc, #476]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a76      	ldr	r2, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b74      	ldr	r3, [pc, #464]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01e      	b.n	80033de <HAL_RCC_OscConfig+0x172>
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0x15a>
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6c      	ldr	r2, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0x172>
 80033c6:	4b67      	ldr	r3, [pc, #412]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a66      	ldr	r2, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033de:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	495d      	ldr	r1, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d059      	beq.n	80034b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd ff16 	bl	800122c <HAL_GetTick>
 8003400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003406:	f7fd ff11 	bl	800122c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d902      	bls.n	800341c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	f000 be29 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
 800341c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003420:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003430:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0x1e2>
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x20e>
 800344e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003452:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003466:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800346a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003482:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800348e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ab      	beq.n	8003406 <HAL_RCC_OscConfig+0x19a>
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd febc 	bl	800122c <HAL_GetTick>
 80034b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ba:	f7fd feb7 	bl	800122c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d902      	bls.n	80034d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	f000 bdcf 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
 80034d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80034e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0x296>
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x2c2>
 8003502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003506:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800351e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HAL_RCC_OscConfig+0x2f8>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003532:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003536:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800353a:	fa92 f2a2 	rbit	r2, r2
 800353e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003542:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ab      	bne.n	80034ba <HAL_RCC_OscConfig+0x24e>
 8003562:	e002      	b.n	800356a <HAL_RCC_OscConfig+0x2fe>
 8003564:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 816f 	beq.w	8003858 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800357a:	4bd0      	ldr	r3, [pc, #832]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003586:	4bcd      	ldr	r3, [pc, #820]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	d16c      	bne.n	800366c <HAL_RCC_OscConfig+0x400>
 8003592:	4bca      	ldr	r3, [pc, #808]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d166      	bne.n	800366c <HAL_RCC_OscConfig+0x400>
 800359e:	2302      	movs	r3, #2
 80035a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_OscConfig+0x362>
 80035c8:	4bbc      	ldr	r3, [pc, #752]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	e013      	b.n	80035f6 <HAL_RCC_OscConfig+0x38a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035e0:	2302      	movs	r3, #2
 80035e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035f2:	4bb2      	ldr	r3, [pc, #712]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2202      	movs	r2, #2
 80035f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003608:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0220 	orr.w	r2, r2, #32
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_RCC_OscConfig+0x3cc>
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d002      	beq.n	8003638 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f000 bd1b 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4ba0      	ldr	r3, [pc, #640]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	21f8      	movs	r1, #248	; 0xf8
 8003648:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003650:	fa91 f1a1 	rbit	r1, r1
 8003654:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003658:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800365c:	fab1 f181 	clz	r1, r1
 8003660:	b2c9      	uxtb	r1, r1
 8003662:	408b      	lsls	r3, r1
 8003664:	4995      	ldr	r1, [pc, #596]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	e0f5      	b.n	8003858 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8085 	beq.w	8003782 <HAL_RCC_OscConfig+0x516>
 8003678:	2301      	movs	r3, #1
 800367a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800368a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003698:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	461a      	mov	r2, r3
 80036a0:	2301      	movs	r3, #1
 80036a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fd fdc2 	bl	800122c <HAL_GetTick>
 80036a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd fdbd 	bl	800122c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	f000 bcd5 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80036d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_RCC_OscConfig+0x488>
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e013      	b.n	800371c <HAL_RCC_OscConfig+0x4b0>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800370c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2202      	movs	r2, #2
 800371e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003722:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003726:	fa92 f2a2 	rbit	r2, r2
 800372a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800372e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0af      	beq.n	80036ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	21f8      	movs	r1, #248	; 0xf8
 800375e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003766:	fa91 f1a1 	rbit	r1, r1
 800376a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800376e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003772:	fab1 f181 	clz	r1, r1
 8003776:	b2c9      	uxtb	r1, r1
 8003778:	408b      	lsls	r3, r1
 800377a:	4950      	ldr	r1, [pc, #320]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e06a      	b.n	8003858 <HAL_RCC_OscConfig+0x5ec>
 8003782:	2301      	movs	r3, #1
 8003784:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fd3d 	bl	800122c <HAL_GetTick>
 80037b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd fd38 	bl	800122c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	f000 bc50 	b.w	800406e <HAL_RCC_OscConfig+0xe02>
 80037ce:	2302      	movs	r3, #2
 80037d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0x592>
 80037f8:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	e013      	b.n	8003826 <HAL_RCC_OscConfig+0x5ba>
 80037fe:	2302      	movs	r3, #2
 8003800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003810:	2302      	movs	r3, #2
 8003812:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003816:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x650>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2202      	movs	r2, #2
 8003828:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800382c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003830:	fa92 f2a2 	rbit	r2, r2
 8003834:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003838:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f042 0220 	orr.w	r2, r2, #32
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f002 021f 	and.w	r2, r2, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1af      	bne.n	80037b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80da 	beq.w	8003a1c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d069      	beq.n	8003946 <HAL_RCC_OscConfig+0x6da>
 8003872:	2301      	movs	r3, #1
 8003874:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_OscConfig+0x654>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2301      	movs	r3, #1
 800389a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fcc6 	bl	800122c <HAL_GetTick>
 80038a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	e00e      	b.n	80038c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fd fcc1 	bl	800122c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d906      	bls.n	80038c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e3d9      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	10908120 	.word	0x10908120
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038f2:	2202      	movs	r2, #2
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003904:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4ba5      	ldr	r3, [pc, #660]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800390e:	2102      	movs	r1, #2
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f1a3 	rbit	r1, r3
 800391c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003920:	6019      	str	r1, [r3, #0]
  return result;
 8003922:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0b0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x63a>
 8003944:	e06a      	b.n	8003a1c <HAL_RCC_OscConfig+0x7b0>
 8003946:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800395c:	601a      	str	r2, [r3, #0]
  return result;
 800395e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003962:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	4b8c      	ldr	r3, [pc, #560]	; (8003ba0 <HAL_RCC_OscConfig+0x934>)
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7fd fc58 	bl	800122c <HAL_GetTick>
 800397c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	e009      	b.n	8003996 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003982:	f7fd fc53 	bl	800122c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e36b      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003996:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800399a:	2202      	movs	r2, #2
 800399c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039b2:	2202      	movs	r2, #2
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	fa93 f2a3 	rbit	r2, r3
 80039c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039de:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 80039e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039e6:	2102      	movs	r1, #2
 80039e8:	6019      	str	r1, [r3, #0]
 80039ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	fa93 f1a3 	rbit	r1, r3
 80039f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039f8:	6019      	str	r1, [r3, #0]
  return result;
 80039fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1b2      	bne.n	8003982 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8158 	beq.w	8003cdc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b5a      	ldr	r3, [pc, #360]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d112      	bne.n	8003a64 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b57      	ldr	r3, [pc, #348]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4a56      	ldr	r2, [pc, #344]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	61d3      	str	r3, [r2, #28]
 8003a4a:	4b54      	ldr	r3, [pc, #336]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <HAL_RCC_OscConfig+0x938>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11a      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_RCC_OscConfig+0x938>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a4b      	ldr	r2, [pc, #300]	; (8003ba4 <HAL_RCC_OscConfig+0x938>)
 8003a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7c:	f7fd fbd6 	bl	800122c <HAL_GetTick>
 8003a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fd fbd1 	bl	800122c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e2e9      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_RCC_OscConfig+0x938>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ef      	beq.n	8003a86 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x852>
 8003ab0:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a39      	ldr	r2, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6213      	str	r3, [r2, #32]
 8003abc:	e02f      	b.n	8003b1e <HAL_RCC_OscConfig+0x8b2>
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x876>
 8003ac8:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a33      	ldr	r2, [pc, #204]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	e01d      	b.n	8003b1e <HAL_RCC_OscConfig+0x8b2>
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x89a>
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a27      	ldr	r2, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0x8b2>
 8003b06:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6213      	str	r3, [r2, #32]
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d06b      	beq.n	8003c00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b28:	f7fd fb80 	bl	800122c <HAL_GetTick>
 8003b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	e00b      	b.n	8003b4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd fb7b 	bl	800122c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e291      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003b4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b4e:	2202      	movs	r2, #2
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa93 f2a3 	rbit	r2, r3
 8003b74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b78:	601a      	str	r2, [r3, #0]
  return result;
 8003b7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x93c>
 8003b94:	4b01      	ldr	r3, [pc, #4]	; (8003b9c <HAL_RCC_OscConfig+0x930>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	e014      	b.n	8003bc4 <HAL_RCC_OscConfig+0x958>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	10908120 	.word	0x10908120
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bac:	2202      	movs	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	4bbb      	ldr	r3, [pc, #748]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bc8:	2102      	movs	r1, #2
 8003bca:	6011      	str	r1, [r2, #0]
 8003bcc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	fa92 f1a2 	rbit	r1, r2
 8003bd6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003bda:	6011      	str	r1, [r2, #0]
  return result;
 8003bdc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	fab2 f282 	clz	r2, r2
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f002 021f 	and.w	r2, r2, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d099      	beq.n	8003b32 <HAL_RCC_OscConfig+0x8c6>
 8003bfe:	e063      	b.n	8003cc8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fd fb14 	bl	800122c <HAL_GetTick>
 8003c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd fb0f 	bl	800122c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e225      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003c22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c50:	601a      	str	r2, [r3, #0]
  return result;
 8003c52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d102      	bne.n	8003c72 <HAL_RCC_OscConfig+0xa06>
 8003c6c:	4b90      	ldr	r3, [pc, #576]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	e00d      	b.n	8003c8e <HAL_RCC_OscConfig+0xa22>
 8003c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c76:	2202      	movs	r2, #2
 8003c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4b89      	ldr	r3, [pc, #548]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c92:	2102      	movs	r1, #2
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	fa92 f1a2 	rbit	r1, r2
 8003ca0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ca4:	6011      	str	r1, [r2, #0]
  return result;
 8003ca6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	fab2 f282 	clz	r2, r2
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f002 021f 	and.w	r2, r2, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1a0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b77      	ldr	r3, [pc, #476]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4a76      	ldr	r2, [pc, #472]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 81c2 	beq.w	800406c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce8:	4b71      	ldr	r3, [pc, #452]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	f000 819c 	beq.w	800402e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	f040 8114 	bne.w	8003f2a <HAL_RCC_OscConfig+0xcbe>
 8003d02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d1a:	601a      	str	r2, [r3, #0]
  return result;
 8003d1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fd fa78 	bl	800122c <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd fa73 	bl	800122c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e18b      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003d56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	fa93 f2a3 	rbit	r2, r3
 8003d6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d6e:	601a      	str	r2, [r3, #0]
  return result;
 8003d70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0xb24>
 8003d8a:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e01b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb5c>
 8003d90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	fa92 f1a2 	rbit	r1, r2
 8003ddc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003de0:	6011      	str	r1, [r2, #0]
  return result;
 8003de2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d19e      	bne.n	8003d42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	4925      	ldr	r1, [pc, #148]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fa93 f2a3 	rbit	r2, r3
 8003e34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e38:	601a      	str	r2, [r3, #0]
  return result;
 8003e3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	461a      	mov	r2, r3
 8003e52:	2301      	movs	r3, #1
 8003e54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fd f9e9 	bl	800122c <HAL_GetTick>
 8003e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	e009      	b.n	8003e74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd f9e4 	bl	800122c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0fc      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e8c:	601a      	str	r2, [r3, #0]
  return result;
 8003e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xc48>
 8003ea8:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <HAL_RCC_OscConfig+0xc44>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	e01e      	b.n	8003eec <HAL_RCC_OscConfig+0xc80>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f2a3 	rbit	r2, r3
 8003ec8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	fa93 f2a3 	rbit	r2, r3
 8003ee2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0xe0c>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ef0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ef4:	6011      	str	r1, [r2, #0]
 8003ef6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	fa92 f1a2 	rbit	r1, r2
 8003f00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f04:	6011      	str	r1, [r2, #0]
  return result;
 8003f06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	fab2 f282 	clz	r2, r2
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f002 021f 	and.w	r2, r2, #31
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d09b      	beq.n	8003e60 <HAL_RCC_OscConfig+0xbf4>
 8003f28:	e0a0      	b.n	800406c <HAL_RCC_OscConfig+0xe00>
 8003f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f42:	601a      	str	r2, [r3, #0]
  return result;
 8003f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd f964 	bl	800122c <HAL_GetTick>
 8003f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	e009      	b.n	8003f7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd f95f 	bl	800122c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e077      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
 8003f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f96:	601a      	str	r2, [r3, #0]
  return result;
 8003f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xd4c>
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCC_OscConfig+0xe0c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e01b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd84>
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f107 0320 	add.w	r3, r7, #32
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	fa93 f2a3 	rbit	r2, r3
 8003fcc:	f107 031c 	add.w	r3, r7, #28
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f107 0318 	add.w	r3, r7, #24
 8003fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f107 0318 	add.w	r3, r7, #24
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f2a3 	rbit	r2, r3
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0xe0c>)
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f107 0210 	add.w	r2, r7, #16
 8003ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ff8:	6011      	str	r1, [r2, #0]
 8003ffa:	f107 0210 	add.w	r2, r7, #16
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	fa92 f1a2 	rbit	r1, r2
 8004004:	f107 020c 	add.w	r2, r7, #12
 8004008:	6011      	str	r1, [r2, #0]
  return result;
 800400a:	f107 020c 	add.w	r2, r7, #12
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f042 0220 	orr.w	r2, r2, #32
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f002 021f 	and.w	r2, r2, #31
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d19e      	bne.n	8003f6a <HAL_RCC_OscConfig+0xcfe>
 800402c:	e01e      	b.n	800406c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e018      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RCC_OscConfig+0xe0c>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004044:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004048:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	429a      	cmp	r2, r3
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004056:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800405a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000

0800407c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b09e      	sub	sp, #120	; 0x78
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e162      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	498b      	ldr	r1, [pc, #556]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e14a      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	497f      	ldr	r1, [pc, #508]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80dc 	beq.w	80042a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d13c      	bne.n	8004172 <HAL_RCC_ClockConfig+0xf6>
 80040f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_ClockConfig+0xa6>
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e00f      	b.n	8004142 <HAL_RCC_ClockConfig+0xc6>
 8004122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	667b      	str	r3, [r7, #100]	; 0x64
 8004130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004134:	663b      	str	r3, [r7, #96]	; 0x60
 8004136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004146:	65ba      	str	r2, [r7, #88]	; 0x58
 8004148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004152:	fab2 f282 	clz	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f002 021f 	and.w	r2, r2, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d17b      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0f3      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d13c      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x178>
 800417a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x128>
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_ClockConfig+0x148>
 80041a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	647b      	str	r3, [r7, #68]	; 0x44
 80041b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13a      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b2      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80041f4:	2302      	movs	r3, #2
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_RCC_ClockConfig+0x1a0>
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e00d      	b.n	8004238 <HAL_RCC_ClockConfig+0x1bc>
 800421c:	2302      	movs	r3, #2
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2202      	movs	r2, #2
 800423a:	61ba      	str	r2, [r7, #24]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	617a      	str	r2, [r7, #20]
  return result;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e079      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	491a      	ldr	r1, [pc, #104]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fc ffd8 	bl	800122c <HAL_GetTick>
 800427c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fc ffd4 	bl	800122c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e061      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d214      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 0207 	bic.w	r2, r3, #7
 80042be:	4906      	ldr	r1, [pc, #24]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e040      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	491a      	ldr	r1, [pc, #104]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4912      	ldr	r1, [pc, #72]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800431e:	f000 f829 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004322:	4601      	mov	r1, r0
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432c:	22f0      	movs	r2, #240	; 0xf0
 800432e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	60fa      	str	r2, [r7, #12]
  return result;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fab2 f282 	clz	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	40d3      	lsrs	r3, r2
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x2ec>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	fa21 f303 	lsr.w	r3, r1, r3
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <HAL_RCC_ClockConfig+0x2f0>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_RCC_ClockConfig+0x2f4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc fd84 	bl	8000e60 <HAL_InitTick>
  
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3778      	adds	r7, #120	; 0x78
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	08009708 	.word	0x08009708
 800436c:	200000dc 	.word	0x200000dc
 8004370:	200000e0 	.word	0x200000e0

08004374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b08b      	sub	sp, #44	; 0x2c
 8004378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x30>
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x36>
 80043a2:	e03c      	b.n	800441e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043a6:	623b      	str	r3, [r7, #32]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	fa92 f2a2 	rbit	r2, r2
 80043bc:	607a      	str	r2, [r7, #4]
  return result;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	fab2 f282 	clz	r2, r2
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	40d3      	lsrs	r3, r2
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_RCC_GetSysClockFreq+0xc8>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	220f      	movs	r2, #15
 80043d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	fa92 f2a2 	rbit	r2, r2
 80043e0:	60fa      	str	r2, [r7, #12]
  return result;
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	40d3      	lsrs	r3, r2
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e004      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	623b      	str	r3, [r7, #32]
      break;
 800441c:	e002      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004420:	623b      	str	r3, [r7, #32]
      break;
 8004422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004424:	6a3b      	ldr	r3, [r7, #32]
}
 8004426:	4618      	mov	r0, r3
 8004428:	372c      	adds	r7, #44	; 0x2c
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	007a1200 	.word	0x007a1200
 800443c:	08009720 	.word	0x08009720
 8004440:	08009730 	.word	0x08009730
 8004444:	003d0900 	.word	0x003d0900

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200000dc 	.word	0x200000dc

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004466:	f7ff ffef 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 800446a:	4601      	mov	r1, r0
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	603a      	str	r2, [r7, #0]
  return result;
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	fab2 f282 	clz	r2, r2
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	40d3      	lsrs	r3, r2
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08009718 	.word	0x08009718

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044aa:	f7ff ffcd 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 80044ae:	4601      	mov	r1, r0
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	fa92 f2a2 	rbit	r2, r2
 80044c4:	603a      	str	r2, [r7, #0]
  return result;
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	fab2 f282 	clz	r2, r2
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	40d3      	lsrs	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08009718 	.word	0x08009718

080044e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	220f      	movs	r2, #15
 80044f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_GetClockConfig+0x5c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0203 	and.w	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCC_GetClockConfig+0x5c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_GetClockConfig+0x5c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <HAL_RCC_GetClockConfig+0x60>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	40022000 	.word	0x40022000

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b092      	sub	sp, #72	; 0x48
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80d0 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004570:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10e      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457c:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4a8a      	ldr	r2, [pc, #552]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004586:	61d3      	str	r3, [r2, #28]
 8004588:	4b88      	ldr	r3, [pc, #544]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a81      	ldr	r2, [pc, #516]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b2:	f7fc fe3b 	bl	800122c <HAL_GetTick>
 80045b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fc fe37 	bl	800122c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b64      	cmp	r3, #100	; 0x64
 80045c6:	d901      	bls.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0ea      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d8:	4b74      	ldr	r3, [pc, #464]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d07d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d076      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f6:	4b6d      	ldr	r3, [pc, #436]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	461a      	mov	r2, r3
 8004620:	2301      	movs	r3, #1
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004648:	4a58      	ldr	r2, [pc, #352]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d045      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fc fde8 	bl	800122c <HAL_GetTick>
 800465c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fc fde4 	bl	800122c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e095      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004676:	2302      	movs	r3, #2
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	2302      	movs	r3, #2
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	61fb      	str	r3, [r7, #28]
  return result;
 800468e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	fab3 f383 	clz	r3, r3
 8004694:	b2db      	uxtb	r3, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d102      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	e007      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80046aa:	2302      	movs	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	4b3d      	ldr	r3, [pc, #244]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2202      	movs	r2, #2
 80046bc:	613a      	str	r2, [r7, #16]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	fa92 f2a2 	rbit	r2, r2
 80046c4:	60fa      	str	r2, [r7, #12]
  return result;
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f002 021f 	and.w	r2, r2, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f202 	lsl.w	r2, r1, r2
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0bd      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	492e      	ldr	r1, [pc, #184]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	4922      	ldr	r1, [pc, #136]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004724:	4313      	orrs	r3, r2
 8004726:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f023 0210 	bic.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	491a      	ldr	r1, [pc, #104]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	4313      	orrs	r3, r2
 8004744:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	4913      	ldr	r1, [pc, #76]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	4313      	orrs	r3, r2
 8004762:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	490b      	ldr	r1, [pc, #44]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	4313      	orrs	r3, r2
 8004780:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4904      	ldr	r1, [pc, #16]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479c:	4313      	orrs	r3, r2
 800479e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3748      	adds	r7, #72	; 0x48
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40007000 	.word	0x40007000
 80047b4:	10908100 	.word	0x10908100

080047b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f815 	bl	800480e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 f986 	bl	8004b08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_TIM_Base_Start_IT+0x50>)
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b06      	cmp	r3, #6
 800484c:	d00b      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x42>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d007      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	00010007 	.word	0x00010007

08004878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0202 	mvn.w	r2, #2
 80048a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f905 	bl	8004aca <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8f7 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f908 	bl	8004ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0204 	mvn.w	r2, #4
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8db 	bl	8004aca <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8cd 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8de 	bl	8004ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b08      	cmp	r3, #8
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0208 	mvn.w	r2, #8
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8b1 	bl	8004aca <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8a3 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8b4 	bl	8004ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0210 	mvn.w	r2, #16
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2208      	movs	r2, #8
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f887 	bl	8004aca <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f879 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f88a 	bl	8004ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10e      	bne.n	80049fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc f9de 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8f2 	bl	8004c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d10e      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8e5 	bl	8004c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d10e      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f838 	bl	8004af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0220 	mvn.w	r2, #32
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8a5 	bl	8004bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <TIM_Base_SetConfig+0xdc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x28>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x28>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <TIM_Base_SetConfig+0xe0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <TIM_Base_SetConfig+0xdc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <TIM_Base_SetConfig+0x6a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d00f      	beq.n	8004b72 <TIM_Base_SetConfig+0x6a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <TIM_Base_SetConfig+0xe0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_Base_SetConfig+0x6a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a23      	ldr	r2, [pc, #140]	; (8004bec <TIM_Base_SetConfig+0xe4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_Base_SetConfig+0x6a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <TIM_Base_SetConfig+0xe8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_Base_SetConfig+0x6a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <TIM_Base_SetConfig+0xec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d108      	bne.n	8004b84 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <TIM_Base_SetConfig+0xdc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_Base_SetConfig+0xc0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <TIM_Base_SetConfig+0xe4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_Base_SetConfig+0xc0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <TIM_Base_SetConfig+0xe8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0xc0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0xec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e040      	b.n	8004cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc f9f4 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb96 	bl	80053a4 <UART_SetConfig>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e022      	b.n	8004cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fd0c 	bl	80056a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fd93 	bl	80057ec <UART_CheckIdleState>
 8004cc6:	4603      	mov	r3, r0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d164      	bne.n	8004db0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit_DMA+0x22>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e05d      	b.n	8004db2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Transmit_DMA+0x34>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e056      	b.n	8004db2 <HAL_UART_Transmit_DMA+0xe2>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02a      	beq.n	8004d8c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3a:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_UART_Transmit_DMA+0xec>)
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d42:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <HAL_UART_Transmit_DMA+0xf0>)
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	4619      	mov	r1, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3328      	adds	r3, #40	; 0x28
 8004d66:	461a      	mov	r2, r3
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	f7fd f90e 	bl	8001f8a <HAL_DMA_Start_IT>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2210      	movs	r2, #16
 8004d78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e012      	b.n	8004db2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004daa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	080059d7 	.word	0x080059d7
 8004dc0:	08005a25 	.word	0x08005a25
 8004dc4:	08005abf 	.word	0x08005abf

08004dc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d16c      	bne.n	8004eb8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_UART_Receive_DMA+0x22>
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e065      	b.n	8004eba <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Receive_DMA+0x34>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e05e      	b.n	8004eba <HAL_UART_Receive_DMA+0xf2>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2222      	movs	r2, #34	; 0x22
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d02a      	beq.n	8004e7c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2a:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <HAL_UART_Receive_DMA+0xfc>)
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	4a25      	ldr	r2, [pc, #148]	; (8004ec8 <HAL_UART_Receive_DMA+0x100>)
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3a:	4a24      	ldr	r2, [pc, #144]	; (8004ecc <HAL_UART_Receive_DMA+0x104>)
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e42:	2200      	movs	r2, #0
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3324      	adds	r3, #36	; 0x24
 8004e50:	4619      	mov	r1, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	461a      	mov	r2, r3
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	f7fd f896 	bl	8001f8a <HAL_DMA_Start_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2210      	movs	r2, #16
 8004e68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e01e      	b.n	8004eba <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	08005a41 	.word	0x08005a41
 8004ec8:	08005aa3 	.word	0x08005aa3
 8004ecc:	08005abf 	.word	0x08005abf

08004ed0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004ee6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d124      	bne.n	8004f50 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f14:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f22:	2200      	movs	r2, #0
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd f88c 	bl	8002048 <HAL_DMA_Abort>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd f99e 	bl	800227c <HAL_DMA_GetError>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d104      	bne.n	8004f50 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2210      	movs	r2, #16
 8004f4a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e049      	b.n	8004fe4 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d124      	bne.n	8004fa8 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fd f860 	bl	8002048 <HAL_DMA_Abort>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd f972 	bl	800227c <HAL_DMA_GetError>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d104      	bne.n	8004fa8 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2210      	movs	r2, #16
 8004fa2:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e01d      	b.n	8004fe4 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005002:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d139      	bne.n	8005096 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d013      	beq.n	8005062 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <HAL_UART_AbortReceive_IT+0xd8>)
 8005040:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	4618      	mov	r0, r3
 8005048:	f7fd f837 	bl	80020ba <HAL_DMA_Abort_IT>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d032      	beq.n	80050b8 <HAL_UART_AbortReceive_IT+0xcc>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800505c:	4610      	mov	r0, r2
 800505e:	4798      	blx	r3
 8005060:	e02a      	b.n	80050b8 <HAL_UART_AbortReceive_IT+0xcc>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	220f      	movs	r2, #15
 8005076:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f97e 	bl	8005390 <HAL_UART_AbortReceiveCpltCallback>
 8005094:	e010      	b.n	80050b8 <HAL_UART_AbortReceive_IT+0xcc>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	220f      	movs	r2, #15
 80050aa:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f96c 	bl	8005390 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	08005b63 	.word	0x08005b63

080050c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d113      	bne.n	8005120 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00e      	beq.n	8005120 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8114 	beq.w	800533e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
      }
      return;
 800511e:	e10e      	b.n	800533e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80d6 	beq.w	80052d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80cb 	beq.w	80052d4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <HAL_UART_IRQHandler+0x9e>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <HAL_UART_IRQHandler+0xc6>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2202      	movs	r2, #2
 8005180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00e      	beq.n	80051b6 <HAL_UART_IRQHandler+0xee>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2204      	movs	r2, #4
 80051a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ae:	f043 0202 	orr.w	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e0:	f043 0208 	orr.w	r2, r3, #8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <HAL_UART_IRQHandler+0x14a>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8093 	beq.w	8005342 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005244:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d004      	beq.n	800525e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800525a:	2b00      	cmp	r3, #0
 800525c:	d031      	beq.n	80052c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb99 	bl	8005996 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d123      	bne.n	80052ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d013      	beq.n	80052b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	4a30      	ldr	r2, [pc, #192]	; (8005350 <HAL_UART_IRQHandler+0x288>)
 8005290:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc ff0f 	bl	80020ba <HAL_DMA_Abort_IT>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e00e      	b.n	80052d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f862 	bl	800537c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	e00a      	b.n	80052d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f85e 	bl	800537c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	e006      	b.n	80052d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f85a 	bl	800537c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80052ce:	e038      	b.n	8005342 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	bf00      	nop
    return;
 80052d2:	e036      	b.n	8005342 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <HAL_UART_IRQHandler+0x232>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fc6f 	bl	8005bd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f8:	e026      	b.n	8005348 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
    }
    return;
 800531e:	e012      	b.n	8005346 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <HAL_UART_IRQHandler+0x280>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fc35 	bl	8005ba4 <UART_EndTransmit_IT>
    return;
 800533a:	bf00      	nop
 800533c:	e004      	b.n	8005348 <HAL_UART_IRQHandler+0x280>
      return;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <HAL_UART_IRQHandler+0x280>
    return;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <HAL_UART_IRQHandler+0x280>
    return;
 8005346:	bf00      	nop
  }

}
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	08005b37 	.word	0x08005b37

08005354 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4ba2      	ldr	r3, [pc, #648]	; (800565c <UART_SetConfig+0x2b8>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6939      	ldr	r1, [r7, #16]
 80053dc:	430b      	orrs	r3, r1
 80053de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a90      	ldr	r2, [pc, #576]	; (8005660 <UART_SetConfig+0x2bc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d121      	bne.n	8005468 <UART_SetConfig+0xc4>
 8005424:	4b8f      	ldr	r3, [pc, #572]	; (8005664 <UART_SetConfig+0x2c0>)
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d817      	bhi.n	8005460 <UART_SetConfig+0xbc>
 8005430:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <UART_SetConfig+0x94>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	08005455 	.word	0x08005455
 8005440:	0800545b 	.word	0x0800545b
 8005444:	0800544f 	.word	0x0800544f
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e01e      	b.n	800548c <UART_SetConfig+0xe8>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e01b      	b.n	800548c <UART_SetConfig+0xe8>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e018      	b.n	800548c <UART_SetConfig+0xe8>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e015      	b.n	800548c <UART_SetConfig+0xe8>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	bf00      	nop
 8005466:	e011      	b.n	800548c <UART_SetConfig+0xe8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7e      	ldr	r2, [pc, #504]	; (8005668 <UART_SetConfig+0x2c4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d102      	bne.n	8005478 <UART_SetConfig+0xd4>
 8005472:	2300      	movs	r3, #0
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e009      	b.n	800548c <UART_SetConfig+0xe8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a7b      	ldr	r2, [pc, #492]	; (800566c <UART_SetConfig+0x2c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d102      	bne.n	8005488 <UART_SetConfig+0xe4>
 8005482:	2300      	movs	r3, #0
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e001      	b.n	800548c <UART_SetConfig+0xe8>
 8005488:	2310      	movs	r3, #16
 800548a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	f040 8082 	bne.w	800559c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005498:	7ffb      	ldrb	r3, [r7, #31]
 800549a:	2b08      	cmp	r3, #8
 800549c:	d85e      	bhi.n	800555c <UART_SetConfig+0x1b8>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x100>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	08005509 	.word	0x08005509
 80054b0:	0800555d 	.word	0x0800555d
 80054b4:	08005525 	.word	0x08005525
 80054b8:	0800555d 	.word	0x0800555d
 80054bc:	0800555d 	.word	0x0800555d
 80054c0:	0800555d 	.word	0x0800555d
 80054c4:	08005545 	.word	0x08005545
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fe ffca 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80054cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	005a      	lsls	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	61bb      	str	r3, [r7, #24]
        break;
 80054e6:	e03c      	b.n	8005562 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fe ffdc 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 80054ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	005a      	lsls	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	441a      	add	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	b29b      	uxth	r3, r3
 8005504:	61bb      	str	r3, [r7, #24]
        break;
 8005506:	e02c      	b.n	8005562 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005512:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6852      	ldr	r2, [r2, #4]
 800551a:	fbb3 f3f2 	udiv	r3, r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	61bb      	str	r3, [r7, #24]
        break;
 8005522:	e01e      	b.n	8005562 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005524:	f7fe ff26 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8005528:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	005a      	lsls	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	61bb      	str	r3, [r7, #24]
        break;
 8005542:	e00e      	b.n	8005562 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	b29b      	uxth	r3, r3
 8005558:	61bb      	str	r3, [r7, #24]
        break;
 800555a:	e002      	b.n	8005562 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
        break;
 8005560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d916      	bls.n	8005596 <UART_SetConfig+0x1f2>
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556e:	d212      	bcs.n	8005596 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f023 030f 	bic.w	r3, r3, #15
 8005578:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	b29b      	uxth	r3, r3
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	b29a      	uxth	r2, r3
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	4313      	orrs	r3, r2
 800558a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	897a      	ldrh	r2, [r7, #10]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e07d      	b.n	8005692 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
 800559a:	e07a      	b.n	8005692 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 800559c:	7ffb      	ldrb	r3, [r7, #31]
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d866      	bhi.n	8005670 <UART_SetConfig+0x2cc>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0x204>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055eb 	.word	0x080055eb
 80055b0:	08005609 	.word	0x08005609
 80055b4:	08005671 	.word	0x08005671
 80055b8:	08005625 	.word	0x08005625
 80055bc:	08005671 	.word	0x08005671
 80055c0:	08005671 	.word	0x08005671
 80055c4:	08005671 	.word	0x08005671
 80055c8:	08005643 	.word	0x08005643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055cc:	f7fe ff48 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80055d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	085a      	lsrs	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	441a      	add	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	61bb      	str	r3, [r7, #24]
        break;
 80055e8:	e045      	b.n	8005676 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ea:	f7fe ff5b 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 80055ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	085a      	lsrs	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	b29b      	uxth	r3, r3
 8005604:	61bb      	str	r3, [r7, #24]
        break;
 8005606:	e036      	b.n	8005676 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005612:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6852      	ldr	r2, [r2, #4]
 800561a:	fbb3 f3f2 	udiv	r3, r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	61bb      	str	r3, [r7, #24]
        break;
 8005622:	e028      	b.n	8005676 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005624:	f7fe fea6 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8005628:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	085a      	lsrs	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	441a      	add	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	b29b      	uxth	r3, r3
 800563e:	61bb      	str	r3, [r7, #24]
        break;
 8005640:	e019      	b.n	8005676 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	b29b      	uxth	r3, r3
 8005656:	61bb      	str	r3, [r7, #24]
        break;
 8005658:	e00d      	b.n	8005676 <UART_SetConfig+0x2d2>
 800565a:	bf00      	nop
 800565c:	efff69f3 	.word	0xefff69f3
 8005660:	40013800 	.word	0x40013800
 8005664:	40021000 	.word	0x40021000
 8005668:	40004400 	.word	0x40004400
 800566c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
        break;
 8005674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d908      	bls.n	800568e <UART_SetConfig+0x2ea>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d204      	bcs.n	800568e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e001      	b.n	8005692 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01a      	beq.n	80057be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a6:	d10a      	bne.n	80057be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057fa:	f7fb fd17 	bl	800122c <HAL_GetTick>
 80057fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b08      	cmp	r3, #8
 800580c:	d10e      	bne.n	800582c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f82a 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e020      	b.n	800586e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d10e      	bne.n	8005858 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f814 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e00a      	b.n	800586e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005886:	e05d      	b.n	8005944 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d059      	beq.n	8005944 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fb fccc 	bl	800122c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11b      	bne.n	80058de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e042      	b.n	8005964 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02b      	beq.n	8005944 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fa:	d123      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005904:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005914:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e00f      	b.n	8005964 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4013      	ands	r3, r2
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	429a      	cmp	r2, r3
 8005960:	d092      	beq.n	8005888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005982:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d014      	beq.n	8005a16 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a02:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a14:	e002      	b.n	8005a1c <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f003 fc7c 	bl	8009314 <HAL_UART_TxCpltCallback>
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff fc8e 	bl	8005354 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d01e      	beq.n	8005a94 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f003 fc21 	bl	80092dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fc59 	bl	8005368 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d109      	bne.n	8005afa <UART_DMAError+0x3c>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b21      	cmp	r3, #33	; 0x21
 8005aea:	d106      	bne.n	8005afa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f7ff ff39 	bl	800596c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d109      	bne.n	8005b1c <UART_DMAError+0x5e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b22      	cmp	r3, #34	; 0x22
 8005b0c:	d106      	bne.n	8005b1c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005b16:	6978      	ldr	r0, [r7, #20]
 8005b18:	f7ff ff3d 	bl	8005996 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b20:	f043 0210 	orr.w	r2, r3, #16
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f7ff fc27 	bl	800537c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fc11 	bl	800537c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0208 	orr.w	r2, r2, #8
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fbfa 	bl	8005390 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f003 fba3 	bl	8009314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bfc:	2b84      	cmp	r3, #132	; 0x84
 8005bfe:	d005      	beq.n	8005c0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	3303      	adds	r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c20:	f3ef 8305 	mrs	r3, IPSR
 8005c24:	607b      	str	r3, [r7, #4]
  return(result);
 8005c26:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf14      	ite	ne
 8005c2c:	2301      	movne	r3, #1
 8005c2e:	2300      	moveq	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c42:	f001 fa95 	bl	8007170 <vTaskStartScheduler>
  
  return osOK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af04      	add	r7, sp, #16
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <osThreadCreate+0x54>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01c      	beq.n	8005ca0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685c      	ldr	r4, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691e      	ldr	r6, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff ffb6 	bl	8005bea <makeFreeRtosPriority>
 8005c7e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	9100      	str	r1, [sp, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4632      	mov	r2, r6
 8005c92:	4629      	mov	r1, r5
 8005c94:	4620      	mov	r0, r4
 8005c96:	f001 f8b1 	bl	8006dfc <xTaskCreateStatic>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e01c      	b.n	8005cda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685c      	ldr	r4, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cac:	b29e      	uxth	r6, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff98 	bl	8005bea <makeFreeRtosPriority>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	f107 030c 	add.w	r3, r7, #12
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	9200      	str	r2, [sp, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f001 f8ef 	bl	8006eae <xTaskCreate>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ce4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <osDelay+0x16>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	e000      	b.n	8005cfc <osDelay+0x18>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 fa03 	bl	8007108 <vTaskDelay>
  
  return osOK;
 8005d02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <osMessageCreate+0x38>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68dc      	ldr	r4, [r3, #12]
 8005d36:	2300      	movs	r3, #0
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	f000 fb3c 	bl	80063b8 <xQueueGenericCreateStatic>
 8005d40:	4603      	mov	r3, r0
 8005d42:	e008      	b.n	8005d56 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f000 fba4 	bl	800649c <xQueueGenericCreate>
 8005d54:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd90      	pop	{r4, r7, pc}
	...

08005d60 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b08b      	sub	sp, #44	; 0x2c
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005d7a:	2380      	movs	r3, #128	; 0x80
 8005d7c:	617b      	str	r3, [r7, #20]
    return event;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	461c      	mov	r4, r3
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d8e:	e054      	b.n	8005e3a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d103      	bne.n	8005da8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	e009      	b.n	8005dbc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <osMessageGet+0x5c>
      ticks = 1;
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005dbc:	f7ff ff2d 	bl	8005c1a <inHandlerMode>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01c      	beq.n	8005e00 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005dc6:	f107 0220 	add.w	r2, r7, #32
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	68b8      	ldr	r0, [r7, #8]
 8005dd4:	f000 fe28 	bl	8006a28 <xQueueReceiveFromISR>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d102      	bne.n	8005de4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005dde:	2310      	movs	r3, #16
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e001      	b.n	8005de8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01d      	beq.n	8005e2a <osMessageGet+0xca>
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <osMessageGet+0xe4>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	e014      	b.n	8005e2a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	3304      	adds	r3, #4
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f000 fd30 	bl	8006870 <xQueueReceive>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e16:	2310      	movs	r3, #16
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e006      	b.n	8005e2a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <osMessageGet+0xc6>
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <osMessageGet+0xc8>
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	461c      	mov	r4, r3
 8005e2e:	f107 0314 	add.w	r3, r7, #20
 8005e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	372c      	adds	r7, #44	; 0x2c
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005e4e:	201c      	movs	r0, #28
 8005e50:	f002 fcee 	bl	8008830 <pvPortMalloc>
 8005e54:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f98a 	bl	8006180 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005e72:	687b      	ldr	r3, [r7, #4]
	}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b090      	sub	sp, #64	; 0x40
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	e7fe      	b.n	8005eae <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <xEventGroupWaitBits+0x52>
 8005eba:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e7fe      	b.n	8005ecc <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <xEventGroupWaitBits+0x6c>
 8005ed4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e7fe      	b.n	8005ee6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ee8:	f001 fe1a 	bl	8007b20 <xTaskGetSchedulerState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <xEventGroupWaitBits+0x7c>
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <xEventGroupWaitBits+0x80>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <xEventGroupWaitBits+0x82>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <xEventGroupWaitBits+0x9a>
 8005f02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e7fe      	b.n	8005f14 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005f16:	f001 f98f 	bl	8007238 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f26:	f000 f909 	bl	800613c <prvTestWaitCondition>
 8005f2a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d028      	beq.n	8005f92 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	43db      	mvns	r3, r3
 8005f48:	401a      	ands	r2, r3
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e020      	b.n	8005f92 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5e:	e018      	b.n	8005f92 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	1d18      	adds	r0, r3, #4
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	4313      	orrs	r3, r2
 8005f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f001 fb49 	bl	8007620 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005f92:	f001 f95f 	bl	8007254 <xTaskResumeAll>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d031      	beq.n	8006002 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <xEventGroupWaitBits+0x190>)
 8005fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005fb4:	f001 fe56 	bl	8007c64 <uxTaskResetEventItemValue>
 8005fb8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11a      	bne.n	8005ffa <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005fc4:	f002 fb1a 	bl	80085fc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005fd4:	f000 f8b2 	bl	800613c <prvTestWaitCondition>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	43db      	mvns	r3, r3
 8005fec:	401a      	ands	r2, r3
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005ff6:	f002 fb2f 	bl	8008658 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006004:	4618      	mov	r0, r3
 8006006:	3740      	adds	r7, #64	; 0x40
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	; 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800601a:	2300      	movs	r3, #0
 800601c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <xEventGroupSetBits+0x30>
 800602c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	e7fe      	b.n	800603e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <xEventGroupSetBits+0x4e>
 800604a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e7fe      	b.n	800605c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	3304      	adds	r3, #4
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3308      	adds	r3, #8
 8006068:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800606a:	f001 f8e5 	bl	8007238 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	431a      	orrs	r2, r3
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006080:	e03c      	b.n	80060fc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006098:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060bc:	e008      	b.n	80060d0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d101      	bne.n	80060d0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d010      	beq.n	80060f8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060f0:	4619      	mov	r1, r3
 80060f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80060f4:	f001 fb5a 	bl	80077ac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80060fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	429a      	cmp	r2, r3
 8006102:	d1be      	bne.n	8006082 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	43db      	mvns	r3, r3
 800610c:	401a      	ands	r2, r3
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006112:	f001 f89f 	bl	8007254 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	681b      	ldr	r3, [r3, #0]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3738      	adds	r7, #56	; 0x38
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff ff6e 	bl	8006010 <xEventGroupSetBits>
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e007      	b.n	8006172 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d101      	bne.n	8006172 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006172:	697b      	ldr	r3, [r7, #20]
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f103 0208 	add.w	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f103 0208 	add.w	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f103 0208 	add.w	r2, r3, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e00c      	b.n	800625c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3308      	adds	r3, #8
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e002      	b.n	8006250 <vListInsert+0x2e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d2f6      	bcs.n	800624a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6852      	ldr	r2, [r2, #4]
 80062b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d103      	bne.n	80062c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	1e5a      	subs	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <xQueueGenericReset+0x28>
 80062fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	e7fe      	b.n	800630e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006310:	f002 f974 	bl	80085fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	3b01      	subs	r3, #1
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	441a      	add	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	22ff      	movs	r2, #255	; 0xff
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d114      	bne.n	8006390 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01a      	beq.n	80063a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3310      	adds	r3, #16
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f9b8 	bl	80076e8 <xTaskRemoveFromEventList>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d012      	beq.n	80063a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <xQueueGenericReset+0xcc>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	e009      	b.n	80063a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3310      	adds	r3, #16
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fef3 	bl	8006180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3324      	adds	r3, #36	; 0x24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff feee 	bl	8006180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063a4:	f002 f958 	bl	8008658 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063a8:	2301      	movs	r3, #1
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	; 0x38
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <xQueueGenericCreateStatic+0x28>
 80063cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	e7fe      	b.n	80063de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <xQueueGenericCreateStatic+0x42>
 80063e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <xQueueGenericCreateStatic+0x4e>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <xQueueGenericCreateStatic+0x52>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <xQueueGenericCreateStatic+0x54>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <xQueueGenericCreateStatic+0x6c>
 8006410:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	e7fe      	b.n	8006422 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xQueueGenericCreateStatic+0x78>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueGenericCreateStatic+0x7c>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueGenericCreateStatic+0x7e>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <xQueueGenericCreateStatic+0x96>
 800643a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e7fe      	b.n	800644c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800644e:	2348      	movs	r3, #72	; 0x48
 8006450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b48      	cmp	r3, #72	; 0x48
 8006456:	d009      	beq.n	800646c <xQueueGenericCreateStatic+0xb4>
 8006458:	f04f 0330 	mov.w	r3, #48	; 0x30
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e7fe      	b.n	800646a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800647e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f842 	bl	8006516 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	; 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <xQueueGenericCreate+0x28>
 80064b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e7fe      	b.n	80064c2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	e004      	b.n	80064da <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3348      	adds	r3, #72	; 0x48
 80064de:	4618      	mov	r0, r3
 80064e0:	f002 f9a6 	bl	8008830 <pvPortMalloc>
 80064e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00f      	beq.n	800650c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	3348      	adds	r3, #72	; 0x48
 80064f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064fa:	79fa      	ldrb	r2, [r7, #7]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f805 	bl	8006516 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800650c:	69bb      	ldr	r3, [r7, #24]
	}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d103      	bne.n	8006532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e002      	b.n	8006538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006544:	2101      	movs	r1, #1
 8006546:	69b8      	ldr	r0, [r7, #24]
 8006548:	f7ff fece 	bl	80062e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <xQueueGenericSend+0x30>
 8006570:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
 8006582:	e7fe      	b.n	8006582 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <xQueueGenericSend+0x3e>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <xQueueGenericSend+0x42>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericSend+0x44>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <xQueueGenericSend+0x5c>
 800659c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <xQueueGenericSend+0x6a>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSend+0x6e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSend+0x70>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <xQueueGenericSend+0x88>
 80065c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e7fe      	b.n	80065da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065dc:	f001 faa0 	bl	8007b20 <xTaskGetSchedulerState>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <xQueueGenericSend+0x98>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <xQueueGenericSend+0x9c>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <xQueueGenericSend+0x9e>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <xQueueGenericSend+0xb6>
 80065f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660a:	f001 fff7 	bl	80085fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <xQueueGenericSend+0xcc>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d129      	bne.n	8006674 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fa7c 	bl	8006b22 <prvCopyDataToQueue>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f855 	bl	80076e8 <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <xQueueGenericSend+0x1f0>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e00a      	b.n	800666c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800665c:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xQueueGenericSend+0x1f0>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800666c:	f001 fff4 	bl	8008658 <vPortExitCritical>
				return pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	e063      	b.n	800673c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800667a:	f001 ffed 	bl	8008658 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800667e:	2300      	movs	r3, #0
 8006680:	e05c      	b.n	800673c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f8ed 	bl	800786c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006696:	f001 ffdf 	bl	8008658 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800669a:	f000 fdcd 	bl	8007238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800669e:	f001 ffad 	bl	80085fc <vPortEnterCritical>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d103      	bne.n	80066b8 <xQueueGenericSend+0x164>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSend+0x17a>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ce:	f001 ffc3 	bl	8008658 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f8dc 	bl	8007898 <xTaskCheckForTimeOut>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d124      	bne.n	8006730 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e8:	f000 fb13 	bl	8006d12 <prvIsQueueFull>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3310      	adds	r3, #16
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 ff6c 	bl	80075d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006702:	f000 fa9e 	bl	8006c42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f000 fda5 	bl	8007254 <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af7c 	bne.w	800660a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <xQueueGenericSend+0x1f0>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	e772      	b.n	800660a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006726:	f000 fa8c 	bl	8006c42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672a:	f000 fd93 	bl	8007254 <xTaskResumeAll>
 800672e:	e76c      	b.n	800660a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006732:	f000 fa86 	bl	8006c42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006736:	f000 fd8d 	bl	8007254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
		}
	}
}
 800673c:	4618      	mov	r0, r3
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <xQueueGenericSendFromISR+0x2c>
 8006760:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	e7fe      	b.n	8006772 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <xQueueGenericSendFromISR+0x3a>
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <xQueueGenericSendFromISR+0x3e>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <xQueueGenericSendFromISR+0x40>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <xQueueGenericSendFromISR+0x58>
 800678c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	623b      	str	r3, [r7, #32]
 800679e:	e7fe      	b.n	800679e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d103      	bne.n	80067ae <xQueueGenericSendFromISR+0x66>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <xQueueGenericSendFromISR+0x6a>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueGenericSendFromISR+0x6c>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <xQueueGenericSendFromISR+0x84>
 80067b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e7fe      	b.n	80067ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067cc:	f001 fff2 	bl	80087b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067d0:	f3ef 8211 	mrs	r2, BASEPRI
 80067d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61ba      	str	r2, [r7, #24]
 80067e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <xQueueGenericSendFromISR+0xb6>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d12c      	bne.n	8006858 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680e:	f000 f988 	bl	8006b22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006812:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d112      	bne.n	8006842 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d016      	beq.n	8006852 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	4618      	mov	r0, r3
 800682a:	f000 ff5d 	bl	80076e8 <xTaskRemoveFromEventList>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00e      	beq.n	8006852 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	e007      	b.n	8006852 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006846:	3301      	adds	r3, #1
 8006848:	b2db      	uxtb	r3, r3
 800684a:	b25a      	sxtb	r2, r3
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006852:	2301      	movs	r3, #1
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006856:	e001      	b.n	800685c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006858:	2300      	movs	r3, #0
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006868:	4618      	mov	r0, r3
 800686a:	3738      	adds	r7, #56	; 0x38
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08c      	sub	sp, #48	; 0x30
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <xQueueReceive+0x2e>
	__asm volatile
 800688a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	e7fe      	b.n	800689c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <xQueueReceive+0x3c>
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <xQueueReceive+0x40>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <xQueueReceive+0x42>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <xQueueReceive+0x5a>
 80068b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e7fe      	b.n	80068c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ca:	f001 f929 	bl	8007b20 <xTaskGetSchedulerState>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <xQueueReceive+0x6a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <xQueueReceive+0x6e>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueReceive+0x70>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <xQueueReceive+0x88>
 80068e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e7fe      	b.n	80068f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80068f8:	f001 fe80 	bl	80085fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01f      	beq.n	8006948 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690c:	f000 f973 	bl	8006bf6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1e5a      	subs	r2, r3, #1
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	3310      	adds	r3, #16
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fedf 	bl	80076e8 <xTaskRemoveFromEventList>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006930:	4b3c      	ldr	r3, [pc, #240]	; (8006a24 <xQueueReceive+0x1b4>)
 8006932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006940:	f001 fe8a 	bl	8008658 <vPortExitCritical>
				return pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	e069      	b.n	8006a1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800694e:	f001 fe83 	bl	8008658 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006952:	2300      	movs	r3, #0
 8006954:	e062      	b.n	8006a1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	4618      	mov	r0, r3
 8006962:	f000 ff83 	bl	800786c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006966:	2301      	movs	r3, #1
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800696a:	f001 fe75 	bl	8008658 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800696e:	f000 fc63 	bl	8007238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006972:	f001 fe43 	bl	80085fc <vPortEnterCritical>
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697c:	b25b      	sxtb	r3, r3
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d103      	bne.n	800698c <xQueueReceive+0x11c>
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueReceive+0x132>
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a2:	f001 fe59 	bl	8008658 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069a6:	1d3a      	adds	r2, r7, #4
 80069a8:	f107 0310 	add.w	r3, r7, #16
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 ff72 	bl	8007898 <xTaskCheckForTimeOut>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d123      	bne.n	8006a02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069bc:	f000 f993 	bl	8006ce6 <prvIsQueueEmpty>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d017      	beq.n	80069f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	3324      	adds	r3, #36	; 0x24
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fe02 	bl	80075d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f000 f934 	bl	8006c42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069da:	f000 fc3b 	bl	8007254 <xTaskResumeAll>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d189      	bne.n	80068f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <xQueueReceive+0x1b4>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	e780      	b.n	80068f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f8:	f000 f923 	bl	8006c42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069fc:	f000 fc2a 	bl	8007254 <xTaskResumeAll>
 8006a00:	e77a      	b.n	80068f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a04:	f000 f91d 	bl	8006c42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a08:	f000 fc24 	bl	8007254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0e:	f000 f96a 	bl	8006ce6 <prvIsQueueEmpty>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f43f af6f 	beq.w	80068f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3730      	adds	r7, #48	; 0x30
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	; 0x38
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <xQueueReceiveFromISR+0x2a>
 8006a3e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	e7fe      	b.n	8006a50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <xQueueReceiveFromISR+0x38>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <xQueueReceiveFromISR+0x3c>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <xQueueReceiveFromISR+0x3e>
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <xQueueReceiveFromISR+0x56>
 8006a6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	e7fe      	b.n	8006a7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a7e:	f001 fe99 	bl	80087b4 <vPortValidateInterruptPriority>
	__asm volatile
 8006a82:	f3ef 8211 	mrs	r2, BASEPRI
 8006a86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	61ba      	str	r2, [r7, #24]
 8006a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d02f      	beq.n	8006b0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab8:	f000 f89d 	bl	8006bf6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	1e5a      	subs	r2, r3, #1
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d112      	bne.n	8006af4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d016      	beq.n	8006b04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	3310      	adds	r3, #16
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fe04 	bl	80076e8 <xTaskRemoveFromEventList>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e007      	b.n	8006b04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af8:	3301      	adds	r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	b25a      	sxtb	r2, r3
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b04:	2301      	movs	r3, #1
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
 8006b08:	e001      	b.n	8006b0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3738      	adds	r7, #56	; 0x38
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10d      	bne.n	8006b5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d14d      	bne.n	8006be4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 f805 	bl	8007b5c <xTaskPriorityDisinherit>
 8006b52:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	e043      	b.n	8006be4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d119      	bne.n	8006b96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6898      	ldr	r0, [r3, #8]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	f002 fc87 	bl	8009480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d32b      	bcc.n	8006be4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	e026      	b.n	8006be4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68d8      	ldr	r0, [r3, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	f002 fc6d 	bl	8009480 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	425b      	negs	r3, r3
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d207      	bcs.n	8006bd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	425b      	negs	r3, r3
 8006bcc:	441a      	add	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d105      	bne.n	8006be4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bec:	697b      	ldr	r3, [r7, #20]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d303      	bcc.n	8006c2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68d9      	ldr	r1, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	461a      	mov	r2, r3
 8006c34:	6838      	ldr	r0, [r7, #0]
 8006c36:	f002 fc23 	bl	8009480 <memcpy>
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c4a:	f001 fcd7 	bl	80085fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c56:	e011      	b.n	8006c7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d012      	beq.n	8006c86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fd3f 	bl	80076e8 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c70:	f000 fe72 	bl	8007958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dce9      	bgt.n	8006c58 <prvUnlockQueue+0x16>
 8006c84:	e000      	b.n	8006c88 <prvUnlockQueue+0x46>
					break;
 8006c86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c90:	f001 fce2 	bl	8008658 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c94:	f001 fcb2 	bl	80085fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ca0:	e011      	b.n	8006cc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d012      	beq.n	8006cd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3310      	adds	r3, #16
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fd1a 	bl	80076e8 <xTaskRemoveFromEventList>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cba:	f000 fe4d 	bl	8007958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dce9      	bgt.n	8006ca2 <prvUnlockQueue+0x60>
 8006cce:	e000      	b.n	8006cd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cda:	f001 fcbd 	bl	8008658 <vPortExitCritical>
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cee:	f001 fc85 	bl	80085fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e001      	b.n	8006d04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d04:	f001 fca8 	bl	8008658 <vPortExitCritical>

	return xReturn;
 8006d08:	68fb      	ldr	r3, [r7, #12]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d1a:	f001 fc6f 	bl	80085fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d102      	bne.n	8006d30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e001      	b.n	8006d34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d34:	f001 fc90 	bl	8008658 <vPortExitCritical>

	return xReturn;
 8006d38:	68fb      	ldr	r3, [r7, #12]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	e014      	b.n	8006d7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d54:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <vQueueAddToRegistry+0x4c>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d60:	490b      	ldr	r1, [pc, #44]	; (8006d90 <vQueueAddToRegistry+0x4c>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <vQueueAddToRegistry+0x4c>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d76:	e005      	b.n	8006d84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b07      	cmp	r3, #7
 8006d82:	d9e7      	bls.n	8006d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20001b18 	.word	0x20001b18

08006d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006da4:	f001 fc2a 	bl	80085fc <vPortEnterCritical>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d103      	bne.n	8006dbe <vQueueWaitForMessageRestricted+0x2a>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d103      	bne.n	8006dd4 <vQueueWaitForMessageRestricted+0x40>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd4:	f001 fc40 	bl	8008658 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3324      	adds	r3, #36	; 0x24
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fc53 	bl	8007694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dee:	6978      	ldr	r0, [r7, #20]
 8006df0:	f7ff ff27 	bl	8006c42 <prvUnlockQueue>
	}
 8006df4:	bf00      	nop
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	; 0x38
 8006e00:	af04      	add	r7, sp, #16
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <xTaskCreateStatic+0x28>
	__asm volatile
 8006e10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	e7fe      	b.n	8006e22 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <xTaskCreateStatic+0x42>
 8006e2a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e7fe      	b.n	8006e3c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e3e:	2354      	movs	r3, #84	; 0x54
 8006e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b54      	cmp	r3, #84	; 0x54
 8006e46:	d009      	beq.n	8006e5c <xTaskCreateStatic+0x60>
 8006e48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	e7fe      	b.n	8006e5a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01e      	beq.n	8006ea0 <xTaskCreateStatic+0xa4>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9303      	str	r3, [sp, #12]
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	9302      	str	r3, [sp, #8]
 8006e82:	f107 0314 	add.w	r3, r7, #20
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f850 	bl	8006f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e9a:	f000 f8cb 	bl	8007034 <prvAddNewTaskToReadyList>
 8006e9e:	e001      	b.n	8006ea4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ea4:	697b      	ldr	r3, [r7, #20]
	}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b08c      	sub	sp, #48	; 0x30
 8006eb2:	af04      	add	r7, sp, #16
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fcb4 	bl	8008830 <pvPortMalloc>
 8006ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ed0:	2054      	movs	r0, #84	; 0x54
 8006ed2:	f001 fcad 	bl	8008830 <pvPortMalloc>
 8006ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ee4:	e005      	b.n	8006ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ee6:	6978      	ldr	r0, [r7, #20]
 8006ee8:	f001 fd64 	bl	80089b4 <vPortFree>
 8006eec:	e001      	b.n	8006ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	2300      	movs	r3, #0
 8006f04:	9303      	str	r3, [sp, #12]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f80e 	bl	8006f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f1c:	69f8      	ldr	r0, [r7, #28]
 8006f1e:	f000 f889 	bl	8007034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e002      	b.n	8006f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f50:	3b01      	subs	r3, #1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <prvInitialiseNewTask+0x46>
 8006f6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e7fe      	b.n	8006f7c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	e012      	b.n	8006faa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	7819      	ldrb	r1, [r3, #0]
 8006f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	3334      	adds	r3, #52	; 0x34
 8006f94:	460a      	mov	r2, r1
 8006f96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d9e9      	bls.n	8006f84 <prvInitialiseNewTask+0x4c>
 8006fb0:	e000      	b.n	8006fb4 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006fb2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b06      	cmp	r3, #6
 8006fc0:	d901      	bls.n	8006fc6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff f8ef 	bl	80061c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff f8ea 	bl	80061c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	f1c3 0207 	rsb	r2, r3, #7
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2200      	movs	r2, #0
 8007006:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	69b8      	ldr	r0, [r7, #24]
 8007016:	f001 f9cd 	bl	80083b4 <pxPortInitialiseStack>
 800701a:	4602      	mov	r2, r0
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800702c:	bf00      	nop
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800703c:	f001 fade 	bl	80085fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007040:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <prvAddNewTaskToReadyList+0xb8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a29      	ldr	r2, [pc, #164]	; (80070ec <prvAddNewTaskToReadyList+0xb8>)
 8007048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800704a:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <prvAddNewTaskToReadyList+0xbc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007052:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <prvAddNewTaskToReadyList+0xbc>)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007058:	4b24      	ldr	r3, [pc, #144]	; (80070ec <prvAddNewTaskToReadyList+0xb8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d110      	bne.n	8007082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007060:	f000 fc9e 	bl	80079a0 <prvInitialiseTaskLists>
 8007064:	e00d      	b.n	8007082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <prvAddNewTaskToReadyList+0xc0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <prvAddNewTaskToReadyList+0xbc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	429a      	cmp	r2, r3
 800707a:	d802      	bhi.n	8007082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800707c:	4a1c      	ldr	r2, [pc, #112]	; (80070f0 <prvAddNewTaskToReadyList+0xbc>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <prvAddNewTaskToReadyList+0xc4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3301      	adds	r3, #1
 8007088:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <prvAddNewTaskToReadyList+0xc4>)
 800708a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	2201      	movs	r2, #1
 8007092:	409a      	lsls	r2, r3
 8007094:	4b19      	ldr	r3, [pc, #100]	; (80070fc <prvAddNewTaskToReadyList+0xc8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4313      	orrs	r3, r2
 800709a:	4a18      	ldr	r2, [pc, #96]	; (80070fc <prvAddNewTaskToReadyList+0xc8>)
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4a15      	ldr	r2, [pc, #84]	; (8007100 <prvAddNewTaskToReadyList+0xcc>)
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f7ff f890 	bl	80061da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 facd 	bl	8008658 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <prvAddNewTaskToReadyList+0xc0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00e      	beq.n	80070e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvAddNewTaskToReadyList+0xbc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d207      	bcs.n	80070e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <prvAddNewTaskToReadyList+0xd0>)
 80070d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	2000093c 	.word	0x2000093c
 80070f0:	2000083c 	.word	0x2000083c
 80070f4:	20000948 	.word	0x20000948
 80070f8:	20000958 	.word	0x20000958
 80070fc:	20000944 	.word	0x20000944
 8007100:	20000840 	.word	0x20000840
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d016      	beq.n	8007148 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <vTaskDelay+0x60>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <vTaskDelay+0x2e>
 8007122:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	e7fe      	b.n	8007134 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007136:	f000 f87f 	bl	8007238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fda9 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007142:	f000 f887 	bl	8007254 <xTaskResumeAll>
 8007146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d107      	bne.n	800715e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <vTaskDelay+0x64>)
 8007150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000964 	.word	0x20000964
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	; 0x28
 8007174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800717e:	463a      	mov	r2, r7
 8007180:	1d39      	adds	r1, r7, #4
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 fa0c 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	2300      	movs	r3, #0
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	2300      	movs	r3, #0
 800719c:	460a      	mov	r2, r1
 800719e:	4920      	ldr	r1, [pc, #128]	; (8007220 <vTaskStartScheduler+0xb0>)
 80071a0:	4820      	ldr	r0, [pc, #128]	; (8007224 <vTaskStartScheduler+0xb4>)
 80071a2:	f7ff fe2b 	bl	8006dfc <xTaskCreateStatic>
 80071a6:	4602      	mov	r2, r0
 80071a8:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <vTaskStartScheduler+0xb8>)
 80071aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071ac:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <vTaskStartScheduler+0xb8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e001      	b.n	80071be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d102      	bne.n	80071ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071c4:	f000 fdcc 	bl	8007d60 <xTimerCreateTimerTask>
 80071c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d115      	bne.n	80071fc <vTaskStartScheduler+0x8c>
 80071d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <vTaskStartScheduler+0xbc>)
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295
 80071e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <vTaskStartScheduler+0xc0>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071f0:	4b10      	ldr	r3, [pc, #64]	; (8007234 <vTaskStartScheduler+0xc4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071f6:	f001 f963 	bl	80084c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071fa:	e00d      	b.n	8007218 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007202:	d109      	bne.n	8007218 <vTaskStartScheduler+0xa8>
 8007204:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e7fe      	b.n	8007216 <vTaskStartScheduler+0xa6>
}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	08009680 	.word	0x08009680
 8007224:	08007971 	.word	0x08007971
 8007228:	20000960 	.word	0x20000960
 800722c:	2000095c 	.word	0x2000095c
 8007230:	20000948 	.word	0x20000948
 8007234:	20000940 	.word	0x20000940

08007238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <vTaskSuspendAll+0x18>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a03      	ldr	r2, [pc, #12]	; (8007250 <vTaskSuspendAll+0x18>)
 8007244:	6013      	str	r3, [r2, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000964 	.word	0x20000964

08007254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007262:	4b41      	ldr	r3, [pc, #260]	; (8007368 <xTaskResumeAll+0x114>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <xTaskResumeAll+0x2a>
 800726a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	e7fe      	b.n	800727c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800727e:	f001 f9bd 	bl	80085fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007282:	4b39      	ldr	r3, [pc, #228]	; (8007368 <xTaskResumeAll+0x114>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3b01      	subs	r3, #1
 8007288:	4a37      	ldr	r2, [pc, #220]	; (8007368 <xTaskResumeAll+0x114>)
 800728a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800728c:	4b36      	ldr	r3, [pc, #216]	; (8007368 <xTaskResumeAll+0x114>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d161      	bne.n	8007358 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007294:	4b35      	ldr	r3, [pc, #212]	; (800736c <xTaskResumeAll+0x118>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d05d      	beq.n	8007358 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800729c:	e02e      	b.n	80072fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <xTaskResumeAll+0x11c>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3318      	adds	r3, #24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fff2 	bl	8006294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe ffed 	bl	8006294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	2201      	movs	r2, #1
 80072c0:	409a      	lsls	r2, r3
 80072c2:	4b2c      	ldr	r3, [pc, #176]	; (8007374 <xTaskResumeAll+0x120>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <xTaskResumeAll+0x120>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4a27      	ldr	r2, [pc, #156]	; (8007378 <xTaskResumeAll+0x124>)
 80072da:	441a      	add	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe ff79 	bl	80061da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b23      	ldr	r3, [pc, #140]	; (800737c <xTaskResumeAll+0x128>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d302      	bcc.n	80072fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80072f6:	4b22      	ldr	r3, [pc, #136]	; (8007380 <xTaskResumeAll+0x12c>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fc:	4b1c      	ldr	r3, [pc, #112]	; (8007370 <xTaskResumeAll+0x11c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1cc      	bne.n	800729e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800730a:	f000 fbe3 	bl	8007ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <xTaskResumeAll+0x130>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d010      	beq.n	800733c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800731a:	f000 f847 	bl	80073ac <xTaskIncrementTick>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007324:	4b16      	ldr	r3, [pc, #88]	; (8007380 <xTaskResumeAll+0x12c>)
 8007326:	2201      	movs	r2, #1
 8007328:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3b01      	subs	r3, #1
 800732e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f1      	bne.n	800731a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <xTaskResumeAll+0x130>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <xTaskResumeAll+0x12c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <xTaskResumeAll+0x134>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007358:	f001 f97e 	bl	8008658 <vPortExitCritical>

	return xAlreadyYielded;
 800735c:	68bb      	ldr	r3, [r7, #8]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000964 	.word	0x20000964
 800736c:	2000093c 	.word	0x2000093c
 8007370:	200008fc 	.word	0x200008fc
 8007374:	20000944 	.word	0x20000944
 8007378:	20000840 	.word	0x20000840
 800737c:	2000083c 	.word	0x2000083c
 8007380:	20000950 	.word	0x20000950
 8007384:	2000094c 	.word	0x2000094c
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <xTaskGetTickCount+0x1c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007398:	687b      	ldr	r3, [r7, #4]
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	20000940 	.word	0x20000940

080073ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <xTaskIncrementTick+0x14c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808c 	bne.w	80074d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c0:	4b4e      	ldr	r3, [pc, #312]	; (80074fc <xTaskIncrementTick+0x150>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c8:	4a4c      	ldr	r2, [pc, #304]	; (80074fc <xTaskIncrementTick+0x150>)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11f      	bne.n	8007414 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d4:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <xTaskIncrementTick+0x154>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <xTaskIncrementTick+0x46>
 80073de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	e7fe      	b.n	80073f0 <xTaskIncrementTick+0x44>
 80073f2:	4b43      	ldr	r3, [pc, #268]	; (8007500 <xTaskIncrementTick+0x154>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <xTaskIncrementTick+0x158>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a40      	ldr	r2, [pc, #256]	; (8007500 <xTaskIncrementTick+0x154>)
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	4a40      	ldr	r2, [pc, #256]	; (8007504 <xTaskIncrementTick+0x158>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4b40      	ldr	r3, [pc, #256]	; (8007508 <xTaskIncrementTick+0x15c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3301      	adds	r3, #1
 800740c:	4a3e      	ldr	r2, [pc, #248]	; (8007508 <xTaskIncrementTick+0x15c>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	f000 fb60 	bl	8007ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007414:	4b3d      	ldr	r3, [pc, #244]	; (800750c <xTaskIncrementTick+0x160>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d34d      	bcc.n	80074ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <xTaskIncrementTick+0x154>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <xTaskIncrementTick+0x80>
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <xTaskIncrementTick+0x82>
 800742c:	2300      	movs	r3, #0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007432:	4b36      	ldr	r3, [pc, #216]	; (800750c <xTaskIncrementTick+0x160>)
 8007434:	f04f 32ff 	mov.w	r2, #4294967295
 8007438:	601a      	str	r2, [r3, #0]
					break;
 800743a:	e03e      	b.n	80074ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800743c:	4b30      	ldr	r3, [pc, #192]	; (8007500 <xTaskIncrementTick+0x154>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d203      	bcs.n	800745c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007454:	4a2d      	ldr	r2, [pc, #180]	; (800750c <xTaskIncrementTick+0x160>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6013      	str	r3, [r2, #0]
						break;
 800745a:	e02e      	b.n	80074ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3304      	adds	r3, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe ff17 	bl	8006294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	3318      	adds	r3, #24
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe ff0e 	bl	8006294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <xTaskIncrementTick+0x164>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4313      	orrs	r3, r2
 8007486:	4a22      	ldr	r2, [pc, #136]	; (8007510 <xTaskIncrementTick+0x164>)
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <xTaskIncrementTick+0x168>)
 8007498:	441a      	add	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7fe fe9a 	bl	80061da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d3b4      	bcc.n	800741e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b8:	e7b1      	b.n	800741e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074ba:	4b17      	ldr	r3, [pc, #92]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4914      	ldr	r1, [pc, #80]	; (8007514 <xTaskIncrementTick+0x168>)
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d907      	bls.n	80074e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e004      	b.n	80074e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <xTaskIncrementTick+0x170>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	4a0f      	ldr	r2, [pc, #60]	; (800751c <xTaskIncrementTick+0x170>)
 80074e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <xTaskIncrementTick+0x174>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000964 	.word	0x20000964
 80074fc:	20000940 	.word	0x20000940
 8007500:	200008f4 	.word	0x200008f4
 8007504:	200008f8 	.word	0x200008f8
 8007508:	20000954 	.word	0x20000954
 800750c:	2000095c 	.word	0x2000095c
 8007510:	20000944 	.word	0x20000944
 8007514:	20000840 	.word	0x20000840
 8007518:	2000083c 	.word	0x2000083c
 800751c:	2000094c 	.word	0x2000094c
 8007520:	20000950 	.word	0x20000950

08007524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800752a:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <vTaskSwitchContext+0xa0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007532:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <vTaskSwitchContext+0xa4>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007538:	e03e      	b.n	80075b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800753a:	4b23      	ldr	r3, [pc, #140]	; (80075c8 <vTaskSwitchContext+0xa4>)
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007540:	4b22      	ldr	r3, [pc, #136]	; (80075cc <vTaskSwitchContext+0xa8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	fab3 f383 	clz	r3, r3
 800754c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	f1c3 031f 	rsb	r3, r3, #31
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	491e      	ldr	r1, [pc, #120]	; (80075d0 <vTaskSwitchContext+0xac>)
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	440b      	add	r3, r1
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <vTaskSwitchContext+0x5a>
	__asm volatile
 800756a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	e7fe      	b.n	800757c <vTaskSwitchContext+0x58>
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <vTaskSwitchContext+0xac>)
 800758a:	4413      	add	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3308      	adds	r3, #8
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d104      	bne.n	80075ae <vTaskSwitchContext+0x8a>
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4a07      	ldr	r2, [pc, #28]	; (80075d4 <vTaskSwitchContext+0xb0>)
 80075b6:	6013      	str	r3, [r2, #0]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000964 	.word	0x20000964
 80075c8:	20000950 	.word	0x20000950
 80075cc:	20000944 	.word	0x20000944
 80075d0:	20000840 	.word	0x20000840
 80075d4:	2000083c 	.word	0x2000083c

080075d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <vTaskPlaceOnEventList+0x24>
 80075e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e7fe      	b.n	80075fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <vTaskPlaceOnEventList+0x44>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3318      	adds	r3, #24
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fe fe0c 	bl	8006222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800760a:	2101      	movs	r1, #1
 800760c:	6838      	ldr	r0, [r7, #0]
 800760e:	f000 fb41 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	2000083c 	.word	0x2000083c

08007620 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <vTaskPlaceOnUnorderedEventList+0x26>
 8007632:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e7fe      	b.n	8007644 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <vTaskPlaceOnUnorderedEventList+0x42>
 800764e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	e7fe      	b.n	8007660 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007662:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800766c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800766e:	4b08      	ldr	r3, [pc, #32]	; (8007690 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3318      	adds	r3, #24
 8007674:	4619      	mov	r1, r3
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f7fe fdaf 	bl	80061da <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800767c:	2101      	movs	r1, #1
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fb08 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
}
 8007684:	bf00      	nop
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20000964 	.word	0x20000964
 8007690:	2000083c 	.word	0x2000083c

08007694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <vTaskPlaceOnEventListRestricted+0x26>
 80076a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e7fe      	b.n	80076b8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <vTaskPlaceOnEventListRestricted+0x50>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3318      	adds	r3, #24
 80076c0:	4619      	mov	r1, r3
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7fe fd89 	bl	80061da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	68b8      	ldr	r0, [r7, #8]
 80076d8:	f000 fadc 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
	}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	2000083c 	.word	0x2000083c

080076e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <xTaskRemoveFromEventList+0x2a>
 80076fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e7fe      	b.n	8007710 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	3318      	adds	r3, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fdbc 	bl	8006294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771c:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <xTaskRemoveFromEventList+0xac>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11c      	bne.n	800775e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fdb3 	bl	8006294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	2201      	movs	r2, #1
 8007734:	409a      	lsls	r2, r3
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <xTaskRemoveFromEventList+0xb0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	4a16      	ldr	r2, [pc, #88]	; (8007798 <xTaskRemoveFromEventList+0xb0>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <xTaskRemoveFromEventList+0xb4>)
 800774e:	441a      	add	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fd3f 	bl	80061da <vListInsertEnd>
 800775c:	e005      	b.n	800776a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3318      	adds	r3, #24
 8007762:	4619      	mov	r1, r3
 8007764:	480e      	ldr	r0, [pc, #56]	; (80077a0 <xTaskRemoveFromEventList+0xb8>)
 8007766:	f7fe fd38 	bl	80061da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776e:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <xTaskRemoveFromEventList+0xbc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	429a      	cmp	r2, r3
 8007776:	d905      	bls.n	8007784 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <xTaskRemoveFromEventList+0xc0>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e001      	b.n	8007788 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007788:	697b      	ldr	r3, [r7, #20]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000964 	.word	0x20000964
 8007798:	20000944 	.word	0x20000944
 800779c:	20000840 	.word	0x20000840
 80077a0:	200008fc 	.word	0x200008fc
 80077a4:	2000083c 	.word	0x2000083c
 80077a8:	20000950 	.word	0x20000950

080077ac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80077b6:	4b28      	ldr	r3, [pc, #160]	; (8007858 <vTaskRemoveFromUnorderedEventList+0xac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <vTaskRemoveFromUnorderedEventList+0x26>
 80077be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e7fe      	b.n	80077d0 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <vTaskRemoveFromUnorderedEventList+0x50>
 80077e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e7fe      	b.n	80077fa <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fe fd49 	bl	8006294 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fd44 	bl	8006294 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	2201      	movs	r2, #1
 8007812:	409a      	lsls	r2, r3
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4313      	orrs	r3, r2
 800781a:	4a10      	ldr	r2, [pc, #64]	; (800785c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800782c:	441a      	add	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fe fcd0 	bl	80061da <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	429a      	cmp	r2, r3
 8007846:	d902      	bls.n	800784e <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007848:	4b07      	ldr	r3, [pc, #28]	; (8007868 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
	}
}
 800784e:	bf00      	nop
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000964 	.word	0x20000964
 800785c:	20000944 	.word	0x20000944
 8007860:	20000840 	.word	0x20000840
 8007864:	2000083c 	.word	0x2000083c
 8007868:	20000950 	.word	0x20000950

0800786c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <vTaskInternalSetTimeOutState+0x24>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <vTaskInternalSetTimeOutState+0x28>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000954 	.word	0x20000954
 8007894:	20000940 	.word	0x20000940

08007898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <xTaskCheckForTimeOut+0x24>
 80078a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e7fe      	b.n	80078ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <xTaskCheckForTimeOut+0x3e>
 80078c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e7fe      	b.n	80078d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80078d6:	f000 fe91 	bl	80085fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078da:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <xTaskCheckForTimeOut+0xb8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d102      	bne.n	80078fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e023      	b.n	8007942 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b15      	ldr	r3, [pc, #84]	; (8007954 <xTaskCheckForTimeOut+0xbc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d007      	beq.n	8007916 <xTaskCheckForTimeOut+0x7e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	d302      	bcc.n	8007916 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	e015      	b.n	8007942 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d20b      	bcs.n	8007938 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff9d 	bl	800786c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	e004      	b.n	8007942 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007942:	f000 fe89 	bl	8008658 <vPortExitCritical>

	return xReturn;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000940 	.word	0x20000940
 8007954:	20000954 	.word	0x20000954

08007958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800795c:	4b03      	ldr	r3, [pc, #12]	; (800796c <vTaskMissedYield+0x14>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000950 	.word	0x20000950

08007970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007978:	f000 f852 	bl	8007a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <prvIdleTask+0x28>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d9f9      	bls.n	8007978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <prvIdleTask+0x2c>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007994:	e7f0      	b.n	8007978 <prvIdleTask+0x8>
 8007996:	bf00      	nop
 8007998:	20000840 	.word	0x20000840
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	e00c      	b.n	80079c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4a12      	ldr	r2, [pc, #72]	; (8007a00 <prvInitialiseTaskLists+0x60>)
 80079b8:	4413      	add	r3, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fbe0 	bl	8006180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3301      	adds	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	d9ef      	bls.n	80079ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079cc:	480d      	ldr	r0, [pc, #52]	; (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ce:	f7fe fbd7 	bl	8006180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079d2:	480d      	ldr	r0, [pc, #52]	; (8007a08 <prvInitialiseTaskLists+0x68>)
 80079d4:	f7fe fbd4 	bl	8006180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d8:	480c      	ldr	r0, [pc, #48]	; (8007a0c <prvInitialiseTaskLists+0x6c>)
 80079da:	f7fe fbd1 	bl	8006180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079de:	480c      	ldr	r0, [pc, #48]	; (8007a10 <prvInitialiseTaskLists+0x70>)
 80079e0:	f7fe fbce 	bl	8006180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e4:	480b      	ldr	r0, [pc, #44]	; (8007a14 <prvInitialiseTaskLists+0x74>)
 80079e6:	f7fe fbcb 	bl	8006180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079ea:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <prvInitialiseTaskLists+0x78>)
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <prvInitialiseTaskLists+0x7c>)
 80079f2:	4a05      	ldr	r2, [pc, #20]	; (8007a08 <prvInitialiseTaskLists+0x68>)
 80079f4:	601a      	str	r2, [r3, #0]
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000840 	.word	0x20000840
 8007a04:	200008cc 	.word	0x200008cc
 8007a08:	200008e0 	.word	0x200008e0
 8007a0c:	200008fc 	.word	0x200008fc
 8007a10:	20000910 	.word	0x20000910
 8007a14:	20000928 	.word	0x20000928
 8007a18:	200008f4 	.word	0x200008f4
 8007a1c:	200008f8 	.word	0x200008f8

08007a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a26:	e019      	b.n	8007a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a28:	f000 fde8 	bl	80085fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <prvCheckTasksWaitingTermination+0x4c>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fc2b 	bl	8006294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <prvCheckTasksWaitingTermination+0x50>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <prvCheckTasksWaitingTermination+0x50>)
 8007a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a48:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a52:	f000 fe01 	bl	8008658 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f80e 	bl	8007a78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e1      	bne.n	8007a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000910 	.word	0x20000910
 8007a70:	2000093c 	.word	0x2000093c
 8007a74:	20000924 	.word	0x20000924

08007a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d108      	bne.n	8007a9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 ff90 	bl	80089b4 <vPortFree>
				vPortFree( pxTCB );
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 ff8d 	bl	80089b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a9a:	e017      	b.n	8007acc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d103      	bne.n	8007aae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 ff84 	bl	80089b4 <vPortFree>
	}
 8007aac:	e00e      	b.n	8007acc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d009      	beq.n	8007acc <prvDeleteTCB+0x54>
 8007ab8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e7fe      	b.n	8007aca <prvDeleteTCB+0x52>
	}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <prvResetNextTaskUnblockTime+0x44>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <prvResetNextTaskUnblockTime+0x14>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <prvResetNextTaskUnblockTime+0x16>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007aee:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <prvResetNextTaskUnblockTime+0x48>)
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007af6:	e008      	b.n	8007b0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <prvResetNextTaskUnblockTime+0x44>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4a05      	ldr	r2, [pc, #20]	; (8007b1c <prvResetNextTaskUnblockTime+0x48>)
 8007b08:	6013      	str	r3, [r2, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	200008f4 	.word	0x200008f4
 8007b1c:	2000095c 	.word	0x2000095c

08007b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <xTaskGetSchedulerState+0x34>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	e008      	b.n	8007b46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b34:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <xTaskGetSchedulerState+0x38>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	e001      	b.n	8007b46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b46:	687b      	ldr	r3, [r7, #4]
	}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20000948 	.word	0x20000948
 8007b58:	20000964 	.word	0x20000964

08007b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d06c      	beq.n	8007c4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b72:	4b39      	ldr	r3, [pc, #228]	; (8007c58 <xTaskPriorityDisinherit+0xfc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d009      	beq.n	8007b90 <xTaskPriorityDisinherit+0x34>
 8007b7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e7fe      	b.n	8007b8e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d109      	bne.n	8007bac <xTaskPriorityDisinherit+0x50>
 8007b98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	e7fe      	b.n	8007baa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb0:	1e5a      	subs	r2, r3, #1
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d044      	beq.n	8007c4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d140      	bne.n	8007c4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fb60 	bl	8006294 <uxListRemove>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d115      	bne.n	8007c06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	491f      	ldr	r1, [pc, #124]	; (8007c5c <xTaskPriorityDisinherit+0x100>)
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <xTaskPriorityDisinherit+0xaa>
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <xTaskPriorityDisinherit+0x104>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4013      	ands	r3, r2
 8007c02:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <xTaskPriorityDisinherit+0x104>)
 8007c04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	f1c3 0207 	rsb	r2, r3, #7
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	2201      	movs	r2, #1
 8007c20:	409a      	lsls	r2, r3
 8007c22:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <xTaskPriorityDisinherit+0x104>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <xTaskPriorityDisinherit+0x104>)
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <xTaskPriorityDisinherit+0x100>)
 8007c3a:	441a      	add	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fe fac9 	bl	80061da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c4c:	697b      	ldr	r3, [r7, #20]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	2000083c 	.word	0x2000083c
 8007c5c:	20000840 	.word	0x20000840
 8007c60:	20000944 	.word	0x20000944

08007c64 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <uxTaskResetEventItemValue+0x2c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c72:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <uxTaskResetEventItemValue+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <uxTaskResetEventItemValue+0x2c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1c2 0207 	rsb	r2, r2, #7
 8007c80:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007c82:	687b      	ldr	r3, [r7, #4]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	2000083c 	.word	0x2000083c

08007c94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c9e:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe faf2 	bl	8006294 <uxListRemove>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d10a      	bne.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	481a      	ldr	r0, [pc, #104]	; (8007d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ce6:	f7fe fa78 	bl	80061da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cea:	e026      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf4:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d209      	bcs.n	8007d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d04:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fa86 	bl	8006222 <vListInsert>
}
 8007d16:	e010      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe fa7c 	bl	8006222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d202      	bcs.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d34:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6013      	str	r3, [r2, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000940 	.word	0x20000940
 8007d48:	2000083c 	.word	0x2000083c
 8007d4c:	20000944 	.word	0x20000944
 8007d50:	20000928 	.word	0x20000928
 8007d54:	200008f8 	.word	0x200008f8
 8007d58:	200008f4 	.word	0x200008f4
 8007d5c:	2000095c 	.word	0x2000095c

08007d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	; 0x28
 8007d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d6a:	f000 fac3 	bl	80082f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <xTimerCreateTimerTask+0x80>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d021      	beq.n	8007dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d7e:	1d3a      	adds	r2, r7, #4
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	f107 030c 	add.w	r3, r7, #12
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7f8 fc25 	bl	80005d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	9202      	str	r2, [sp, #8]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	460a      	mov	r2, r1
 8007da0:	4910      	ldr	r1, [pc, #64]	; (8007de4 <xTimerCreateTimerTask+0x84>)
 8007da2:	4811      	ldr	r0, [pc, #68]	; (8007de8 <xTimerCreateTimerTask+0x88>)
 8007da4:	f7ff f82a 	bl	8006dfc <xTaskCreateStatic>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <xTimerCreateTimerTask+0x8c>)
 8007dac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <xTimerCreateTimerTask+0x8c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007db6:	2301      	movs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d109      	bne.n	8007dd4 <xTimerCreateTimerTask+0x74>
 8007dc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	e7fe      	b.n	8007dd2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007dd4:	697b      	ldr	r3, [r7, #20]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000998 	.word	0x20000998
 8007de4:	08009688 	.word	0x08009688
 8007de8:	08007f09 	.word	0x08007f09
 8007dec:	2000099c 	.word	0x2000099c

08007df0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <xTimerGenericCommand+0x2c>
 8007e08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	e7fe      	b.n	8007e1a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e1c:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <xTimerGenericCommand+0x94>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d02a      	beq.n	8007e7a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	dc18      	bgt.n	8007e68 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e36:	f7ff fe73 	bl	8007b20 <xTaskGetSchedulerState>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d109      	bne.n	8007e54 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <xTimerGenericCommand+0x94>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	f107 0110 	add.w	r1, r7, #16
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4c:	f7fe fb82 	bl	8006554 <xQueueGenericSend>
 8007e50:	6278      	str	r0, [r7, #36]	; 0x24
 8007e52:	e012      	b.n	8007e7a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <xTimerGenericCommand+0x94>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	f107 0110 	add.w	r1, r7, #16
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f7fe fb78 	bl	8006554 <xQueueGenericSend>
 8007e64:	6278      	str	r0, [r7, #36]	; 0x24
 8007e66:	e008      	b.n	8007e7a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <xTimerGenericCommand+0x94>)
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	f107 0110 	add.w	r1, r7, #16
 8007e70:	2300      	movs	r3, #0
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	f7fe fc68 	bl	8006748 <xQueueGenericSendFromISR>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000998 	.word	0x20000998

08007e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <prvProcessExpiredTimer+0x7c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe f9f7 	bl	8006294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d121      	bne.n	8007ef2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	18d1      	adds	r1, r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	6978      	ldr	r0, [r7, #20]
 8007ebc:	f000 f8c8 	bl	8008050 <prvInsertTimerInActiveList>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d015      	beq.n	8007ef2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6978      	ldr	r0, [r7, #20]
 8007ed2:	f7ff ff8d 	bl	8007df0 <xTimerGenericCommand>
 8007ed6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <prvProcessExpiredTimer+0x6a>
 8007ede:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	e7fe      	b.n	8007ef0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	6978      	ldr	r0, [r7, #20]
 8007ef8:	4798      	blx	r3
}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000990 	.word	0x20000990

08007f08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f10:	f107 0308 	add.w	r3, r7, #8
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f857 	bl	8007fc8 <prvGetNextExpireTime>
 8007f1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f803 	bl	8007f2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f26:	f000 f8d5 	bl	80080d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f2a:	e7f1      	b.n	8007f10 <prvTimerTask+0x8>

08007f2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f36:	f7ff f97f 	bl	8007238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f3a:	f107 0308 	add.w	r3, r7, #8
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f866 	bl	8008010 <prvSampleTimeNow>
 8007f44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d130      	bne.n	8007fae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <prvProcessTimerOrBlockTask+0x3c>
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d806      	bhi.n	8007f68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f5a:	f7ff f97b 	bl	8007254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff91 	bl	8007e88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f66:	e024      	b.n	8007fb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <prvProcessTimerOrBlockTask+0x90>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f80:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <prvProcessTimerOrBlockTask+0x94>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f7fe ff01 	bl	8006d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f92:	f7ff f95f 	bl	8007254 <xTaskResumeAll>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvProcessTimerOrBlockTask+0x98>)
 8007f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	f3bf 8f6f 	isb	sy
}
 8007fac:	e001      	b.n	8007fb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fae:	f7ff f951 	bl	8007254 <xTaskResumeAll>
}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000994 	.word	0x20000994
 8007fc0:	20000998 	.word	0x20000998
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <prvGetNextExpireTime+0x44>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <prvGetNextExpireTime+0x44>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e001      	b.n	8007ffe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	20000990 	.word	0x20000990

08008010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008018:	f7ff f9b8 	bl	800738c <xTaskGetTickCount>
 800801c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800801e:	4b0b      	ldr	r3, [pc, #44]	; (800804c <prvSampleTimeNow+0x3c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	429a      	cmp	r2, r3
 8008026:	d205      	bcs.n	8008034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008028:	f000 f904 	bl	8008234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e002      	b.n	800803a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800803a:	4a04      	ldr	r2, [pc, #16]	; (800804c <prvSampleTimeNow+0x3c>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008040:	68fb      	ldr	r3, [r7, #12]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200009a0 	.word	0x200009a0

08008050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d812      	bhi.n	800809c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	429a      	cmp	r2, r3
 8008082:	d302      	bcc.n	800808a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e01b      	b.n	80080c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <prvInsertTimerInActiveList+0x7c>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3304      	adds	r3, #4
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f7fe f8c4 	bl	8006222 <vListInsert>
 800809a:	e012      	b.n	80080c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d206      	bcs.n	80080b2 <prvInsertTimerInActiveList+0x62>
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d302      	bcc.n	80080b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e007      	b.n	80080c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080b2:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <prvInsertTimerInActiveList+0x80>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fe f8b0 	bl	8006222 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080c2:	697b      	ldr	r3, [r7, #20]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000994 	.word	0x20000994
 80080d0:	20000990 	.word	0x20000990

080080d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080da:	e099      	b.n	8008210 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da17      	bge.n	8008112 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	3304      	adds	r3, #4
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <prvProcessReceivedCommands+0x2e>
 80080ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	e7fe      	b.n	8008100 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008108:	6850      	ldr	r0, [r2, #4]
 800810a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810c:	6892      	ldr	r2, [r2, #8]
 800810e:	4611      	mov	r1, r2
 8008110:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	db7a      	blt.n	800820e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	3304      	adds	r3, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe f8b3 	bl	8006294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800812e:	463b      	mov	r3, r7
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff ff6d 	bl	8008010 <prvSampleTimeNow>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b09      	cmp	r3, #9
 800813c:	d868      	bhi.n	8008210 <prvProcessReceivedCommands+0x13c>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <prvProcessReceivedCommands+0x70>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	0800816d 	.word	0x0800816d
 8008148:	0800816d 	.word	0x0800816d
 800814c:	0800816d 	.word	0x0800816d
 8008150:	08008211 	.word	0x08008211
 8008154:	080081c7 	.word	0x080081c7
 8008158:	080081fd 	.word	0x080081fd
 800815c:	0800816d 	.word	0x0800816d
 8008160:	0800816d 	.word	0x0800816d
 8008164:	08008211 	.word	0x08008211
 8008168:	080081c7 	.word	0x080081c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	18d1      	adds	r1, r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817a:	f7ff ff69 	bl	8008050 <prvInsertTimerInActiveList>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d045      	beq.n	8008210 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d13d      	bne.n	8008210 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	441a      	add	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2300      	movs	r3, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a6:	f7ff fe23 	bl	8007df0 <xTimerGenericCommand>
 80081aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d12e      	bne.n	8008210 <prvProcessReceivedCommands+0x13c>
 80081b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	61bb      	str	r3, [r7, #24]
 80081c4:	e7fe      	b.n	80081c4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d109      	bne.n	80081e8 <prvProcessReceivedCommands+0x114>
 80081d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	e7fe      	b.n	80081e6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	18d1      	adds	r1, r2, r3
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f6:	f7ff ff2b 	bl	8008050 <prvInsertTimerInActiveList>
					break;
 80081fa:	e009      	b.n	8008210 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f000 fbd4 	bl	80089b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800820c:	e000      	b.n	8008210 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800820e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <prvProcessReceivedCommands+0x15c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	1d39      	adds	r1, r7, #4
 8008216:	2200      	movs	r2, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fb29 	bl	8006870 <xQueueReceive>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f af5b 	bne.w	80080dc <prvProcessReceivedCommands+0x8>
	}
}
 8008226:	bf00      	nop
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000998 	.word	0x20000998

08008234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800823a:	e044      	b.n	80082c6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800823c:	4b2b      	ldr	r3, [pc, #172]	; (80082ec <prvSwitchTimerLists+0xb8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008246:	4b29      	ldr	r3, [pc, #164]	; (80082ec <prvSwitchTimerLists+0xb8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe f81d 	bl	8006294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d12d      	bne.n	80082c6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4413      	add	r3, r2
 8008272:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	429a      	cmp	r2, r3
 800827a:	d90e      	bls.n	800829a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008288:	4b18      	ldr	r3, [pc, #96]	; (80082ec <prvSwitchTimerLists+0xb8>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fd ffc5 	bl	8006222 <vListInsert>
 8008298:	e015      	b.n	80082c6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800829a:	2300      	movs	r3, #0
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fda3 	bl	8007df0 <xTimerGenericCommand>
 80082aa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <prvSwitchTimerLists+0x92>
 80082b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	e7fe      	b.n	80082c4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <prvSwitchTimerLists+0xb8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1b5      	bne.n	800823c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <prvSwitchTimerLists+0xb8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <prvSwitchTimerLists+0xbc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a04      	ldr	r2, [pc, #16]	; (80082ec <prvSwitchTimerLists+0xb8>)
 80082dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082de:	4a04      	ldr	r2, [pc, #16]	; (80082f0 <prvSwitchTimerLists+0xbc>)
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000990 	.word	0x20000990
 80082f0:	20000994 	.word	0x20000994

080082f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082fa:	f000 f97f 	bl	80085fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082fe:	4b15      	ldr	r3, [pc, #84]	; (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d120      	bne.n	8008348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008306:	4814      	ldr	r0, [pc, #80]	; (8008358 <prvCheckForValidListAndQueue+0x64>)
 8008308:	f7fd ff3a 	bl	8006180 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800830c:	4813      	ldr	r0, [pc, #76]	; (800835c <prvCheckForValidListAndQueue+0x68>)
 800830e:	f7fd ff37 	bl	8006180 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008312:	4b13      	ldr	r3, [pc, #76]	; (8008360 <prvCheckForValidListAndQueue+0x6c>)
 8008314:	4a10      	ldr	r2, [pc, #64]	; (8008358 <prvCheckForValidListAndQueue+0x64>)
 8008316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008318:	4b12      	ldr	r3, [pc, #72]	; (8008364 <prvCheckForValidListAndQueue+0x70>)
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <prvCheckForValidListAndQueue+0x68>)
 800831c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4b11      	ldr	r3, [pc, #68]	; (8008368 <prvCheckForValidListAndQueue+0x74>)
 8008324:	4a11      	ldr	r2, [pc, #68]	; (800836c <prvCheckForValidListAndQueue+0x78>)
 8008326:	2110      	movs	r1, #16
 8008328:	200a      	movs	r0, #10
 800832a:	f7fe f845 	bl	80063b8 <xQueueGenericCreateStatic>
 800832e:	4602      	mov	r2, r0
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008332:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <prvCheckForValidListAndQueue+0x60>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <prvCheckForValidListAndQueue+0x60>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	490b      	ldr	r1, [pc, #44]	; (8008370 <prvCheckForValidListAndQueue+0x7c>)
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fcfe 	bl	8006d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f000 f986 	bl	8008658 <vPortExitCritical>
}
 800834c:	bf00      	nop
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000998 	.word	0x20000998
 8008358:	20000968 	.word	0x20000968
 800835c:	2000097c 	.word	0x2000097c
 8008360:	20000990 	.word	0x20000990
 8008364:	20000994 	.word	0x20000994
 8008368:	20000a44 	.word	0x20000a44
 800836c:	200009a4 	.word	0x200009a4
 8008370:	08009690 	.word	0x08009690

08008374 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	; 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008382:	f06f 0301 	mvn.w	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <xTimerPendFunctionCallFromISR+0x3c>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	f107 0114 	add.w	r1, r7, #20
 800839c:	2300      	movs	r3, #0
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	f7fe f9d2 	bl	8006748 <xQueueGenericSendFromISR>
 80083a4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3728      	adds	r7, #40	; 0x28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000998 	.word	0x20000998

080083b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3b04      	subs	r3, #4
 80083c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3b04      	subs	r3, #4
 80083d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f023 0201 	bic.w	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b04      	subs	r3, #4
 80083e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083e4:	4a0c      	ldr	r2, [pc, #48]	; (8008418 <pxPortInitialiseStack+0x64>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3b14      	subs	r3, #20
 80083ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3b04      	subs	r3, #4
 80083fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f06f 0202 	mvn.w	r2, #2
 8008402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3b20      	subs	r3, #32
 8008408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800840a:	68fb      	ldr	r3, [r7, #12]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	0800841d 	.word	0x0800841d

0800841c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <prvTaskExitError+0x50>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d009      	beq.n	8008444 <prvTaskExitError+0x28>
 8008430:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	e7fe      	b.n	8008442 <prvTaskExitError+0x26>
 8008444:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008456:	bf00      	nop
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0fc      	beq.n	8008458 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	200000e8 	.word	0x200000e8

08008470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <pxCurrentTCBConst2>)
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	f380 8809 	msr	PSP, r0
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8811 	msr	BASEPRI, r0
 800848a:	4770      	bx	lr
 800848c:	f3af 8000 	nop.w

08008490 <pxCurrentTCBConst2>:
 8008490:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop

08008498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008498:	4808      	ldr	r0, [pc, #32]	; (80084bc <prvPortStartFirstTask+0x24>)
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	6800      	ldr	r0, [r0, #0]
 800849e:	f380 8808 	msr	MSP, r0
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f380 8814 	msr	CONTROL, r0
 80084aa:	b662      	cpsie	i
 80084ac:	b661      	cpsie	f
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	df00      	svc	0
 80084b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ba:	bf00      	nop
 80084bc:	e000ed08 	.word	0xe000ed08

080084c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084c6:	4b44      	ldr	r3, [pc, #272]	; (80085d8 <xPortStartScheduler+0x118>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a44      	ldr	r2, [pc, #272]	; (80085dc <xPortStartScheduler+0x11c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d109      	bne.n	80084e4 <xPortStartScheduler+0x24>
 80084d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	e7fe      	b.n	80084e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084e4:	4b3c      	ldr	r3, [pc, #240]	; (80085d8 <xPortStartScheduler+0x118>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a3d      	ldr	r2, [pc, #244]	; (80085e0 <xPortStartScheduler+0x120>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d109      	bne.n	8008502 <xPortStartScheduler+0x42>
 80084ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e7fe      	b.n	8008500 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008502:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <xPortStartScheduler+0x124>)
 8008504:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	22ff      	movs	r2, #255	; 0xff
 8008512:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008524:	b2da      	uxtb	r2, r3
 8008526:	4b30      	ldr	r3, [pc, #192]	; (80085e8 <xPortStartScheduler+0x128>)
 8008528:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800852a:	4b30      	ldr	r3, [pc, #192]	; (80085ec <xPortStartScheduler+0x12c>)
 800852c:	2207      	movs	r2, #7
 800852e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008530:	e009      	b.n	8008546 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <xPortStartScheduler+0x12c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3b01      	subs	r3, #1
 8008538:	4a2c      	ldr	r2, [pc, #176]	; (80085ec <xPortStartScheduler+0x12c>)
 800853a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	b2db      	uxtb	r3, r3
 8008544:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d0ef      	beq.n	8008532 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008552:	4b26      	ldr	r3, [pc, #152]	; (80085ec <xPortStartScheduler+0x12c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f1c3 0307 	rsb	r3, r3, #7
 800855a:	2b04      	cmp	r3, #4
 800855c:	d009      	beq.n	8008572 <xPortStartScheduler+0xb2>
 800855e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	60bb      	str	r3, [r7, #8]
 8008570:	e7fe      	b.n	8008570 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008572:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <xPortStartScheduler+0x12c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <xPortStartScheduler+0x12c>)
 800857a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800857c:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <xPortStartScheduler+0x12c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008584:	4a19      	ldr	r2, [pc, #100]	; (80085ec <xPortStartScheduler+0x12c>)
 8008586:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008590:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <xPortStartScheduler+0x130>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a16      	ldr	r2, [pc, #88]	; (80085f0 <xPortStartScheduler+0x130>)
 8008596:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800859a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800859c:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <xPortStartScheduler+0x130>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <xPortStartScheduler+0x130>)
 80085a2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80085a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085a8:	f000 f8d6 	bl	8008758 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <xPortStartScheduler+0x134>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085b2:	f000 f8f5 	bl	80087a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085b6:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <xPortStartScheduler+0x138>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a0f      	ldr	r2, [pc, #60]	; (80085f8 <xPortStartScheduler+0x138>)
 80085bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085c2:	f7ff ff69 	bl	8008498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085c6:	f7fe ffad 	bl	8007524 <vTaskSwitchContext>
	prvTaskExitError();
 80085ca:	f7ff ff27 	bl	800841c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed00 	.word	0xe000ed00
 80085dc:	410fc271 	.word	0x410fc271
 80085e0:	410fc270 	.word	0x410fc270
 80085e4:	e000e400 	.word	0xe000e400
 80085e8:	20000a8c 	.word	0x20000a8c
 80085ec:	20000a90 	.word	0x20000a90
 80085f0:	e000ed20 	.word	0xe000ed20
 80085f4:	200000e8 	.word	0x200000e8
 80085f8:	e000ef34 	.word	0xe000ef34

080085fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008614:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <vPortEnterCritical+0x54>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3301      	adds	r3, #1
 800861a:	4a0d      	ldr	r2, [pc, #52]	; (8008650 <vPortEnterCritical+0x54>)
 800861c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800861e:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <vPortEnterCritical+0x54>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10e      	bne.n	8008644 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <vPortEnterCritical+0x58>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <vPortEnterCritical+0x48>
 8008630:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	e7fe      	b.n	8008642 <vPortEnterCritical+0x46>
	}
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	200000e8 	.word	0x200000e8
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <vPortExitCritical+0x4c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <vPortExitCritical+0x22>
 8008666:	f04f 0330 	mov.w	r3, #48	; 0x30
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	e7fe      	b.n	8008678 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <vPortExitCritical+0x4c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3b01      	subs	r3, #1
 8008680:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <vPortExitCritical+0x4c>)
 8008682:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <vPortExitCritical+0x4c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <vPortExitCritical+0x3e>
 800868c:	2300      	movs	r3, #0
 800868e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	200000e8 	.word	0x200000e8
	...

080086b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086b0:	f3ef 8009 	mrs	r0, PSP
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4b15      	ldr	r3, [pc, #84]	; (8008710 <pxCurrentTCBConst>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f01e 0f10 	tst.w	lr, #16
 80086c0:	bf08      	it	eq
 80086c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086d0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80086d4:	f380 8811 	msr	BASEPRI, r0
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f7fe ff20 	bl	8007524 <vTaskSwitchContext>
 80086e4:	f04f 0000 	mov.w	r0, #0
 80086e8:	f380 8811 	msr	BASEPRI, r0
 80086ec:	bc09      	pop	{r0, r3}
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	f01e 0f10 	tst.w	lr, #16
 80086fa:	bf08      	it	eq
 80086fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008700:	f380 8809 	msr	PSP, r0
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst>:
 8008710:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
	__asm volatile
 800871e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008730:	f7fe fe3c 	bl	80073ac <xTaskIncrementTick>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <SysTick_Handler+0x3c>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <vPortSetupTimerInterrupt+0x34>)
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <vPortSetupTimerInterrupt+0x38>)
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <vPortSetupTimerInterrupt+0x3c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a0a      	ldr	r2, [pc, #40]	; (8008798 <vPortSetupTimerInterrupt+0x40>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	099b      	lsrs	r3, r3, #6
 8008774:	4a09      	ldr	r2, [pc, #36]	; (800879c <vPortSetupTimerInterrupt+0x44>)
 8008776:	3b01      	subs	r3, #1
 8008778:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <vPortSetupTimerInterrupt+0x34>)
 800877c:	2207      	movs	r2, #7
 800877e:	601a      	str	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	e000e010 	.word	0xe000e010
 8008790:	e000e018 	.word	0xe000e018
 8008794:	200000dc 	.word	0x200000dc
 8008798:	10624dd3 	.word	0x10624dd3
 800879c:	e000e014 	.word	0xe000e014

080087a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087b0 <vPortEnableVFP+0x10>
 80087a4:	6801      	ldr	r1, [r0, #0]
 80087a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087aa:	6001      	str	r1, [r0, #0]
 80087ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087ae:	bf00      	nop
 80087b0:	e000ed88 	.word	0xe000ed88

080087b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087ba:	f3ef 8305 	mrs	r3, IPSR
 80087be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d913      	bls.n	80087ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <vPortValidateInterruptPriority+0x6c>)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087d0:	4b14      	ldr	r3, [pc, #80]	; (8008824 <vPortValidateInterruptPriority+0x70>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	7afa      	ldrb	r2, [r7, #11]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d209      	bcs.n	80087ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80087da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	607b      	str	r3, [r7, #4]
 80087ec:	e7fe      	b.n	80087ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087ee:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <vPortValidateInterruptPriority+0x74>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <vPortValidateInterruptPriority+0x78>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d909      	bls.n	8008812 <vPortValidateInterruptPriority+0x5e>
 80087fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	e7fe      	b.n	8008810 <vPortValidateInterruptPriority+0x5c>
	}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000e3f0 	.word	0xe000e3f0
 8008824:	20000a8c 	.word	0x20000a8c
 8008828:	e000ed0c 	.word	0xe000ed0c
 800882c:	20000a90 	.word	0x20000a90

08008830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800883c:	f7fe fcfc 	bl	8007238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008840:	4b57      	ldr	r3, [pc, #348]	; (80089a0 <pvPortMalloc+0x170>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008848:	f000 f90c 	bl	8008a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800884c:	4b55      	ldr	r3, [pc, #340]	; (80089a4 <pvPortMalloc+0x174>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 808c 	bne.w	8008972 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01c      	beq.n	800889a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008860:	2208      	movs	r2, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d013      	beq.n	800889a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	3308      	adds	r3, #8
 800887a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <pvPortMalloc+0x6a>
 8008886:	f04f 0330 	mov.w	r3, #48	; 0x30
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e7fe      	b.n	8008898 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d068      	beq.n	8008972 <pvPortMalloc+0x142>
 80088a0:	4b41      	ldr	r3, [pc, #260]	; (80089a8 <pvPortMalloc+0x178>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d863      	bhi.n	8008972 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088aa:	4b40      	ldr	r3, [pc, #256]	; (80089ac <pvPortMalloc+0x17c>)
 80088ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ae:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <pvPortMalloc+0x17c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b4:	e004      	b.n	80088c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d903      	bls.n	80088d2 <pvPortMalloc+0xa2>
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f1      	bne.n	80088b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088d2:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <pvPortMalloc+0x170>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	429a      	cmp	r2, r3
 80088da:	d04a      	beq.n	8008972 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	4413      	add	r3, r2
 80088e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	1ad2      	subs	r2, r2, r3
 80088f6:	2308      	movs	r3, #8
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d91e      	bls.n	800893c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4413      	add	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <pvPortMalloc+0xf4>
 8008910:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	e7fe      	b.n	8008922 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008936:	69b8      	ldr	r0, [r7, #24]
 8008938:	f000 f8f6 	bl	8008b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <pvPortMalloc+0x178>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <pvPortMalloc+0x178>)
 8008948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <pvPortMalloc+0x178>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <pvPortMalloc+0x180>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d203      	bcs.n	800895e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <pvPortMalloc+0x178>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <pvPortMalloc+0x180>)
 800895c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <pvPortMalloc+0x174>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	431a      	orrs	r2, r3
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008972:	f7fe fc6f 	bl	8007254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <pvPortMalloc+0x164>
 8008980:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	e7fe      	b.n	8008992 <pvPortMalloc+0x162>
	return pvReturn;
 8008994:	69fb      	ldr	r3, [r7, #28]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3728      	adds	r7, #40	; 0x28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	2000169c 	.word	0x2000169c
 80089a4:	200016a8 	.word	0x200016a8
 80089a8:	200016a0 	.word	0x200016a0
 80089ac:	20001694 	.word	0x20001694
 80089b0:	200016a4 	.word	0x200016a4

080089b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d046      	beq.n	8008a54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089c6:	2308      	movs	r3, #8
 80089c8:	425b      	negs	r3, r3
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <vPortFree+0xa8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4013      	ands	r3, r2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <vPortFree+0x42>
 80089e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e7fe      	b.n	80089f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <vPortFree+0x5e>
 80089fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	e7fe      	b.n	8008a10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <vPortFree+0xa8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d019      	beq.n	8008a54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d115      	bne.n	8008a54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <vPortFree+0xa8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	401a      	ands	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a38:	f7fe fbfe 	bl	8007238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <vPortFree+0xac>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4413      	add	r3, r2
 8008a46:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vPortFree+0xac>)
 8008a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a4a:	6938      	ldr	r0, [r7, #16]
 8008a4c:	f000 f86c 	bl	8008b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a50:	f7fe fc00 	bl	8007254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a54:	bf00      	nop
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	200016a8 	.word	0x200016a8
 8008a60:	200016a0 	.word	0x200016a0

08008a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a70:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <prvHeapInit+0xac>)
 8008a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <prvHeapInit+0xac>)
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <prvHeapInit+0xb0>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <prvHeapInit+0xb0>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <prvHeapInit+0xb4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <prvHeapInit+0xb4>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <prvHeapInit+0xb8>)
 8008af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <prvHeapInit+0xbc>)
 8008afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008afc:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <prvHeapInit+0xc0>)
 8008afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20000a94 	.word	0x20000a94
 8008b14:	20001694 	.word	0x20001694
 8008b18:	2000169c 	.word	0x2000169c
 8008b1c:	200016a4 	.word	0x200016a4
 8008b20:	200016a0 	.word	0x200016a0
 8008b24:	200016a8 	.word	0x200016a8

08008b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <prvInsertBlockIntoFreeList+0xac>)
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e002      	b.n	8008b3c <prvInsertBlockIntoFreeList+0x14>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d8f7      	bhi.n	8008b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d108      	bne.n	8008b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	441a      	add	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d118      	bne.n	8008bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d00d      	beq.n	8008ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e008      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	e003      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d002      	beq.n	8008bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20001694 	.word	0x20001694
 8008bd8:	2000169c 	.word	0x2000169c

08008bdc <find_cmd>:
 * directory for more details.
 */

#include "../../inc/find/find_internal.h"

dbase_record_t * find_cmd (const char * message) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	static char msg [PARSER_PATTERN_MAX_LEN_DEFAULT] = {0};

	uint16_t len = strlen(message);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7f7 fafd 	bl	80001e4 <strlen>
 8008bea:	4603      	mov	r3, r0
 8008bec:	81fb      	strh	r3, [r7, #14]
	strncpy(msg, message, len);
 8008bee:	89fb      	ldrh	r3, [r7, #14]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	480a      	ldr	r0, [pc, #40]	; (8008c20 <find_cmd+0x44>)
 8008bf6:	f000 fc56 	bl	80094a6 <strncpy>
	if (len < PARSER_PATTERN_MAX_LEN_DEFAULT) {
 8008bfa:	89fb      	ldrh	r3, [r7, #14]
 8008bfc:	2b63      	cmp	r3, #99	; 0x63
 8008bfe:	d803      	bhi.n	8008c08 <find_cmd+0x2c>
		msg[len] = '\0';
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	4a07      	ldr	r2, [pc, #28]	; (8008c20 <find_cmd+0x44>)
 8008c04:	2100      	movs	r1, #0
 8008c06:	54d1      	strb	r1, [r2, r3]
	}
	return dbase_table_find(parser_command_dbase(), msg);
 8008c08:	f000 fa2e 	bl	8009068 <parser_command_dbase>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	4904      	ldr	r1, [pc, #16]	; (8008c20 <find_cmd+0x44>)
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 f8d7 	bl	8008dc4 <dbase_table_find>
 8008c16:	4603      	mov	r3, r0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	200016ac 	.word	0x200016ac

08008c24 <is_delimeter>:


#define EXTRACT_MSG_MAX_SIZE 100 //parser_pattern_max_len


bool is_delimeter (char symbol) {
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
	return (symbol == ' ' || symbol == '\t' || symbol == '\0');
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	2b20      	cmp	r3, #32
 8008c32:	d005      	beq.n	8008c40 <is_delimeter+0x1c>
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d002      	beq.n	8008c40 <is_delimeter+0x1c>
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <is_delimeter+0x20>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <is_delimeter+0x22>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	b2db      	uxtb	r3, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <extraction_possible>:


static inline bool extraction_possible (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008c58:	b590      	push	{r4, r7, lr}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	807b      	strh	r3, [r7, #2]
 8008c64:	4613      	mov	r3, r2
 8008c66:	803b      	strh	r3, [r7, #0]
	register int msg_len = strlen(message);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f7 fabb 	bl	80001e4 <strlen>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461c      	mov	r4, r3

	bool
		pos_in_message = from_here < msg_len,
 8008c72:	887b      	ldrh	r3, [r7, #2]
 8008c74:	429c      	cmp	r4, r3
 8008c76:	bfcc      	ite	gt
 8008c78:	2301      	movgt	r3, #1
 8008c7a:	2300      	movle	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
		cmd_in_message = cmd_len <= msg_len,
 8008c7e:	883b      	ldrh	r3, [r7, #0]
 8008c80:	429c      	cmp	r4, r3
 8008c82:	bfac      	ite	ge
 8008c84:	2301      	movge	r3, #1
 8008c86:	2300      	movlt	r3, #0
 8008c88:	73bb      	strb	r3, [r7, #14]
		sym_not_delimeter = is_delimeter(message[from_here + cmd_len]);
 8008c8a:	887a      	ldrh	r2, [r7, #2]
 8008c8c:	883b      	ldrh	r3, [r7, #0]
 8008c8e:	4413      	add	r3, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff ffc3 	bl	8008c24 <is_delimeter>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	737b      	strb	r3, [r7, #13]

	return
		pos_in_message &&
		cmd_in_message &&
		sym_not_delimeter &&
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <extraction_possible+0x66>
		pos_in_message &&
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <extraction_possible+0x66>
		cmd_in_message &&
 8008cae:	7b7b      	ldrb	r3, [r7, #13]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <extraction_possible+0x66>
		sym_not_delimeter &&
 8008cb4:	883b      	ldrh	r3, [r7, #0]
 8008cb6:	2b63      	cmp	r3, #99	; 0x63
 8008cb8:	d801      	bhi.n	8008cbe <extraction_possible+0x66>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <extraction_possible+0x68>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	b2db      	uxtb	r3, r3
		(cmd_len < EXTRACT_MSG_MAX_SIZE);
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd90      	pop	{r4, r7, pc}
	...

08008cd0 <extract_pattern>:
// 		cmd_len <= msg_len &&
// 		cmd_len < EXTRACT_MSG_MAX_SIZE &&
// 		is_delimeter(message[from_here + cmd_len])
// 	;
// }
char * extract_pattern (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	803b      	strh	r3, [r7, #0]
	static char pattern [EXTRACT_MSG_MAX_SIZE] = {0};
	*pattern = '\0';
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <extract_pattern+0x50>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]

	if (extraction_possible(message, from_here, cmd_len)) {
 8008ce6:	883a      	ldrh	r2, [r7, #0]
 8008ce8:	887b      	ldrh	r3, [r7, #2]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff ffb3 	bl	8008c58 <extraction_possible>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00d      	beq.n	8008d14 <extract_pattern+0x44>
		strncpy(pattern, &message[from_here], cmd_len);
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	883a      	ldrh	r2, [r7, #0]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4807      	ldr	r0, [pc, #28]	; (8008d20 <extract_pattern+0x50>)
 8008d04:	f000 fbcf 	bl	80094a6 <strncpy>
		pattern[from_here + cmd_len] = '\0';
 8008d08:	887a      	ldrh	r2, [r7, #2]
 8008d0a:	883b      	ldrh	r3, [r7, #0]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	4a04      	ldr	r2, [pc, #16]	; (8008d20 <extract_pattern+0x50>)
 8008d10:	2100      	movs	r1, #0
 8008d12:	54d1      	strb	r1, [r2, r3]
	}

	return pattern;
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <extract_pattern+0x50>)
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001710 	.word	0x20001710

08008d24 <free_spaces>:

char * free_spaces (char * source) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	char * delimeters = {" \t"};
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <free_spaces+0x28>)
 8008d2e:	60fb      	str	r3, [r7, #12]
	int del_quantity = strspn(source, delimeters);
 8008d30:	68f9      	ldr	r1, [r7, #12]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fbcc 	bl	80094d0 <strspn>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	60bb      	str	r3, [r7, #8]
    return (source + del_quantity);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	4413      	add	r3, r2
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009698 	.word	0x08009698

08008d50 <extract_pattern_from_start>:


static inline char * extract_pattern_from_start (char * string, uint16_t pattern_len) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	807b      	strh	r3, [r7, #2]
	return extract_pattern(string, 0, pattern_len);
 8008d5c:	887b      	ldrh	r3, [r7, #2]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	2100      	movs	r1, #0
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffb4 	bl	8008cd0 <extract_pattern>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <pattern_matched>:

static inline bool pattern_matched (char * pattern, char * template) {
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
	return !strcmp(pattern, template);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f7 fa26 	bl	80001d0 <strcmp>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf0c      	ite	eq
 8008d8a:	2301      	moveq	r3, #1
 8008d8c:	2300      	movne	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <message_payload_continue>:

static inline bool message_payload_continue (char * message) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	return strlen(free_spaces(message));
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff ffbf 	bl	8008d24 <free_spaces>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 fa1b 	bl	80001e4 <strlen>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <dbase_table_find>:


dbase_record_t * dbase_table_find (dbase_table_t table, char * message) {
 8008dc4:	b590      	push	{r4, r7, lr}
 8008dc6:	b089      	sub	sp, #36	; 0x24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	static uint16_t record;	
	static bool not_found;

	not_found = true;
 8008dce:	4b45      	ldr	r3, [pc, #276]	; (8008ee4 <dbase_table_find+0x120>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	701a      	strb	r2, [r3, #0]
	record = 0;
 8008dd4:	4b44      	ldr	r3, [pc, #272]	; (8008ee8 <dbase_table_find+0x124>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	801a      	strh	r2, [r3, #0]

	while (table[record].command) {
 8008dda:	e067      	b.n	8008eac <dbase_table_find+0xe8>
		char * command = table[record].command;
 8008ddc:	4b42      	ldr	r3, [pc, #264]	; (8008ee8 <dbase_table_find+0x124>)
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4413      	add	r3, r2
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	61fb      	str	r3, [r7, #28]
		int cmd_len = strlen(command);
 8008df4:	69f8      	ldr	r0, [r7, #28]
 8008df6:	f7f7 f9f5 	bl	80001e4 <strlen>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	61bb      	str	r3, [r7, #24]
		char
			* msg_after_spaces = free_spaces(message),
 8008dfe:	6838      	ldr	r0, [r7, #0]
 8008e00:	f7ff ff90 	bl	8008d24 <free_spaces>
 8008e04:	6178      	str	r0, [r7, #20]
			* pattern = extract_pattern_from_start(msg_after_spaces, cmd_len);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6978      	ldr	r0, [r7, #20]
 8008e0e:	f7ff ff9f 	bl	8008d50 <extract_pattern_from_start>
 8008e12:	6138      	str	r0, [r7, #16]

		if (pattern_matched(pattern, command)) {
 8008e14:	69f9      	ldr	r1, [r7, #28]
 8008e16:	6938      	ldr	r0, [r7, #16]
 8008e18:	f7ff ffab 	bl	8008d72 <pattern_matched>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d03a      	beq.n	8008e98 <dbase_table_find+0xd4>
			dbase_record_t * sub_table = table[record].subcommand;
 8008e22:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <dbase_table_find+0x124>)
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	461a      	mov	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	60fb      	str	r3, [r7, #12]
			register char * msg_after_pattern = msg_after_spaces + cmd_len;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	18d4      	adds	r4, r2, r3

			if (sub_table || message_payload_continue(msg_after_pattern)) {
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d105      	bne.n	8008e52 <dbase_table_find+0x8e>
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7ff ffa6 	bl	8008d98 <message_payload_continue>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01e      	beq.n	8008e90 <dbase_table_find+0xcc>
				if (sub_table == NULL) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d115      	bne.n	8008e84 <dbase_table_find+0xc0>
					 table[record].parameter = msg_after_pattern;
 8008e58:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <dbase_table_find+0x124>)
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	609c      	str	r4, [r3, #8]
					return &table[record];
 8008e6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <dbase_table_find+0x124>)
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4413      	add	r3, r2
 8008e82:	e02a      	b.n	8008eda <dbase_table_find+0x116>
				}
				return dbase_table_find(sub_table, msg_after_pattern);
 8008e84:	4621      	mov	r1, r4
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff ff9c 	bl	8008dc4 <dbase_table_find>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	e024      	b.n	8008eda <dbase_table_find+0x116>
			}
			else { // sub-pattern matched (record was found)
				not_found = false;
 8008e90:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <dbase_table_find+0x120>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
				break;
 8008e96:	e016      	b.n	8008ec6 <dbase_table_find+0x102>
			}
		}
		else if (not_found) { // look at next record
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <dbase_table_find+0x120>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <dbase_table_find+0xe8>
			record++;
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <dbase_table_find+0x124>)
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <dbase_table_find+0x124>)
 8008eaa:	801a      	strh	r2, [r3, #0]
	while (table[record].command) {
 8008eac:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <dbase_table_find+0x124>)
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d18a      	bne.n	8008ddc <dbase_table_find+0x18>
		}
	}
	return &table[record];
 8008ec6:	4b08      	ldr	r3, [pc, #32]	; (8008ee8 <dbase_table_find+0x124>)
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4413      	add	r3, r2
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3724      	adds	r7, #36	; 0x24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd90      	pop	{r4, r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20001774 	.word	0x20001774
 8008ee8:	20001776 	.word	0x20001776

08008eec <get_for_voltage_cut_off>:
#include "measurements_internal.h"

char * get_for_voltage_cut_off (void) {
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
	//return some_voltage_pointer
}
 8008ef0:	bf00      	nop
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <get_for_charge_current>:

char * get_for_charge_current (void) {
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
	//return some_current_pointer
 8008f00:	bf00      	nop
 8008f02:	4618      	mov	r0, r3
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <parser_create>:
6. find function returns found cell address.
7. when not enough cells found find function returns a stub
   empty-body function and "invalid  syntax" response.
*/

void parser_create (command_dbase_t cmd_dbase, int pattern_max_len) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	parser_set_command_dbase((dbase_record_t **)cmd_dbase);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f866 	bl	8008fe8 <parser_set_command_dbase>
	parser_set_pattern_max_len(pattern_max_len);
 8008f1c:	6838      	ldr	r0, [r7, #0]
 8008f1e:	f000 f853 	bl	8008fc8 <parser_set_pattern_max_len>
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <parse>:
void parser_delete (void) {
	parser_set_command_dbase(NULL);
	parser_set_pattern_max_len(0);
}

void parse (const char * user_message) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	dbase_record_t * command = _parser(user_message);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f8c7 	bl	80090c8 <_parser>
 8008f3a:	60f8      	str	r0, [r7, #12]
	parser_set_response(command->response ?
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <parse+0x1e>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	e000      	b.n	8008f4c <parse+0x20>
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <parse+0x54>)
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f85b 	bl	8009008 <parser_set_response>
		command->response :
		PARSER_RESPONSE_STUB
	);
	parser_set_action(command->action ?
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <parse+0x34>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	e002      	b.n	8008f66 <parse+0x3a>
 8008f60:	f000 f81e 	bl	8008fa0 <parser_stub_action>
 8008f64:	4603      	mov	r3, r0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f85e 	bl	8009028 <parser_set_action>
		command->action :
		parser_stub_action()
	);
	parser_set_parameter(command->parameter);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f869 	bl	8009048 <parser_set_parameter>
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	0800969c 	.word	0x0800969c

08008f84 <parser_not_found>:
}

action_t parser_stub_action (void);
dbase_record_t * parser_empty_cmd_dbase (void);

static inline dbase_record_t * parser_not_found (void) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
	return parser_empty_cmd_dbase();
 8008f88:	f000 f814 	bl	8008fb4 <parser_empty_cmd_dbase>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <stub_action>:
 * directory for more details.
 */

#include "../../inc/parser/parser_internal.h"

static void stub_action (void) {
 8008f92:	b480      	push	{r7}
 8008f94:	af00      	add	r7, sp, #0

}
 8008f96:	bf00      	nop
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <parser_stub_action>:
action_t parser_stub_action (void) {
 8008fa0:	b480      	push	{r7}
 8008fa2:	af00      	add	r7, sp, #0
	return stub_action;
 8008fa4:	4b02      	ldr	r3, [pc, #8]	; (8008fb0 <parser_stub_action+0x10>)
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	08008f93 	.word	0x08008f93

08008fb4 <parser_empty_cmd_dbase>:
	.response = PARSER_RESPONSE_STUB,
	.action = stub_action,
	.subcommand = NULL
};

dbase_record_t * parser_empty_cmd_dbase (void) {
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
	return &_empty_cmd_dbase;
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <parser_empty_cmd_dbase+0x10>)
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200000ec 	.word	0x200000ec

08008fc8 <parser_set_pattern_max_len>:
static void (* _action) (void) = stub_action;
static char
	* _response = PARSER_RESPONSE_STUB,
	* _parameter = NULL;

void parser_set_pattern_max_len (int pattern_max_len) {
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	_pattern_max_len = pattern_max_len;
 8008fd0:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <parser_set_pattern_max_len+0x1c>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6013      	str	r3, [r2, #0]
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	2000177c 	.word	0x2000177c

08008fe8 <parser_set_command_dbase>:

void parser_set_command_dbase (dbase_record_t ** cmd_dbase) {
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	_command_dbase = (dbase_record_t *)cmd_dbase;
 8008ff0:	4a04      	ldr	r2, [pc, #16]	; (8009004 <parser_set_command_dbase+0x1c>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20001778 	.word	0x20001778

08009008 <parser_set_response>:

void parser_set_response (char * response) {
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	_response = response;
 8009010:	4a04      	ldr	r2, [pc, #16]	; (8009024 <parser_set_response+0x1c>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6013      	str	r3, [r2, #0]
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000104 	.word	0x20000104

08009028 <parser_set_action>:
void parser_set_action (void (* action)(void)) {
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	_action = action;
 8009030:	4a04      	ldr	r2, [pc, #16]	; (8009044 <parser_set_action+0x1c>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6013      	str	r3, [r2, #0]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000100 	.word	0x20000100

08009048 <parser_set_parameter>:
void parser_set_parameter (char * parameter) {
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	_parameter = parameter;
 8009050:	4a04      	ldr	r2, [pc, #16]	; (8009064 <parser_set_parameter+0x1c>)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6013      	str	r3, [r2, #0]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20001780 	.word	0x20001780

08009068 <parser_command_dbase>:

int parser_pattern_max_len (void) {
	return _pattern_max_len;
}
dbase_record_t * parser_command_dbase (void) {
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
	return _command_dbase;
 800906c:	4b03      	ldr	r3, [pc, #12]	; (800907c <parser_command_dbase+0x14>)
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20001778 	.word	0x20001778

08009080 <parser_response>:

char * parser_response (void) {
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
	return _response;
 8009084:	4b03      	ldr	r3, [pc, #12]	; (8009094 <parser_response+0x14>)
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000104 	.word	0x20000104

08009098 <parser_action>:
action_t parser_action (void) {
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
	return _action;
 800909c:	4b03      	ldr	r3, [pc, #12]	; (80090ac <parser_action+0x14>)
 800909e:	681b      	ldr	r3, [r3, #0]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000100 	.word	0x20000100

080090b0 <parser_parameter>:
char * parser_parameter (void) {
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
	return _parameter;
 80090b4:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <parser_parameter+0x14>)
 80090b6:	681b      	ldr	r3, [r3, #0]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20001780 	.word	0x20001780

080090c8 <_parser>:


dbase_record_t * _parser (const char * message) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	if (parser_command_dbase() == NULL)
 80090d0:	f7ff ffca 	bl	8009068 <parser_command_dbase>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <_parser+0x1a>
		return parser_empty_cmd_dbase();
 80090da:	f7ff ff6b 	bl	8008fb4 <parser_empty_cmd_dbase>
 80090de:	4603      	mov	r3, r0
 80090e0:	e00b      	b.n	80090fa <_parser+0x32>

	dbase_record_t * found_record = find_cmd(message);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fd7a 	bl	8008bdc <find_cmd>
 80090e8:	60f8      	str	r0, [r7, #12]

	if (found_record != NULL) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <_parser+0x2c>
		return found_record;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	e002      	b.n	80090fa <_parser+0x32>
	}

	return parser_not_found(); // must never occure
 80090f4:	f7ff ff46 	bl	8008f84 <parser_not_found>
 80090f8:	4603      	mov	r3, r0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <set_for_voltage_cut_off>:
#include "system_config_internal.h"

void set_for_voltage_cut_off (void) {
 8009102:	b480      	push	{r7}
 8009104:	af00      	add	r7, sp, #0
	//some_voltage_pointer = parser_parameter();
}
 8009106:	bf00      	nop
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <set_for_charge_current>:

void set_for_charge_current (void) {
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	//some_current_pointer = parser_parameter();
}
 8009114:	bf00      	nop
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <set_for_battery_type>:

void set_for_battery_type (void) {
 800911e:	b480      	push	{r7}
 8009120:	af00      	add	r7, sp, #0
	//some_type_pointer = parser_parameter();
}
 8009122:	bf00      	nop
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <get_for_battery_type>:
char * get_for_battery_type (void) {
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
	//return some_type_pointer
 8009130:	bf00      	nop
 8009132:	4618      	mov	r0, r3
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <save_data_from_set>:
#include "system_info_internal.h"

void save_data_from_set (void) {
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
	memory.parameter = parser_parameter();
 8009140:	f7ff ffb6 	bl	80090b0 <parser_parameter>
 8009144:	4602      	mov	r2, r0
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <save_data_from_set+0x28>)
 8009148:	601a      	str	r2, [r3, #0]
	memory.response = parser_response();
 800914a:	f7ff ff99 	bl	8009080 <parser_response>
 800914e:	4602      	mov	r2, r0
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <save_data_from_set+0x28>)
 8009152:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 8009154:	f7ff ffa0 	bl	8009098 <parser_action>
 8009158:	4602      	mov	r2, r0
 800915a:	4b02      	ldr	r3, [pc, #8]	; (8009164 <save_data_from_set+0x28>)
 800915c:	609a      	str	r2, [r3, #8]
}
 800915e:	bf00      	nop
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200019c0 	.word	0x200019c0

08009168 <save_data_from_get>:

void save_data_from_get (char * parameter) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	memory.parameter = parameter;
 8009170:	4a08      	ldr	r2, [pc, #32]	; (8009194 <save_data_from_get+0x2c>)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6013      	str	r3, [r2, #0]
	memory.response = parser_response();
 8009176:	f7ff ff83 	bl	8009080 <parser_response>
 800917a:	4602      	mov	r2, r0
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <save_data_from_get+0x2c>)
 800917e:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 8009180:	f7ff ff8a 	bl	8009098 <parser_action>
 8009184:	4602      	mov	r2, r0
 8009186:	4b03      	ldr	r3, [pc, #12]	; (8009194 <save_data_from_get+0x2c>)
 8009188:	609a      	str	r2, [r3, #8]
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200019c0 	.word	0x200019c0

08009198 <init_uart_data_transfer>:
uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA + 1] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0,
		tx_complete = true;

void init_uart_data_transfer (void) {
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
	uart_data_transfer_events = xEventGroupCreate();
 800919c:	f7fc fe54 	bl	8005e48 <xEventGroupCreate>
 80091a0:	4602      	mov	r2, r0
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <init_uart_data_transfer+0x34>)
 80091a4:	601a      	str	r2, [r3, #0]

	enable_idle_flag_interrupt = true;
 80091a6:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <init_uart_data_transfer+0x38>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <init_uart_data_transfer+0x3c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b08      	ldr	r3, [pc, #32]	; (80091d4 <init_uart_data_transfer+0x3c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0210 	orr.w	r2, r2, #16
 80091ba:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 80091bc:	2263      	movs	r2, #99	; 0x63
 80091be:	4906      	ldr	r1, [pc, #24]	; (80091d8 <init_uart_data_transfer+0x40>)
 80091c0:	4804      	ldr	r0, [pc, #16]	; (80091d4 <init_uart_data_transfer+0x3c>)
 80091c2:	f7fb fe01 	bl	8004dc8 <HAL_UART_Receive_DMA>
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200017e8 	.word	0x200017e8
 80091d0:	200017ec 	.word	0x200017ec
 80091d4:	20001a94 	.word	0x20001a94
 80091d8:	20001784 	.word	0x20001784

080091dc <event_group_set_bit_from_isr>:

void transmit_data_by_uart (void) {
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
}

void event_group_set_bit_from_isr (EventGroupHandle_t event_group, uint32_t bit_to_set) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]

	xResult = xEventGroupSetBitsFromISR (event_group, bit_to_set, & xHigherPriorityTaskWoken);
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	480b      	ldr	r0, [pc, #44]	; (8009220 <event_group_set_bit_from_isr+0x44>)
 80091f4:	f7ff f8be 	bl	8008374 <xTimerPendFunctionCallFromISR>
 80091f8:	60f8      	str	r0, [r7, #12]

	if (xResult != pdFAIL) {
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <event_group_set_bit_from_isr+0x3a>
	  portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <event_group_set_bit_from_isr+0x3a>
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <event_group_set_bit_from_isr+0x48>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
	}
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	08006123 	.word	0x08006123
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a24      	ldr	r2, [pc, #144]	; (80092c8 <HAL_UART_IDLE_Callback+0xa0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d142      	bne.n	80092c0 <HAL_UART_IDLE_Callback+0x98>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2210      	movs	r2, #16
 8009240:	621a      	str	r2, [r3, #32]

		if(enable_idle_flag_interrupt){
 8009242:	4b22      	ldr	r3, [pc, #136]	; (80092cc <HAL_UART_IDLE_Callback+0xa4>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <HAL_UART_IDLE_Callback+0x2a>
			enable_idle_flag_interrupt = false;
 800924a:	4b20      	ldr	r3, [pc, #128]	; (80092cc <HAL_UART_IDLE_Callback+0xa4>)
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
			return;
 8009250:	e036      	b.n	80092c0 <HAL_UART_IDLE_Callback+0x98>
		}

		uint8_t command_len = strlen((const char *)rx_uart_data);
 8009252:	481f      	ldr	r0, [pc, #124]	; (80092d0 <HAL_UART_IDLE_Callback+0xa8>)
 8009254:	f7f6 ffc6 	bl	80001e4 <strlen>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
		if (rx_uart_data[command_len - 1] != '\r')
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	3b01      	subs	r3, #1
 8009260:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <HAL_UART_IDLE_Callback+0xa8>)
 8009262:	5cd3      	ldrb	r3, [r2, r3]
 8009264:	2b0d      	cmp	r3, #13
 8009266:	d126      	bne.n	80092b6 <HAL_UART_IDLE_Callback+0x8e>
			return;
		rx_uart_data[command_len - 1] = '\0';
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	3b01      	subs	r3, #1
 800926c:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <HAL_UART_IDLE_Callback+0xa8>)
 800926e:	2100      	movs	r1, #0
 8009270:	54d1      	strb	r1, [r2, r3]

		if (strlen((const char *)rx_uart_data) < MIN_LEN_COMMAND)
 8009272:	4817      	ldr	r0, [pc, #92]	; (80092d0 <HAL_UART_IDLE_Callback+0xa8>)
 8009274:	f7f6 ffb6 	bl	80001e4 <strlen>
 8009278:	4603      	mov	r3, r0
 800927a:	2b0e      	cmp	r3, #14
 800927c:	d91d      	bls.n	80092ba <HAL_UART_IDLE_Callback+0x92>
			return;

		if(tx_complete == false)
 800927e:	4b15      	ldr	r3, [pc, #84]	; (80092d4 <HAL_UART_IDLE_Callback+0xac>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f083 0301 	eor.w	r3, r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d118      	bne.n	80092be <HAL_UART_IDLE_Callback+0x96>
			return;
		else
			tx_complete = false;
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <HAL_UART_IDLE_Callback+0xac>)
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]

		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0210 	bic.w	r2, r2, #16
 80092a0:	601a      	str	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fb fea2 	bl	8004fec <HAL_UART_AbortReceive_IT>

		event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <HAL_UART_IDLE_Callback+0xb0>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2101      	movs	r1, #1
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff ff94 	bl	80091dc <event_group_set_bit_from_isr>
 80092b4:	e004      	b.n	80092c0 <HAL_UART_IDLE_Callback+0x98>
			return;
 80092b6:	bf00      	nop
 80092b8:	e002      	b.n	80092c0 <HAL_UART_IDLE_Callback+0x98>
			return;
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <HAL_UART_IDLE_Callback+0x98>
			return;
 80092be:	bf00      	nop
	}
}
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	40013800 	.word	0x40013800
 80092cc:	200017ec 	.word	0x200017ec
 80092d0:	20001784 	.word	0x20001784
 80092d4:	20000108 	.word	0x20000108
 80092d8:	200017e8 	.word	0x200017e8

080092dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0210 	bic.w	r2, r2, #16
 80092f2:	601a      	str	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fb fe79 	bl	8004fec <HAL_UART_AbortReceive_IT>

	event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <HAL_UART_RxCpltCallback+0x34>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2101      	movs	r1, #1
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff ff6b 	bl	80091dc <event_group_set_bit_from_isr>
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200017e8 	.word	0x200017e8

08009314 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	event_group_set_bit_from_isr(uart_data_transfer_events, TX_DATA_COMPLETE);
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <HAL_UART_TxCpltCallback+0x1c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2102      	movs	r1, #2
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff ff5a 	bl	80091dc <event_group_set_bit_from_isr>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200017e8 	.word	0x200017e8

08009334 <rx_uart_data_task>:

#include <string.h>
void rx_uart_data_task (void const * argument) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af02      	add	r7, sp, #8
 800933a:	6078      	str	r0, [r7, #4]
	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 800933c:	4b13      	ldr	r3, [pc, #76]	; (800938c <rx_uart_data_task+0x58>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f04f 33ff 	mov.w	r3, #4294967295
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2301      	movs	r3, #1
 8009348:	2201      	movs	r2, #1
 800934a:	2101      	movs	r1, #1
 800934c:	f7fc fd96 	bl	8005e7c <xEventGroupWaitBits>
/*
	parse this

*/
// EXAMPLE:
		parse((const char *)rx_uart_data);
 8009350:	480f      	ldr	r0, [pc, #60]	; (8009390 <rx_uart_data_task+0x5c>)
 8009352:	f7ff fdeb 	bl	8008f2c <parse>
		if (strlen(rx_uart_data) > strlen("get charge_current")) {
 8009356:	480e      	ldr	r0, [pc, #56]	; (8009390 <rx_uart_data_task+0x5c>)
 8009358:	f7f6 ff44 	bl	80001e4 <strlen>
 800935c:	4603      	mov	r3, r0
 800935e:	2b12      	cmp	r3, #18
 8009360:	d900      	bls.n	8009364 <rx_uart_data_task+0x30>
			asm("nop");
 8009362:	bf00      	nop
		}
		if (strcmp((const char *)rx_uart_data, "get charge_current") ) {
 8009364:	490b      	ldr	r1, [pc, #44]	; (8009394 <rx_uart_data_task+0x60>)
 8009366:	480a      	ldr	r0, [pc, #40]	; (8009390 <rx_uart_data_task+0x5c>)
 8009368:	f7f6 ff32 	bl	80001d0 <strcmp>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d000      	beq.n	8009374 <rx_uart_data_task+0x40>
			asm("nop");
 8009372:	bf00      	nop
		}

		memset(rx_uart_data, 0, MAX_SIZE_RX_UART_DATA);
 8009374:	2263      	movs	r2, #99	; 0x63
 8009376:	2100      	movs	r1, #0
 8009378:	4805      	ldr	r0, [pc, #20]	; (8009390 <rx_uart_data_task+0x5c>)
 800937a:	f000 f88c 	bl	8009496 <memset>

		// while not have parse call
		xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <rx_uart_data_task+0x58>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2104      	movs	r1, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fc fe43 	bl	8006010 <xEventGroupSetBits>
	for(;;) {
 800938a:	e7d7      	b.n	800933c <rx_uart_data_task+0x8>
 800938c:	200017e8 	.word	0x200017e8
 8009390:	20001784 	.word	0x20001784
 8009394:	080096d8 	.word	0x080096d8

08009398 <tx_uart_data_task>:
	}
}

void tx_uart_data_task(void const * argument) {
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af02      	add	r7, sp, #8
 800939e:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 80093a4:	4b1f      	ldr	r3, [pc, #124]	; (8009424 <tx_uart_data_task+0x8c>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	2301      	movs	r3, #1
 80093b0:	2201      	movs	r2, #1
 80093b2:	2104      	movs	r1, #4
 80093b4:	f7fc fd62 	bl	8005e7c <xEventGroupWaitBits>

		//get pointer tx_data
		//	tx_data = GET_POINTER_FUNCTION
		// EXAMPLE:
		tx_data = parser_response();
 80093b8:	f7ff fe62 	bl	8009080 <parser_response>
 80093bc:	4603      	mov	r3, r0
 80093be:	60fb      	str	r3, [r7, #12]

		if(tx_data != 0)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <tx_uart_data_task+0x44>
			HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7f6 ff0c 	bl	80001e4 <strlen>
 80093cc:	4603      	mov	r3, r0
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4814      	ldr	r0, [pc, #80]	; (8009428 <tx_uart_data_task+0x90>)
 80093d6:	f7fb fc7b 	bl	8004cd0 <HAL_UART_Transmit_DMA>
 80093da:	e004      	b.n	80093e6 <tx_uart_data_task+0x4e>
		else
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error\r\n", strlen("debug message or error\r\n"));
 80093dc:	2218      	movs	r2, #24
 80093de:	4913      	ldr	r1, [pc, #76]	; (800942c <tx_uart_data_task+0x94>)
 80093e0:	4811      	ldr	r0, [pc, #68]	; (8009428 <tx_uart_data_task+0x90>)
 80093e2:	f7fb fc75 	bl	8004cd0 <HAL_UART_Transmit_DMA>

		xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 80093e6:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <tx_uart_data_task+0x8c>)
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	2301      	movs	r3, #1
 80093f2:	2201      	movs	r2, #1
 80093f4:	2102      	movs	r1, #2
 80093f6:	f7fc fd41 	bl	8005e7c <xEventGroupWaitBits>

		tx_complete = true;
 80093fa:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <tx_uart_data_task+0x98>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Abort(&huart1);
 8009400:	4809      	ldr	r0, [pc, #36]	; (8009428 <tx_uart_data_task+0x90>)
 8009402:	f7fb fd65 	bl	8004ed0 <HAL_UART_Abort>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <tx_uart_data_task+0x90>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <tx_uart_data_task+0x90>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0210 	orr.w	r2, r2, #16
 8009414:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8009416:	2263      	movs	r2, #99	; 0x63
 8009418:	4906      	ldr	r1, [pc, #24]	; (8009434 <tx_uart_data_task+0x9c>)
 800941a:	4803      	ldr	r0, [pc, #12]	; (8009428 <tx_uart_data_task+0x90>)
 800941c:	f7fb fcd4 	bl	8004dc8 <HAL_UART_Receive_DMA>
	for(;;) {
 8009420:	e7c0      	b.n	80093a4 <tx_uart_data_task+0xc>
 8009422:	bf00      	nop
 8009424:	200017e8 	.word	0x200017e8
 8009428:	20001a94 	.word	0x20001a94
 800942c:	080096ec 	.word	0x080096ec
 8009430:	20000108 	.word	0x20000108
 8009434:	20001784 	.word	0x20001784

08009438 <__libc_init_array>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4e0d      	ldr	r6, [pc, #52]	; (8009470 <__libc_init_array+0x38>)
 800943c:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <__libc_init_array+0x3c>)
 800943e:	1ba4      	subs	r4, r4, r6
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	2500      	movs	r5, #0
 8009444:	42a5      	cmp	r5, r4
 8009446:	d109      	bne.n	800945c <__libc_init_array+0x24>
 8009448:	4e0b      	ldr	r6, [pc, #44]	; (8009478 <__libc_init_array+0x40>)
 800944a:	4c0c      	ldr	r4, [pc, #48]	; (800947c <__libc_init_array+0x44>)
 800944c:	f000 f852 	bl	80094f4 <_init>
 8009450:	1ba4      	subs	r4, r4, r6
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	2500      	movs	r5, #0
 8009456:	42a5      	cmp	r5, r4
 8009458:	d105      	bne.n	8009466 <__libc_init_array+0x2e>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009460:	4798      	blx	r3
 8009462:	3501      	adds	r5, #1
 8009464:	e7ee      	b.n	8009444 <__libc_init_array+0xc>
 8009466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800946a:	4798      	blx	r3
 800946c:	3501      	adds	r5, #1
 800946e:	e7f2      	b.n	8009456 <__libc_init_array+0x1e>
 8009470:	08009740 	.word	0x08009740
 8009474:	08009740 	.word	0x08009740
 8009478:	08009740 	.word	0x08009740
 800947c:	08009744 	.word	0x08009744

08009480 <memcpy>:
 8009480:	b510      	push	{r4, lr}
 8009482:	1e43      	subs	r3, r0, #1
 8009484:	440a      	add	r2, r1
 8009486:	4291      	cmp	r1, r2
 8009488:	d100      	bne.n	800948c <memcpy+0xc>
 800948a:	bd10      	pop	{r4, pc}
 800948c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009494:	e7f7      	b.n	8009486 <memcpy+0x6>

08009496 <memset>:
 8009496:	4402      	add	r2, r0
 8009498:	4603      	mov	r3, r0
 800949a:	4293      	cmp	r3, r2
 800949c:	d100      	bne.n	80094a0 <memset+0xa>
 800949e:	4770      	bx	lr
 80094a0:	f803 1b01 	strb.w	r1, [r3], #1
 80094a4:	e7f9      	b.n	800949a <memset+0x4>

080094a6 <strncpy>:
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	3901      	subs	r1, #1
 80094aa:	4604      	mov	r4, r0
 80094ac:	b902      	cbnz	r2, 80094b0 <strncpy+0xa>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	4623      	mov	r3, r4
 80094b2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80094b6:	f803 5b01 	strb.w	r5, [r3], #1
 80094ba:	1e56      	subs	r6, r2, #1
 80094bc:	b92d      	cbnz	r5, 80094ca <strncpy+0x24>
 80094be:	4414      	add	r4, r2
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d0f4      	beq.n	80094ae <strncpy+0x8>
 80094c4:	f803 5b01 	strb.w	r5, [r3], #1
 80094c8:	e7fa      	b.n	80094c0 <strncpy+0x1a>
 80094ca:	461c      	mov	r4, r3
 80094cc:	4632      	mov	r2, r6
 80094ce:	e7ed      	b.n	80094ac <strncpy+0x6>

080094d0 <strspn>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	4603      	mov	r3, r0
 80094d4:	461a      	mov	r2, r3
 80094d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80094da:	b13d      	cbz	r5, 80094ec <strspn+0x1c>
 80094dc:	1e4c      	subs	r4, r1, #1
 80094de:	e001      	b.n	80094e4 <strspn+0x14>
 80094e0:	42ae      	cmp	r6, r5
 80094e2:	d005      	beq.n	80094f0 <strspn+0x20>
 80094e4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	d1f9      	bne.n	80094e0 <strspn+0x10>
 80094ec:	1a18      	subs	r0, r3, r0
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	4613      	mov	r3, r2
 80094f2:	e7ef      	b.n	80094d4 <strspn+0x4>

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
