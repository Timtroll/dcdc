
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007320  08007320  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007320  08007320  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007320  08007320  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017e4  20000014  0800733c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017f8  0800733c  000217f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a472  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bc2  00000000  00000000  0003a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  0003e078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  0003f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ed22  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012357  00000000  00000000  0005f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0821  00000000  00000000  00071809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012202a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  001220a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800720c 	.word	0x0800720c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800720c 	.word	0x0800720c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <MX_DMA_Init+0x48>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <MX_DMA_Init+0x48>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6153      	str	r3, [r2, #20]
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <MX_DMA_Init+0x48>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2103      	movs	r1, #3
 8000202:	200e      	movs	r0, #14
 8000204:	f000 fd3e 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000208:	200e      	movs	r0, #14
 800020a:	f000 fd57 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	2103      	movs	r1, #3
 8000212:	200f      	movs	r0, #15
 8000214:	f000 fd36 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000218:	200f      	movs	r0, #15
 800021a:	f000 fd4f 	bl	8000cbc <HAL_NVIC_EnableIRQ>

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000

0800022c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <vApplicationGetIdleTaskMemory+0x2c>)
 800023c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x30>)
 8000242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000030 	.word	0x20000030
 800025c:	20000084 	.word	0x20000084

08000260 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	4a07      	ldr	r2, [pc, #28]	; (800028c <vApplicationGetTimerTaskMemory+0x2c>)
 8000270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <vApplicationGetTimerTaskMemory+0x30>)
 8000276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800027e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000284 	.word	0x20000284
 8000290:	200002d8 	.word	0x200002d8

08000294 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b09a      	sub	sp, #104	; 0x68
 8000298:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <MX_FREERTOS_Init+0x9c>)
 800029c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 80002a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f003 ff1c 	bl	80040ea <osMessageCreate>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <MX_FREERTOS_Init+0xa0>)
 80002b6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002b8:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <MX_FREERTOS_Init+0xa4>)
 80002ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002be:	461d      	mov	r5, r3
 80002c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fea9 	bl	800402a <osThreadCreate>
 80002d8:	4602      	mov	r2, r0
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_FREERTOS_Init+0xa8>)
 80002dc:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityLow, 0, 128);
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_FREERTOS_Init+0xac>)
 80002e0:	f107 0420 	add.w	r4, r7, #32
 80002e4:	461d      	mov	r5, r3
 80002e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f003 fe96 	bl	800402a <osThreadCreate>
 80002fe:	4602      	mov	r2, r0
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_FREERTOS_Init+0xb0>)
 8000302:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityLow, 0, 128);
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <MX_FREERTOS_Init+0xb4>)
 8000306:	1d3c      	adds	r4, r7, #4
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 fe85 	bl	800402a <osThreadCreate>
 8000320:	4602      	mov	r2, r0
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_FREERTOS_Init+0xb8>)
 8000324:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000326:	bf00      	nop
 8000328:	3768      	adds	r7, #104	; 0x68
 800032a:	46bd      	mov	sp, r7
 800032c:	bdb0      	pop	{r4, r5, r7, pc}
 800032e:	bf00      	nop
 8000330:	08007224 	.word	0x08007224
 8000334:	20001624 	.word	0x20001624
 8000338:	08007240 	.word	0x08007240
 800033c:	20001620 	.word	0x20001620
 8000340:	0800726c 	.word	0x0800726c
 8000344:	20001628 	.word	0x20001628
 8000348:	08007298 	.word	0x08007298
 800034c:	2000161c 	.word	0x2000161c

08000350 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <StartDefaultTask+0x5c>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	2264      	movs	r2, #100	; 0x64
 8000362:	4618      	mov	r0, r3
 8000364:	f003 feea 	bl	800413c <osMessageGet>
	if (event.status == osEventMessage) {
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b10      	cmp	r3, #16
 800036c:	d11a      	bne.n	80003a4 <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 800036e:	6939      	ldr	r1, [r7, #16]
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <StartDefaultTask+0x60>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	b2c9      	uxtb	r1, r1
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <StartDefaultTask+0x64>)
 800037a:	5499      	strb	r1, [r3, r2]
		num_cell++;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <StartDefaultTask+0x60>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <StartDefaultTask+0x60>)
 8000386:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <StartDefaultTask+0x60>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <StartDefaultTask+0x64>)
 8000390:	5cd3      	ldrb	r3, [r2, r3]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d003      	beq.n	800039e <StartDefaultTask+0x4e>
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <StartDefaultTask+0x60>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	2b64      	cmp	r3, #100	; 0x64
 800039c:	d102      	bne.n	80003a4 <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <StartDefaultTask+0x60>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f003 fe8c 	bl	80040c2 <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 80003aa:	e7d5      	b.n	8000358 <StartDefaultTask+0x8>
 80003ac:	20001624 	.word	0x20001624
 80003b0:	200006d8 	.word	0x200006d8
 80003b4:	200006dc 	.word	0x200006dc

080003b8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b37      	ldr	r3, [pc, #220]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a36      	ldr	r2, [pc, #216]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e2:	613b      	str	r3, [r7, #16]
 80003e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e6:	4b31      	ldr	r3, [pc, #196]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a30      	ldr	r2, [pc, #192]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <MX_GPIO_Init+0xf4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <MX_GPIO_Init+0xf4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2a      	ldr	r2, [pc, #168]	; (80004ac <MX_GPIO_Init+0xf4>)
 8000404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <MX_GPIO_Init+0xf4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b25      	ldr	r3, [pc, #148]	; (80004ac <MX_GPIO_Init+0xf4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a24      	ldr	r2, [pc, #144]	; (80004ac <MX_GPIO_Init+0xf4>)
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b22      	ldr	r3, [pc, #136]	; (80004ac <MX_GPIO_Init+0xf4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f000 ffdb 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_GPIO_Init+0xf8>)
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	4819      	ldr	r0, [pc, #100]	; (80004b4 <MX_GPIO_Init+0xfc>)
 8000450:	f000 fe5c 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000454:	230c      	movs	r3, #12
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000464:	2307      	movs	r3, #7
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fe4b 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000476:	2320      	movs	r3, #32
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fe3c 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2105      	movs	r1, #5
 8000498:	2028      	movs	r0, #40	; 0x28
 800049a:	f000 fbf3 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800049e:	2028      	movs	r0, #40	; 0x28
 80004a0:	f000 fc0c 	bl	8000cbc <HAL_NVIC_EnableIRQ>

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	; 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	10210000 	.word	0x10210000
 80004b4:	48000800 	.word	0x48000800

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 faf4 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80f 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f7ff ff78 	bl	80003b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f7ff fe8a 	bl	80001e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80004cc:	f000 f980 	bl	80007d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f9f0 	bl	80008b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_uart_data_transfer();
 80004d4:	f006 fd72 	bl	8006fbc <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80004d8:	f7ff fedc 	bl	8000294 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80004dc:	f003 fd9e 	bl	800401c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x28>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b096      	sub	sp, #88	; 0x58
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ec:	2228      	movs	r2, #40	; 0x28
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f006 fe82 	bl	80071fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]
 8000516:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	2310      	movs	r3, #16
 8000522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	2300      	movs	r3, #0
 800052a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800052c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000530:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000536:	4618      	mov	r0, r3
 8000538:	f000 ff96 	bl	8001468 <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000542:	f000 f839 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000546:	230f      	movs	r3, #15
 8000548:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054a:	2302      	movs	r3, #2
 800054c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	2102      	movs	r1, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fe88 	bl	8002278 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800056e:	f000 f823 	bl	80005b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000572:	2301      	movs	r3, #1
 8000574:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4618      	mov	r0, r3
 800057e:	f002 f8e3 	bl	8002748 <HAL_RCCEx_PeriphCLKConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000588:	f000 f816 	bl	80005b8 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	; 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a6:	f000 fa95 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_MspInit+0x70>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_MspInit+0x70>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_MspInit+0x70>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_MspInit+0x70>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_MspInit+0x70>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_MspInit+0x70>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	f06f 0009 	mvn.w	r0, #9
 8000606:	f000 fb3d 	bl	8000c84 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2101      	movs	r1, #1
 800060e:	f06f 0004 	mvn.w	r0, #4
 8000612:	f000 fb37 	bl	8000c84 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	f06f 0003 	mvn.w	r0, #3
 800061e:	f000 fb31 	bl	8000c84 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	210f      	movs	r1, #15
 8000626:	f06f 0001 	mvn.w	r0, #1
 800062a:	f000 fb2b 	bl	8000c84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	2019      	movs	r0, #25
 8000652:	f000 fb17 	bl	8000c84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000656:	2019      	movs	r0, #25
 8000658:	f000 fb30 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_InitTick+0x9c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <HAL_InitTick+0x9c>)
 8000662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_InitTick+0x9c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000674:	f107 0210 	add.w	r2, r7, #16
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f830 	bl	80026e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000684:	f002 f80c 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8000688:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_InitTick+0xa0>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0c9b      	lsrs	r3, r3, #18
 8000694:	3b01      	subs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_InitTick+0xa4>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_InitTick+0xa8>)
 800069c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_InitTick+0xa4>)
 80006a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_InitTick+0xa4>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_InitTick+0xa4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_InitTick+0xa4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <HAL_InitTick+0xa4>)
 80006ba:	f002 f97b 	bl	80029b4 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d104      	bne.n	80006ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <HAL_InitTick+0xa4>)
 80006c6:	f002 f9a1 	bl	8002a0c <HAL_TIM_Base_Start_IT>
 80006ca:	4603      	mov	r3, r0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3730      	adds	r7, #48	; 0x30
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	431bde83 	.word	0x431bde83
 80006e0:	2000162c 	.word	0x2000162c
 80006e4:	40012c00 	.word	0x40012c00

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <DMA1_Channel4_IRQHandler+0x10>)
 8000722:	f000 fbf6 	bl	8000f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200016ac 	.word	0x200016ac

08000730 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <DMA1_Channel5_IRQHandler+0x10>)
 8000736:	f000 fbec 	bl	8000f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200016f0 	.word	0x200016f0

08000744 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800074a:	f002 f989 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000162c 	.word	0x2000162c

08000758 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <TIM2_IRQHandler+0x10>)
 800075e:	f002 f97f 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000166c 	.word	0x2000166c

0800076c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <USART1_IRQHandler+0x24>)
 8000772:	f002 feb9 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <USART1_IRQHandler+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	2b10      	cmp	r3, #16
 8000782:	d102      	bne.n	800078a <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USART1_IRQHandler+0x24>)
 8000786:	f006 fc61 	bl	800704c <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001734 	.word	0x20001734

08000794 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000798:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800079c:	f000 fe40 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <SystemInit+0x28>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <SystemInit+0x28>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SystemInit+0x28>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	609a      	str	r2, [r3, #8]
#endif
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM2_Init+0x98>)
 8000804:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_TIM2_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <MX_TIM2_Init+0x98>)
 8000818:	f002 f8cc 	bl	80029b4 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000822:	f7ff fec9 	bl	80005b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM2_Init+0x98>)
 8000834:	f002 fa33 	bl	8002c9e <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800083e:	f7ff febb 	bl	80005b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM2_Init+0x98>)
 8000850:	f002 fc18 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800085a:	f7ff fead 	bl	80005b8 <Error_Handler>
  }

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000166c 	.word	0x2000166c

0800086c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087c:	d113      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	201c      	movs	r0, #28
 800089c:	f000 f9f2 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a0:	201c      	movs	r0, #28
 80008a2:	f000 fa0b 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART1_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART1_UART_Init+0x58>)
 80008f8:	f002 fc50 	bl	800319c <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f7ff fe59 	bl	80005b8 <Error_Handler>
  }

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20001734 	.word	0x20001734
 8000910:	40013800 	.word	0x40013800

08000914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <HAL_UART_MspInit+0x124>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d17b      	bne.n	8000a2e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <HAL_UART_MspInit+0x128>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <HAL_UART_MspInit+0x128>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <HAL_UART_MspInit+0x128>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_UART_MspInit+0x128>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <HAL_UART_MspInit+0x128>)
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <HAL_UART_MspInit+0x128>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000976:	2307      	movs	r3, #7
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	482f      	ldr	r0, [pc, #188]	; (8000a40 <HAL_UART_MspInit+0x12c>)
 8000982:	f000 fbc3 	bl	800110c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <HAL_UART_MspInit+0x130>)
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <HAL_UART_MspInit+0x134>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_UART_MspInit+0x130>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <HAL_UART_MspInit+0x130>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_UART_MspInit+0x130>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009b6:	4823      	ldr	r0, [pc, #140]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009b8:	f000 f98e 	bl	8000cd8 <HAL_DMA_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80009c2:	f7ff fdf9 	bl	80005b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_UART_MspInit+0x130>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_UART_MspInit+0x13c>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009da:	2210      	movs	r2, #16
 80009dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0x138>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <HAL_UART_MspInit+0x138>)
 8000a04:	f000 f968 	bl	8000cd8 <HAL_DMA_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000a0e:	f7ff fdd3 	bl	80005b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_UART_MspInit+0x138>)
 8000a16:	669a      	str	r2, [r3, #104]	; 0x68
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <HAL_UART_MspInit+0x138>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	2025      	movs	r0, #37	; 0x25
 8000a24:	f000 f92e 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a28:	2025      	movs	r0, #37	; 0x25
 8000a2a:	f000 f947 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000400 	.word	0x48000400
 8000a44:	200016f0 	.word	0x200016f0
 8000a48:	40020058 	.word	0x40020058
 8000a4c:	200016ac 	.word	0x200016ac
 8000a50:	40020044 	.word	0x40020044

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
	ldr	r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff fe91 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f006 fb8b 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd17 	bl	80004b8 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a8c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a90:	08007328 	.word	0x08007328
	ldr	r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a98:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000a9c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000aa0:	200017f8 	.word	0x200017f8

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x28>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f8d8 	bl	8000c6e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fdbc 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fd80 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200017b4 	.word	0x200017b4

08000afc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200017b4 	.word	0x200017b4

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff4c 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c96:	f7ff ff61 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f7ff ffb1 	bl	8000c08 <NVIC_EncodePriority>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff80 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff54 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e037      	b.n	8000d5e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f9c3 	bl	80010cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}  
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_DMA_Start_IT+0x20>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e04a      	b.n	8000e1c <HAL_DMA_Start_IT+0xb6>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d13a      	bne.n	8000e0e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0201 	bic.w	r2, r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f000 f957 	bl	8001070 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d008      	beq.n	8000ddc <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 020e 	orr.w	r2, r2, #14
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e00f      	b.n	8000dfc <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 020a 	orr.w	r2, r2, #10
 8000dea:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0204 	bic.w	r2, r2, #4
 8000dfa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e005      	b.n	8000e1a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e16:	2302      	movs	r3, #2
 8000e18:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d008      	beq.n	8000e48 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2204      	movs	r2, #4
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e020      	b.n	8000e8a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 020e 	bic.w	r2, r2, #14
 8000e56:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0201 	bic.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	2101      	movs	r1, #1
 8000e72:	fa01 f202 	lsl.w	r2, r1, r2
 8000e76:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d005      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e027      	b.n	8000f08 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 020e 	bic.w	r2, r2, #14
 8000ec6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	4798      	blx	r3
    } 
  }
  return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2204      	movs	r2, #4
 8000f30:	409a      	lsls	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x72>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01f      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0204 	bic.w	r2, r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d06a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f82:	e065      	b.n	8001050 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	2202      	movs	r2, #2
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d02c      	beq.n	8000fee <HAL_DMA_IRQHandler+0xdc>
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d027      	beq.n	8000fee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 020a 	bic.w	r2, r2, #10
 8000fba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	2102      	movs	r1, #2
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d035      	beq.n	8001050 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000fec:	e030      	b.n	8001050 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d028      	beq.n	8001050 <HAL_DMA_IRQHandler+0x13e>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b00      	cmp	r3, #0
 8001006:	d023      	beq.n	8001050 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 020e 	bic.w	r2, r2, #14
 8001016:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4798      	blx	r3
    }
  }
}  
 800104e:	e7ff      	b.n	8001050 <HAL_DMA_IRQHandler+0x13e>
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b10      	cmp	r3, #16
 800109c:	d108      	bne.n	80010b0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010ae:	e007      	b.n	80010c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	60da      	str	r2, [r3, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <DMA_CalcBaseAndBitshift+0x34>)
 80010dc:	4413      	add	r3, r2
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <DMA_CalcBaseAndBitshift+0x38>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	009a      	lsls	r2, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <DMA_CalcBaseAndBitshift+0x3c>)
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e14e      	b.n	80013ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8140 	beq.w	80013b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x38>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d00b      	beq.n	80011e0 <HAL_GPIO_Init+0xd4>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d130      	bne.n	8001242 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001216:	2201      	movs	r2, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	f003 0201 	and.w	r2, r3, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 809a 	beq.w	80013b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001298:	4a50      	ldr	r2, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <HAL_GPIO_Init+0x2d4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1dc>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_GPIO_Init+0x2d8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_GPIO_Init+0x2dc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1d4>
 80012dc:	2303      	movs	r3, #3
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e0:	2305      	movs	r3, #5
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012ec:	2300      	movs	r3, #0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fe:	4937      	ldr	r1, [pc, #220]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f aea9 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 80013ca:	bf00      	nop
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800140c:	e002      	b.n	8001414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f806 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800146e:	af00      	add	r7, sp, #0
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f000 bef4 	b.w	800226a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 816a 	beq.w	8001766 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001492:	4bb3      	ldr	r3, [pc, #716]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149e:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d159      	bne.n	800155e <HAL_RCC_OscConfig+0xf6>
 80014aa:	4bad      	ldr	r3, [pc, #692]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b6:	d152      	bne.n	800155e <HAL_RCC_OscConfig+0xf6>
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d102      	bne.n	80014ea <HAL_RCC_OscConfig+0x82>
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0xae>
 80014ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001506:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800151e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001522:	fa92 f2a2 	rbit	r2, r2
 8001526:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800152a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	f002 021f 	and.w	r2, r2, #31
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 810c 	beq.w	8001764 <HAL_RCC_OscConfig+0x2fc>
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 8106 	bne.w	8001764 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f000 be86 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x110>
 800156a:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7c      	ldr	r2, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e030      	b.n	80015da <HAL_RCC_OscConfig+0x172>
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x134>
 8001582:	4b77      	ldr	r3, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a76      	ldr	r2, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b74      	ldr	r3, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01e      	b.n	80015da <HAL_RCC_OscConfig+0x172>
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x15a>
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a69      	ldr	r2, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x172>
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a66      	ldr	r2, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015da:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f023 020f 	bic.w	r2, r3, #15
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	495d      	ldr	r1, [pc, #372]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d059      	beq.n	80016ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa80 	bl	8000afc <HAL_GetTick>
 80015fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001602:	f7ff fa7b 	bl	8000afc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d902      	bls.n	8001618 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	f000 be29 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800162c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x1e2>
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x20e>
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001666:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800167e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001682:	fa92 f2a2 	rbit	r2, r2
 8001686:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800168a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0ab      	beq.n	8001602 <HAL_RCC_OscConfig+0x19a>
 80016aa:	e05c      	b.n	8001766 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa26 	bl	8000afc <HAL_GetTick>
 80016b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b6:	f7ff fa21 	bl	8000afc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d902      	bls.n	80016cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f000 bdcf 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x296>
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x2c2>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800171a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_RCC_OscConfig+0x2f8>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001732:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800173e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ab      	bne.n	80016b6 <HAL_RCC_OscConfig+0x24e>
 800175e:	e002      	b.n	8001766 <HAL_RCC_OscConfig+0x2fe>
 8001760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 816f 	beq.w	8001a54 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001776:	4bd0      	ldr	r3, [pc, #832]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001782:	4bcd      	ldr	r3, [pc, #820]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b08      	cmp	r3, #8
 800178c:	d16c      	bne.n	8001868 <HAL_RCC_OscConfig+0x400>
 800178e:	4bca      	ldr	r3, [pc, #808]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d166      	bne.n	8001868 <HAL_RCC_OscConfig+0x400>
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_OscConfig+0x362>
 80017c4:	4bbc      	ldr	r3, [pc, #752]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e013      	b.n	80017f2 <HAL_RCC_OscConfig+0x38a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017ee:	4bb2      	ldr	r3, [pc, #712]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2202      	movs	r2, #2
 80017f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017fc:	fa92 f2a2 	rbit	r2, r2
 8001800:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001804:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001808:	fab2 f282 	clz	r2, r2
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f042 0220 	orr.w	r2, r2, #32
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f002 021f 	and.w	r2, r2, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_RCC_OscConfig+0x3cc>
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d002      	beq.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 bd1b 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4ba0      	ldr	r3, [pc, #640]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	21f8      	movs	r1, #248	; 0xf8
 8001844:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800184c:	fa91 f1a1 	rbit	r1, r1
 8001850:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001854:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001858:	fab1 f181 	clz	r1, r1
 800185c:	b2c9      	uxtb	r1, r1
 800185e:	408b      	lsls	r3, r1
 8001860:	4995      	ldr	r1, [pc, #596]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e0f5      	b.n	8001a54 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8085 	beq.w	800197e <HAL_RCC_OscConfig+0x516>
 8001874:	2301      	movs	r3, #1
 8001876:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001886:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	2301      	movs	r3, #1
 800189e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f92c 	bl	8000afc <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff f927 	bl	8000afc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d902      	bls.n	80018c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f000 bcd5 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0x488>
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x4b0>
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001908:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	2202      	movs	r2, #2
 800191a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800191e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001922:	fa92 f2a2 	rbit	r2, r2
 8001926:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800192a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800192e:	fab2 f282 	clz	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f042 0220 	orr.w	r2, r2, #32
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f002 021f 	and.w	r2, r2, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0af      	beq.n	80018aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	21f8      	movs	r1, #248	; 0xf8
 800195a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001962:	fa91 f1a1 	rbit	r1, r1
 8001966:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800196a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800196e:	fab1 f181 	clz	r1, r1
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	408b      	lsls	r3, r1
 8001976:	4950      	ldr	r1, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e06a      	b.n	8001a54 <HAL_RCC_OscConfig+0x5ec>
 800197e:	2301      	movs	r3, #1
 8001980:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001990:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f8a7 	bl	8000afc <HAL_GetTick>
 80019ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff f8a2 	bl	8000afc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d902      	bls.n	80019ca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 bc50 	b.w	800226a <HAL_RCC_OscConfig+0xe02>
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x592>
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x5ba>
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x650>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2202      	movs	r2, #2
 8001a24:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a28:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1af      	bne.n	80019b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80da 	beq.w	8001c18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d069      	beq.n	8001b42 <HAL_RCC_OscConfig+0x6da>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x654>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2301      	movs	r3, #1
 8001a96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff f830 	bl	8000afc <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e00e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f82b 	bl	8000afc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d906      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e3d9      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	10908120 	.word	0x10908120
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001aee:	2202      	movs	r2, #2
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	4ba5      	ldr	r3, [pc, #660]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	6019      	str	r1, [r3, #0]
 8001b0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f1a3 	rbit	r1, r3
 8001b18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b1c:	6019      	str	r1, [r3, #0]
  return result;
 8001b1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0b0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x63a>
 8001b40:	e06a      	b.n	8001c18 <HAL_RCC_OscConfig+0x7b0>
 8001b42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b58:	601a      	str	r2, [r3, #0]
  return result;
 8001b5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b5e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x934>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2300      	movs	r3, #0
 8001b72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7fe ffc2 	bl	8000afc <HAL_GetTick>
 8001b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7fe ffbd 	bl	8000afc <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e36b      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8001b92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b96:	2202      	movs	r2, #2
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001be2:	2102      	movs	r1, #2
 8001be4:	6019      	str	r1, [r3, #0]
 8001be6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f1a3 	rbit	r1, r3
 8001bf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf4:	6019      	str	r1, [r3, #0]
  return result;
 8001bf6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1b2      	bne.n	8001b7e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8158 	beq.w	8001ed8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_OscConfig+0x938>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11a      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x938>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_RCC_OscConfig+0x938>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ff40 	bl	8000afc <HAL_GetTick>
 8001c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe ff3b 	bl	8000afc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e2e9      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x938>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ef      	beq.n	8001c82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x852>
 8001cac:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a39      	ldr	r2, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e02f      	b.n	8001d1a <HAL_RCC_OscConfig+0x8b2>
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x876>
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e01d      	b.n	8001d1a <HAL_RCC_OscConfig+0x8b2>
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x89a>
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x8b2>
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d06b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7fe feea 	bl	8000afc <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fee5 	bl	8000afc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e291      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8001d46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d74:	601a      	str	r2, [r3, #0]
  return result;
 8001d76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d109      	bne.n	8001da4 <HAL_RCC_OscConfig+0x93c>
 8001d90:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <HAL_RCC_OscConfig+0x930>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x958>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	10908120 	.word	0x10908120
 8001da0:	40007000 	.word	0x40007000
 8001da4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4bbb      	ldr	r3, [pc, #748]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	6011      	str	r1, [r2, #0]
 8001dc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fa92 f1a2 	rbit	r1, r2
 8001dd2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dd6:	6011      	str	r1, [r2, #0]
  return result;
 8001dd8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d099      	beq.n	8001d2e <HAL_RCC_OscConfig+0x8c6>
 8001dfa:	e063      	b.n	8001ec4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe fe7e 	bl	8000afc <HAL_GetTick>
 8001e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fe79 	bl	8000afc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e225      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8001e1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e4c:	601a      	str	r2, [r3, #0]
  return result;
 8001e4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_OscConfig+0xa06>
 8001e68:	4b90      	ldr	r3, [pc, #576]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	e00d      	b.n	8001e8a <HAL_RCC_OscConfig+0xa22>
 8001e6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	4b89      	ldr	r3, [pc, #548]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e8e:	2102      	movs	r1, #2
 8001e90:	6011      	str	r1, [r2, #0]
 8001e92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	fa92 f1a2 	rbit	r1, r2
 8001e9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1a0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b77      	ldr	r3, [pc, #476]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	4a76      	ldr	r2, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 81c2 	beq.w	8002268 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	f000 819c 	beq.w	800222a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f040 8114 	bne.w	8002126 <HAL_RCC_OscConfig+0xcbe>
 8001efe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f16:	601a      	str	r2, [r3, #0]
  return result;
 8001f18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fde2 	bl	8000afc <HAL_GetTick>
 8001f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e009      	b.n	8001f52 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fddd 	bl	8000afc <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e18b      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8001f52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f6a:	601a      	str	r2, [r3, #0]
  return result;
 8001f6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0xb24>
 8001f86:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e01b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xb5c>
 8001f8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fcc:	6011      	str	r1, [r2, #0]
 8001fce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	fa92 f1a2 	rbit	r1, r2
 8001fd8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fdc:	6011      	str	r1, [r2, #0]
  return result;
 8001fde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d19e      	bne.n	8001f3e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	430b      	orrs	r3, r1
 8002016:	4925      	ldr	r1, [pc, #148]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
 800201c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002034:	601a      	str	r2, [r3, #0]
  return result;
 8002036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	461a      	mov	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fd53 	bl	8000afc <HAL_GetTick>
 8002056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fd4e 	bl	8000afc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0fc      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 8002070:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800208e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0xc48>
 80020a4:	4b01      	ldr	r3, [pc, #4]	; (80020ac <HAL_RCC_OscConfig+0xc44>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e01e      	b.n	80020e8 <HAL_RCC_OscConfig+0xc80>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0xe0c>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020f0:	6011      	str	r1, [r2, #0]
 80020f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	fa92 f1a2 	rbit	r1, r2
 80020fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002100:	6011      	str	r1, [r2, #0]
  return result;
 8002102:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f002 021f 	and.w	r2, r2, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d09b      	beq.n	800205c <HAL_RCC_OscConfig+0xbf4>
 8002124:	e0a0      	b.n	8002268 <HAL_RCC_OscConfig+0xe00>
 8002126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800212a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800212e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213e:	601a      	str	r2, [r3, #0]
  return result;
 8002140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002144:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fcce 	bl	8000afc <HAL_GetTick>
 8002160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe fcc9 	bl	8000afc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e077      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	601a      	str	r2, [r3, #0]
  return result;
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0xd4c>
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCC_OscConfig+0xe0c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e01b      	b.n	80021ec <HAL_RCC_OscConfig+0xd84>
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f107 0318 	add.w	r3, r7, #24
 80021d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_OscConfig+0xe0c>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	f107 0210 	add.w	r2, r7, #16
 80021f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021f4:	6011      	str	r1, [r2, #0]
 80021f6:	f107 0210 	add.w	r2, r7, #16
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	fa92 f1a2 	rbit	r1, r2
 8002200:	f107 020c 	add.w	r2, r7, #12
 8002204:	6011      	str	r1, [r2, #0]
  return result;
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d19e      	bne.n	8002166 <HAL_RCC_OscConfig+0xcfe>
 8002228:	e01e      	b.n	8002268 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e018      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCC_OscConfig+0xe0c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002240:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002244:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	429a      	cmp	r2, r3
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002252:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b09e      	sub	sp, #120	; 0x78
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e162      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b90      	ldr	r3, [pc, #576]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b8d      	ldr	r3, [pc, #564]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	498b      	ldr	r1, [pc, #556]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e14a      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	497f      	ldr	r1, [pc, #508]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80dc 	beq.w	80024a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d13c      	bne.n	800236e <HAL_RCC_ClockConfig+0xf6>
 80022f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_RCC_ClockConfig+0xa6>
 8002318:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e00f      	b.n	800233e <HAL_RCC_ClockConfig+0xc6>
 800231e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002322:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	667b      	str	r3, [r7, #100]	; 0x64
 800232c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002330:	663b      	str	r3, [r7, #96]	; 0x60
 8002332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233a:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002342:	65ba      	str	r2, [r7, #88]	; 0x58
 8002344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002346:	fa92 f2a2 	rbit	r2, r2
 800234a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800234c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800234e:	fab2 f282 	clz	r2, r2
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f002 021f 	and.w	r2, r2, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d17b      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0f3      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d13c      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x178>
 8002376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x128>
 800239a:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_ClockConfig+0x148>
 80023a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
 80023ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40
 80023b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80023c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d0:	fab2 f282 	clz	r2, r2
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f002 021f 	and.w	r2, r2, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13a      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b2      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
 80023f0:	2302      	movs	r3, #2
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e00d      	b.n	8002434 <HAL_RCC_ClockConfig+0x1bc>
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2202      	movs	r2, #2
 8002436:	61ba      	str	r2, [r7, #24]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	fa92 f2a2 	rbit	r2, r2
 800243e:	617a      	str	r2, [r7, #20]
  return result;
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	fab2 f282 	clz	r2, r2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f042 0220 	orr.w	r2, r2, #32
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f002 021f 	and.w	r2, r2, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f202 	lsl.w	r2, r1, r2
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e079      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	491a      	ldr	r1, [pc, #104]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe fb42 	bl	8000afc <HAL_GetTick>
 8002478:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe fb3e 	bl	8000afc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e061      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d214      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4906      	ldr	r1, [pc, #24]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_ClockConfig+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e040      	b.n	8002556 <HAL_RCC_ClockConfig+0x2de>
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_ClockConfig+0x2e8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	491a      	ldr	r1, [pc, #104]	; (8002560 <HAL_RCC_ClockConfig+0x2e8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x2e8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4912      	ldr	r1, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x2e8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800251a:	f000 f829 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800251e:	4601      	mov	r1, r0
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCC_ClockConfig+0x2e8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002528:	22f0      	movs	r2, #240	; 0xf0
 800252a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	fa92 f2a2 	rbit	r2, r2
 8002532:	60fa      	str	r2, [r7, #12]
  return result;
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	40d3      	lsrs	r3, r2
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	fa21 f303 	lsr.w	r3, r1, r3
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_RCC_ClockConfig+0x2f0>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x2f4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f874 	bl	800063c <HAL_InitTick>
  
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3778      	adds	r7, #120	; 0x78
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	080072e8 	.word	0x080072e8
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_RCC_GetSysClockFreq+0xc0>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x30>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x36>
 800259e:	e03c      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025a2:	623b      	str	r3, [r7, #32]
      break;
 80025a4:	e03c      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	fa92 f2a2 	rbit	r2, r2
 80025b8:	607a      	str	r2, [r7, #4]
  return result;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	40d3      	lsrs	r3, r2
 80025c4:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	220f      	movs	r2, #15
 80025d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	60fa      	str	r2, [r7, #12]
  return result;
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	40d3      	lsrs	r3, r2
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	e004      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_RCC_GetSysClockFreq+0xd0>)
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	623b      	str	r3, [r7, #32]
      break;
 8002618:	e002      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc4>)
 800261c:	623b      	str	r3, [r7, #32]
      break;
 800261e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002620:	6a3b      	ldr	r3, [r7, #32]
}
 8002622:	4618      	mov	r0, r3
 8002624:	372c      	adds	r7, #44	; 0x2c
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	007a1200 	.word	0x007a1200
 8002638:	08007300 	.word	0x08007300
 800263c:	08007310 	.word	0x08007310
 8002640:	003d0900 	.word	0x003d0900

08002644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002662:	f7ff ffef 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002666:	4601      	mov	r1, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002670:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002674:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	603a      	str	r2, [r7, #0]
  return result;
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	40d3      	lsrs	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_RCC_GetPCLK1Freq+0x40>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	080072f8 	.word	0x080072f8

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026a6:	f7ff ffcd 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 80026aa:	4601      	mov	r1, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	603a      	str	r2, [r7, #0]
  return result;
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	40d3      	lsrs	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	080072f8 	.word	0x080072f8

080026e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	220f      	movs	r2, #15
 80026f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_GetClockConfig+0x5c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_RCC_GetClockConfig+0x60>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0207 	and.w	r2, r3, #7
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40022000 	.word	0x40022000

08002748 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b092      	sub	sp, #72	; 0x48
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80d0 	beq.w	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276c:	4b8e      	ldr	r3, [pc, #568]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a8a      	ldr	r2, [pc, #552]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	61d3      	str	r3, [r2, #28]
 8002784:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a81      	ldr	r2, [pc, #516]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe f9a5 	bl	8000afc <HAL_GetTick>
 80027b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe f9a1 	bl	8000afc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0ea      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b78      	ldr	r3, [pc, #480]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d4:	4b74      	ldr	r3, [pc, #464]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d07d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d076      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	461a      	mov	r2, r3
 800281c:	2301      	movs	r3, #1
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	461a      	mov	r2, r3
 8002840:	2300      	movs	r3, #0
 8002842:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002848:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d045      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f952 	bl	8000afc <HAL_GetTick>
 8002858:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe f94e 	bl	8000afc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e095      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002872:	2302      	movs	r3, #2
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2302      	movs	r3, #2
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	61fb      	str	r3, [r7, #28]
  return result;
 800288a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d102      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	e007      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2202      	movs	r2, #2
 80028b8:	613a      	str	r2, [r7, #16]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	fa92 f2a2 	rbit	r2, r2
 80028c0:	60fa      	str	r2, [r7, #12]
  return result;
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0bd      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	492e      	ldr	r1, [pc, #184]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a2a      	ldr	r2, [pc, #168]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	4313      	orrs	r3, r2
 8002922:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f023 0210 	bic.w	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	491a      	ldr	r1, [pc, #104]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	4313      	orrs	r3, r2
 8002940:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4913      	ldr	r1, [pc, #76]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	4313      	orrs	r3, r2
 800295e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	490b      	ldr	r1, [pc, #44]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	4313      	orrs	r3, r2
 800297c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	4313      	orrs	r3, r2
 800299a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3748      	adds	r7, #72	; 0x48
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
 80029b0:	10908100 	.word	0x10908100

080029b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01d      	b.n	8002a02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fd ff46 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fa34 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_Base_Start_IT+0x50>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d00b      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x42>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	00010007 	.word	0x00010007

08002a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9be 	bl	8002e24 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9b0 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9c1 	bl	8002e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f994 	bl	8002e24 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f986 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f997 	bl	8002e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0208 	mvn.w	r2, #8
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f96a 	bl	8002e24 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f95c 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f96d 	bl	8002e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f940 	bl	8002e24 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f932 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f943 	bl	8002e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fcd8 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b80      	cmp	r3, #128	; 0x80
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fab2 	bl	8003174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d10e      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 faa5 	bl	8003188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8f1 	bl	8002e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d10e      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0220 	mvn.w	r2, #32
 8002c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa65 	bl	8003160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_ConfigClockSource+0x18>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0a8      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x16a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d067      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x124>
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d80b      	bhi.n	8002d0e <HAL_TIM_ConfigClockSource+0x70>
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d073      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x144>
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d802      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x66>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06f      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d02:	e078      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d06c      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x144>
 8002d08:	2b30      	cmp	r3, #48	; 0x30
 8002d0a:	d06a      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002d0c:	e073      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d0e:	2b70      	cmp	r3, #112	; 0x70
 8002d10:	d00d      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x90>
 8002d12:	2b70      	cmp	r3, #112	; 0x70
 8002d14:	d804      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x82>
 8002d16:	2b50      	cmp	r3, #80	; 0x50
 8002d18:	d033      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0xe4>
 8002d1a:	2b60      	cmp	r3, #96	; 0x60
 8002d1c:	d041      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002d1e:	e06a      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d066      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0x156>
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d017      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002d2c:	e063      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 f981 	bl	8003044 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
      break;
 8002d5a:	e04c      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f000 f96a 	bl	8003044 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7e:	609a      	str	r2, [r3, #8]
      break;
 8002d80:	e039      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 f8de 	bl	8002f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2150      	movs	r1, #80	; 0x50
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f937 	bl	800300e <TIM_ITRx_SetConfig>
      break;
 8002da0:	e029      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f000 f8fd 	bl	8002fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2160      	movs	r1, #96	; 0x60
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f927 	bl	800300e <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e019      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 f8be 	bl	8002f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2140      	movs	r1, #64	; 0x40
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f917 	bl	800300e <TIM_ITRx_SetConfig>
      break;
 8002de0:	e009      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 f90e 	bl	800300e <TIM_ITRx_SetConfig>
      break;
 8002df2:	e000      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <TIM_Base_SetConfig+0xdc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <TIM_Base_SetConfig+0x28>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d003      	beq.n	8002e88 <TIM_Base_SetConfig+0x28>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <TIM_Base_SetConfig+0xe0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <TIM_Base_SetConfig+0xdc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <TIM_Base_SetConfig+0x6a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d00f      	beq.n	8002eca <TIM_Base_SetConfig+0x6a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <TIM_Base_SetConfig+0xe0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_Base_SetConfig+0x6a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <TIM_Base_SetConfig+0xe4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_Base_SetConfig+0x6a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <TIM_Base_SetConfig+0xe8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x6a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <TIM_Base_SetConfig+0xec>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <TIM_Base_SetConfig+0xdc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <TIM_Base_SetConfig+0xc0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <TIM_Base_SetConfig+0xe4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0xc0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <TIM_Base_SetConfig+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0xc0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <TIM_Base_SetConfig+0xec>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40014400 	.word	0x40014400
 8002f4c:	40014800 	.word	0x40014800

08002f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0201 	bic.w	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 030a 	bic.w	r3, r3, #10
 8002f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	031b      	lsls	r3, r3, #12
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	f043 0307 	orr.w	r3, r3, #7
 8003030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	609a      	str	r2, [r3, #8]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	431a      	orrs	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e054      	b.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d009      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10c      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4313      	orrs	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40014000 	.word	0x40014000

08003160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e040      	b.n	8003230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fba8 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 faf2 	bl	80037c4 <UART_SetConfig>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e022      	b.n	8003230 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fc68 	bl	8003ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fcef 	bl	8003c0c <UART_CheckIdleState>
 800322e:	4603      	mov	r3, r0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324a:	2b20      	cmp	r3, #32
 800324c:	d164      	bne.n	8003318 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Transmit_DMA+0x22>
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e05d      	b.n	800331a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_UART_Transmit_DMA+0x34>
 8003268:	2302      	movs	r3, #2
 800326a:	e056      	b.n	800331a <HAL_UART_Transmit_DMA+0xe2>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	; 0x21
 8003294:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329a:	2b00      	cmp	r3, #0
 800329c:	d02a      	beq.n	80032f4 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_UART_Transmit_DMA+0xec>)
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_UART_Transmit_DMA+0xf0>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_UART_Transmit_DMA+0xf4>)
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ba:	2200      	movs	r2, #0
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	4619      	mov	r1, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3328      	adds	r3, #40	; 0x28
 80032ce:	461a      	mov	r2, r3
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f7fd fd48 	bl	8000d66 <HAL_DMA_Start_IT>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2210      	movs	r2, #16
 80032e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e012      	b.n	800331a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2240      	movs	r2, #64	; 0x40
 80032fa:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003312:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08003df7 	.word	0x08003df7
 8003328:	08003e45 	.word	0x08003e45
 800332c:	08003edf 	.word	0x08003edf

08003330 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003342:	2b20      	cmp	r3, #32
 8003344:	d16c      	bne.n	8003420 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_UART_Receive_DMA+0x22>
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e065      	b.n	8003422 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_UART_Receive_DMA+0x34>
 8003360:	2302      	movs	r3, #2
 8003362:	e05e      	b.n	8003422 <HAL_UART_Receive_DMA+0xf2>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2222      	movs	r2, #34	; 0x22
 8003384:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02a      	beq.n	80033e4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003392:	4a26      	ldr	r2, [pc, #152]	; (800342c <HAL_UART_Receive_DMA+0xfc>)
 8003394:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339a:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_UART_Receive_DMA+0x100>)
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <HAL_UART_Receive_DMA+0x104>)
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	461a      	mov	r2, r3
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	f7fd fcd0 	bl	8000d66 <HAL_DMA_Start_IT>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2210      	movs	r2, #16
 80033d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e01e      	b.n	8003422 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	08003e61 	.word	0x08003e61
 8003430:	08003ec3 	.word	0x08003ec3
 8003434:	08003edf 	.word	0x08003edf

08003438 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800344e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d124      	bne.n	80034b8 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fcc6 	bl	8000e24 <HAL_DMA_Abort>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fdd8 	bl	8001058 <HAL_DMA_GetError>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d104      	bne.n	80034b8 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2210      	movs	r2, #16
 80034b2:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e013      	b.n	80034e0 <HAL_UART_AbortReceive+0xa8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	220f      	movs	r2, #15
 80034c6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f640 030f 	movw	r3, #2063	; 0x80f
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8114 	beq.w	800375e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
      }
      return;
 800353e:	e10e      	b.n	800375e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80d6 	beq.w	80036f4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80cb 	beq.w	80036f4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <HAL_UART_IRQHandler+0x9e>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <HAL_UART_IRQHandler+0xc6>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2202      	movs	r2, #2
 80035a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a6:	f043 0204 	orr.w	r2, r3, #4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <HAL_UART_IRQHandler+0xee>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	f043 0202 	orr.w	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2208      	movs	r2, #8
 80035fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003600:	f043 0208 	orr.w	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00f      	beq.n	8003632 <HAL_UART_IRQHandler+0x14a>
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8093 	beq.w	8003762 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003664:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d004      	beq.n	800367e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d031      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fb99 	bl	8003db6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d123      	bne.n	80036da <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ae:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_UART_IRQHandler+0x288>)
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fbed 	bl	8000e96 <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00e      	b.n	80036f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f86c 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e00a      	b.n	80036f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f868 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f864 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80036ee:	e038      	b.n	8003762 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	bf00      	nop
    return;
 80036f2:	e036      	b.n	8003762 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <HAL_UART_IRQHandler+0x232>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fc4e 	bl	8003fb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003718:	e026      	b.n	8003768 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
    }
    return;
 800373e:	e012      	b.n	8003766 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <HAL_UART_IRQHandler+0x280>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fc14 	bl	8003f82 <UART_EndTransmit_IT>
    return;
 800375a:	bf00      	nop
 800375c:	e004      	b.n	8003768 <HAL_UART_IRQHandler+0x280>
      return;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_UART_IRQHandler+0x280>
    return;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_UART_IRQHandler+0x280>
    return;
 8003766:	bf00      	nop
  }

}
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	08003f57 	.word	0x08003f57

08003774 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4ba2      	ldr	r3, [pc, #648]	; (8003a7c <UART_SetConfig+0x2b8>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6939      	ldr	r1, [r7, #16]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a90      	ldr	r2, [pc, #576]	; (8003a80 <UART_SetConfig+0x2bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d121      	bne.n	8003888 <UART_SetConfig+0xc4>
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <UART_SetConfig+0x2c0>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d817      	bhi.n	8003880 <UART_SetConfig+0xbc>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x94>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003869 	.word	0x08003869
 800385c:	08003875 	.word	0x08003875
 8003860:	0800387b 	.word	0x0800387b
 8003864:	0800386f 	.word	0x0800386f
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e01e      	b.n	80038ac <UART_SetConfig+0xe8>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e01b      	b.n	80038ac <UART_SetConfig+0xe8>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e018      	b.n	80038ac <UART_SetConfig+0xe8>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e015      	b.n	80038ac <UART_SetConfig+0xe8>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	bf00      	nop
 8003886:	e011      	b.n	80038ac <UART_SetConfig+0xe8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7e      	ldr	r2, [pc, #504]	; (8003a88 <UART_SetConfig+0x2c4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d102      	bne.n	8003898 <UART_SetConfig+0xd4>
 8003892:	2300      	movs	r3, #0
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e009      	b.n	80038ac <UART_SetConfig+0xe8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7b      	ldr	r2, [pc, #492]	; (8003a8c <UART_SetConfig+0x2c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d102      	bne.n	80038a8 <UART_SetConfig+0xe4>
 80038a2:	2300      	movs	r3, #0
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e001      	b.n	80038ac <UART_SetConfig+0xe8>
 80038a8:	2310      	movs	r3, #16
 80038aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	f040 8082 	bne.w	80039bc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d85e      	bhi.n	800397c <UART_SetConfig+0x1b8>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0x100>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	08003909 	.word	0x08003909
 80038cc:	08003929 	.word	0x08003929
 80038d0:	0800397d 	.word	0x0800397d
 80038d4:	08003945 	.word	0x08003945
 80038d8:	0800397d 	.word	0x0800397d
 80038dc:	0800397d 	.word	0x0800397d
 80038e0:	0800397d 	.word	0x0800397d
 80038e4:	08003965 	.word	0x08003965
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7fe feb8 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 80038ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	005a      	lsls	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	b29b      	uxth	r3, r3
 8003904:	61bb      	str	r3, [r7, #24]
        break;
 8003906:	e03c      	b.n	8003982 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe feca 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 800390c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	005a      	lsls	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	61bb      	str	r3, [r7, #24]
        break;
 8003926:	e02c      	b.n	8003982 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003932:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6852      	ldr	r2, [r2, #4]
 800393a:	fbb3 f3f2 	udiv	r3, r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	61bb      	str	r3, [r7, #24]
        break;
 8003942:	e01e      	b.n	8003982 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003944:	f7fe fe14 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003948:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	005a      	lsls	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	b29b      	uxth	r3, r3
 8003960:	61bb      	str	r3, [r7, #24]
        break;
 8003962:	e00e      	b.n	8003982 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	61bb      	str	r3, [r7, #24]
        break;
 800397a:	e002      	b.n	8003982 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
        break;
 8003980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d916      	bls.n	80039b6 <UART_SetConfig+0x1f2>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d212      	bcs.n	80039b6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f023 030f 	bic.w	r3, r3, #15
 8003998:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	897a      	ldrh	r2, [r7, #10]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	e07d      	b.n	8003ab2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
 80039ba:	e07a      	b.n	8003ab2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d866      	bhi.n	8003a90 <UART_SetConfig+0x2cc>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x204>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	08003a29 	.word	0x08003a29
 80039d4:	08003a91 	.word	0x08003a91
 80039d8:	08003a45 	.word	0x08003a45
 80039dc:	08003a91 	.word	0x08003a91
 80039e0:	08003a91 	.word	0x08003a91
 80039e4:	08003a91 	.word	0x08003a91
 80039e8:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fe36 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 80039f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	085a      	lsrs	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	441a      	add	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e045      	b.n	8003a96 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0a:	f7fe fe49 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8003a0e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	085a      	lsrs	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	61bb      	str	r3, [r7, #24]
        break;
 8003a26:	e036      	b.n	8003a96 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003a32:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6852      	ldr	r2, [r2, #4]
 8003a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	61bb      	str	r3, [r7, #24]
        break;
 8003a42:	e028      	b.n	8003a96 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a44:	f7fe fd94 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003a48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	085a      	lsrs	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	61bb      	str	r3, [r7, #24]
        break;
 8003a60:	e019      	b.n	8003a96 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	61bb      	str	r3, [r7, #24]
        break;
 8003a78:	e00d      	b.n	8003a96 <UART_SetConfig+0x2d2>
 8003a7a:	bf00      	nop
 8003a7c:	efff69f3 	.word	0xefff69f3
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
        break;
 8003a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d908      	bls.n	8003aae <UART_SetConfig+0x2ea>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d204      	bcs.n	8003aae <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	e001      	b.n	8003ab2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01a      	beq.n	8003bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc6:	d10a      	bne.n	8003bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c1a:	f7fc ff6f 	bl	8000afc <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d10e      	bne.n	8003c4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f82a 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e020      	b.n	8003c8e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d10e      	bne.n	8003c78 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f814 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e00a      	b.n	8003c8e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	e05d      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d059      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fc ff24 	bl	8000afc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11b      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e042      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d02b      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1a:	d123      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d24:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e00f      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d092      	beq.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003da2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dcc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d014      	beq.n	8003e36 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e22:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e34:	e002      	b.n	8003e3c <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f003 f940 	bl	80070bc <HAL_UART_TxCpltCallback>
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff fc8e 	bl	8003774 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d01e      	beq.n	8003eb4 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fc67 	bl	8003788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fc63 	bl	800379c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d109      	bne.n	8003f1a <UART_DMAError+0x3c>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b21      	cmp	r3, #33	; 0x21
 8003f0a:	d106      	bne.n	8003f1a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7ff ff39 	bl	8003d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d109      	bne.n	8003f3c <UART_DMAError+0x5e>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b22      	cmp	r3, #34	; 0x22
 8003f2c:	d106      	bne.n	8003f3c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff3d 	bl	8003db6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f40:	f043 0210 	orr.w	r2, r3, #16
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff fc31 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4e:	bf00      	nop
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fc1b 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f003 f888 	bl	80070bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fda:	2b84      	cmp	r3, #132	; 0x84
 8003fdc:	d005      	beq.n	8003fea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3303      	adds	r3, #3
 8003fe8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffe:	f3ef 8305 	mrs	r3, IPSR
 8004002:	607b      	str	r3, [r7, #4]
  return(result);
 8004004:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004020:	f001 fa94 	bl	800554c <vTaskStartScheduler>
  
  return osOK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	bd80      	pop	{r7, pc}

0800402a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800402a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402c:	b089      	sub	sp, #36	; 0x24
 800402e:	af04      	add	r7, sp, #16
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <osThreadCreate+0x54>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01c      	beq.n	800407e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685c      	ldr	r4, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681d      	ldr	r5, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691e      	ldr	r6, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffb6 	bl	8003fc8 <makeFreeRtosPriority>
 800405c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004066:	9202      	str	r2, [sp, #8]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	9100      	str	r1, [sp, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4632      	mov	r2, r6
 8004070:	4629      	mov	r1, r5
 8004072:	4620      	mov	r0, r4
 8004074:	f001 f8b0 	bl	80051d8 <xTaskCreateStatic>
 8004078:	4603      	mov	r3, r0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e01c      	b.n	80040b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685c      	ldr	r4, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408a:	b29e      	uxth	r6, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff98 	bl	8003fc8 <makeFreeRtosPriority>
 8004098:	4602      	mov	r2, r0
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	9200      	str	r2, [sp, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4632      	mov	r2, r6
 80040a6:	4629      	mov	r1, r5
 80040a8:	4620      	mov	r0, r4
 80040aa:	f001 f8ee 	bl	800528a <xTaskCreate>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d001      	beq.n	80040b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <osDelay+0x16>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	e000      	b.n	80040da <osDelay+0x18>
 80040d8:	2301      	movs	r3, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fa02 	bl	80054e4 <vTaskDelay>
  
  return osOK;
 80040e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80040ea:	b590      	push	{r4, r7, lr}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af02      	add	r7, sp, #8
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <osMessageCreate+0x38>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68dc      	ldr	r4, [r3, #12]
 8004114:	2300      	movs	r3, #0
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4623      	mov	r3, r4
 800411a:	f000 fb3b 	bl	8004794 <xQueueGenericCreateStatic>
 800411e:	4603      	mov	r3, r0
 8004120:	e008      	b.n	8004134 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	4619      	mov	r1, r3
 800412e:	f000 fba3 	bl	8004878 <xQueueGenericCreate>
 8004132:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b08b      	sub	sp, #44	; 0x2c
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	617b      	str	r3, [r7, #20]
    return event;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	461c      	mov	r4, r3
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800416a:	e054      	b.n	8004216 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d103      	bne.n	8004184 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800417c:	f04f 33ff 	mov.w	r3, #4294967295
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e009      	b.n	8004198 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d006      	beq.n	8004198 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <osMessageGet+0x5c>
      ticks = 1;
 8004194:	2301      	movs	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004198:	f7ff ff2e 	bl	8003ff8 <inHandlerMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01c      	beq.n	80041dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80041a2:	f107 0220 	add.w	r2, r7, #32
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	68b8      	ldr	r0, [r7, #8]
 80041b0:	f000 fe28 	bl	8004e04 <xQueueReceiveFromISR>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d102      	bne.n	80041c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80041ba:	2310      	movs	r3, #16
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e001      	b.n	80041c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01d      	beq.n	8004206 <osMessageGet+0xca>
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <osMessageGet+0xe4>)
 80041cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	e014      	b.n	8004206 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	3304      	adds	r3, #4
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	4619      	mov	r1, r3
 80041e6:	68b8      	ldr	r0, [r7, #8]
 80041e8:	f000 fd30 	bl	8004c4c <xQueueReceive>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80041f2:	2310      	movs	r3, #16
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e006      	b.n	8004206 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <osMessageGet+0xc6>
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <osMessageGet+0xc8>
 8004202:	2340      	movs	r3, #64	; 0x40
 8004204:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	461c      	mov	r4, r3
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	372c      	adds	r7, #44	; 0x2c
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	bf00      	nop
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800422a:	201c      	movs	r0, #28
 800422c:	f002 fcf0 	bl	8006c10 <pvPortMalloc>
 8004230:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f98a 	bl	800455c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800424e:	687b      	ldr	r3, [r7, #4]
	}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b090      	sub	sp, #64	; 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004278:	f04f 0330 	mov.w	r3, #48	; 0x30
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	e7fe      	b.n	800428a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <xEventGroupWaitBits+0x52>
 8004296:	f04f 0330 	mov.w	r3, #48	; 0x30
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e7fe      	b.n	80042a8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <xEventGroupWaitBits+0x6c>
 80042b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e7fe      	b.n	80042c2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c4:	f001 fe1a 	bl	8005efc <xTaskGetSchedulerState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <xEventGroupWaitBits+0x7c>
 80042ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <xEventGroupWaitBits+0x80>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <xEventGroupWaitBits+0x82>
 80042d8:	2300      	movs	r3, #0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <xEventGroupWaitBits+0x9a>
 80042de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e7fe      	b.n	80042f0 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80042f2:	f001 f98f 	bl	8005614 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004302:	f000 f909 	bl	8004518 <prvTestWaitCondition>
 8004306:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004312:	2300      	movs	r3, #0
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d028      	beq.n	800436e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	43db      	mvns	r3, r3
 8004324:	401a      	ands	r2, r3
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e020      	b.n	800436e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800432c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
 800433a:	e018      	b.n	800436e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435a:	1d18      	adds	r0, r3, #4
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	4313      	orrs	r3, r2
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	4619      	mov	r1, r3
 8004366:	f001 fb49 	bl	80059fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800436e:	f001 f95f 	bl	8005630 <xTaskResumeAll>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004376:	2b00      	cmp	r3, #0
 8004378:	d031      	beq.n	80043de <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <xEventGroupWaitBits+0x190>)
 8004382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004390:	f001 fe56 	bl	8006040 <uxTaskResetEventItemValue>
 8004394:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80043a0:	f002 fb1c 	bl	80069dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80043b0:	f000 f8b2 	bl	8004518 <prvTestWaitCondition>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d006      	beq.n	80043ce <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	401a      	ands	r2, r3
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80043d2:	f002 fb31 	bl	8006a38 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3740      	adds	r7, #64	; 0x40
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80043f6:	2300      	movs	r3, #0
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <xEventGroupSetBits+0x30>
 8004408:	f04f 0330 	mov.w	r3, #48	; 0x30
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	e7fe      	b.n	800441a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <xEventGroupSetBits+0x4e>
 8004426:	f04f 0330 	mov.w	r3, #48	; 0x30
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e7fe      	b.n	8004438 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	3304      	adds	r3, #4
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	3308      	adds	r3, #8
 8004444:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004446:	f001 f8e5 	bl	8005614 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	431a      	orrs	r2, r3
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800445c:	e03c      	b.n	80044d8 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004474:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800447c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004498:	e008      	b.n	80044ac <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d101      	bne.n	80044ac <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044cc:	4619      	mov	r1, r3
 80044ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044d0:	f001 fb5a 	bl	8005b88 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80044d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1be      	bne.n	800445e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	43db      	mvns	r3, r3
 80044e8:	401a      	ands	r2, r3
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80044ee:	f001 f89f 	bl	8005630 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	681b      	ldr	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3738      	adds	r7, #56	; 0x38
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff6e 	bl	80043ec <xEventGroupSetBits>
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e007      	b.n	800454e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d101      	bne.n	800454e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800454e:	697b      	ldr	r3, [r7, #20]
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0208 	add.w	r2, r3, #8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 0208 	add.w	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f103 0208 	add.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d103      	bne.n	800461e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e00c      	b.n	8004638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3308      	adds	r3, #8
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e002      	b.n	800462c <vListInsert+0x2e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d2f6      	bcs.n	8004626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d103      	bne.n	80046a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <xQueueGenericReset+0x28>
 80046d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046ec:	f002 f976 	bl	80069dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	3b01      	subs	r3, #1
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	441a      	add	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	22ff      	movs	r2, #255	; 0xff
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	22ff      	movs	r2, #255	; 0xff
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d114      	bne.n	800476c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01a      	beq.n	8004780 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3310      	adds	r3, #16
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f9b8 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d012      	beq.n	8004780 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <xQueueGenericReset+0xcc>)
 800475c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	e009      	b.n	8004780 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3310      	adds	r3, #16
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fef3 	bl	800455c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff feee 	bl	800455c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004780:	f002 f95a 	bl	8006a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004784:	2301      	movs	r3, #1
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	; 0x38
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <xQueueGenericCreateStatic+0x28>
 80047a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ba:	e7fe      	b.n	80047ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <xQueueGenericCreateStatic+0x42>
 80047c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	e7fe      	b.n	80047d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <xQueueGenericCreateStatic+0x4e>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <xQueueGenericCreateStatic+0x52>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <xQueueGenericCreateStatic+0x54>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <xQueueGenericCreateStatic+0x6c>
 80047ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	e7fe      	b.n	80047fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <xQueueGenericCreateStatic+0x78>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <xQueueGenericCreateStatic+0x7c>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <xQueueGenericCreateStatic+0x7e>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <xQueueGenericCreateStatic+0x96>
 8004816:	f04f 0330 	mov.w	r3, #48	; 0x30
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e7fe      	b.n	8004828 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800482a:	2348      	movs	r3, #72	; 0x48
 800482c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b48      	cmp	r3, #72	; 0x48
 8004832:	d009      	beq.n	8004848 <xQueueGenericCreateStatic+0xb4>
 8004834:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e7fe      	b.n	8004846 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800485a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f842 	bl	80048f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004870:	4618      	mov	r0, r3
 8004872:	3730      	adds	r7, #48	; 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <xQueueGenericCreate+0x28>
 800488c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e7fe      	b.n	800489e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e004      	b.n	80048b6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3348      	adds	r3, #72	; 0x48
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 f9a8 	bl	8006c10 <pvPortMalloc>
 80048c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	3348      	adds	r3, #72	; 0x48
 80048cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d6:	79fa      	ldrb	r2, [r7, #7]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f805 	bl	80048f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80048e8:	69bb      	ldr	r3, [r7, #24]
	}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e002      	b.n	8004914 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004920:	2101      	movs	r1, #1
 8004922:	69b8      	ldr	r0, [r7, #24]
 8004924:	f7ff fece 	bl	80046c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <xQueueGenericSend+0x30>
 800494c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	e7fe      	b.n	800495e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <xQueueGenericSend+0x3e>
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <xQueueGenericSend+0x42>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSend+0x44>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <xQueueGenericSend+0x5c>
 8004978:	f04f 0330 	mov.w	r3, #48	; 0x30
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e7fe      	b.n	800498a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <xQueueGenericSend+0x6a>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <xQueueGenericSend+0x6e>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSend+0x70>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <xQueueGenericSend+0x88>
 80049a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	e7fe      	b.n	80049b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049b8:	f001 faa0 	bl	8005efc <xTaskGetSchedulerState>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <xQueueGenericSend+0x98>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <xQueueGenericSend+0x9c>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <xQueueGenericSend+0x9e>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <xQueueGenericSend+0xb6>
 80049d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049e6:	f001 fff9 	bl	80069dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <xQueueGenericSend+0xcc>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d129      	bne.n	8004a50 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a02:	f000 fa7c 	bl	8004efe <prvCopyDataToQueue>
 8004a06:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f855 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a20:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <xQueueGenericSend+0x1f0>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	e00a      	b.n	8004a48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <xQueueGenericSend+0x1f0>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a48:	f001 fff6 	bl	8006a38 <vPortExitCritical>
				return pdPASS;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e063      	b.n	8004b18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a56:	f001 ffef 	bl	8006a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e05c      	b.n	8004b18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 f8ed 	bl	8005c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a72:	f001 ffe1 	bl	8006a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a76:	f000 fdcd 	bl	8005614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a7a:	f001 ffaf 	bl	80069dc <vPortEnterCritical>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d103      	bne.n	8004a94 <xQueueGenericSend+0x164>
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d103      	bne.n	8004aaa <xQueueGenericSend+0x17a>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aaa:	f001 ffc5 	bl	8006a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aae:	1d3a      	adds	r2, r7, #4
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f8dc 	bl	8005c74 <xTaskCheckForTimeOut>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d124      	bne.n	8004b0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac4:	f000 fb13 	bl	80050ee <prvIsQueueFull>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 ff6c 	bl	80059b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ade:	f000 fa9e 	bl	800501e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ae2:	f000 fda5 	bl	8005630 <xTaskResumeAll>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f af7c 	bne.w	80049e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <xQueueGenericSend+0x1f0>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	e772      	b.n	80049e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b02:	f000 fa8c 	bl	800501e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b06:	f000 fd93 	bl	8005630 <xTaskResumeAll>
 8004b0a:	e76c      	b.n	80049e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0e:	f000 fa86 	bl	800501e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b12:	f000 fd8d 	bl	8005630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b16:	2300      	movs	r3, #0
		}
	}
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3738      	adds	r7, #56	; 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <xQueueGenericSendFromISR+0x2c>
 8004b3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4e:	e7fe      	b.n	8004b4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <xQueueGenericSendFromISR+0x3a>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <xQueueGenericSendFromISR+0x3e>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <xQueueGenericSendFromISR+0x40>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <xQueueGenericSendFromISR+0x58>
 8004b68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	623b      	str	r3, [r7, #32]
 8004b7a:	e7fe      	b.n	8004b7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d103      	bne.n	8004b8a <xQueueGenericSendFromISR+0x66>
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <xQueueGenericSendFromISR+0x6a>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <xQueueGenericSendFromISR+0x6c>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <xQueueGenericSendFromISR+0x84>
 8004b94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e7fe      	b.n	8004ba6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ba8:	f001 fff4 	bl	8006b94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bac:	f3ef 8211 	mrs	r2, BASEPRI
 8004bb0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	61ba      	str	r2, [r7, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <xQueueGenericSendFromISR+0xb6>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d12c      	bne.n	8004c34 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bea:	f000 f988 	bl	8004efe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d112      	bne.n	8004c1e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d016      	beq.n	8004c2e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3324      	adds	r3, #36	; 0x24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ff5d 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e007      	b.n	8004c2e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c22:	3301      	adds	r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	b25a      	sxtb	r2, r3
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c32:	e001      	b.n	8004c38 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3738      	adds	r7, #56	; 0x38
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <xQueueReceive+0x2e>
	__asm volatile
 8004c66:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	e7fe      	b.n	8004c78 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <xQueueReceive+0x3c>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <xQueueReceive+0x40>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <xQueueReceive+0x42>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <xQueueReceive+0x5a>
 8004c92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ca6:	f001 f929 	bl	8005efc <xTaskGetSchedulerState>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <xQueueReceive+0x6a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <xQueueReceive+0x6e>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueReceive+0x70>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <xQueueReceive+0x88>
 8004cc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e7fe      	b.n	8004cd2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cd4:	f001 fe82 	bl	80069dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01f      	beq.n	8004d24 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce8:	f000 f973 	bl	8004fd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00f      	beq.n	8004d1c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	3310      	adds	r3, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fedf 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d0c:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <xQueueReceive+0x1b4>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d1c:	f001 fe8c 	bl	8006a38 <vPortExitCritical>
				return pdPASS;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e069      	b.n	8004df8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d2a:	f001 fe85 	bl	8006a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e062      	b.n	8004df8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ff83 	bl	8005c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d46:	f001 fe77 	bl	8006a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d4a:	f000 fc63 	bl	8005614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d4e:	f001 fe45 	bl	80069dc <vPortEnterCritical>
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d103      	bne.n	8004d68 <xQueueReceive+0x11c>
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6e:	b25b      	sxtb	r3, r3
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <xQueueReceive+0x132>
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7e:	f001 fe5b 	bl	8006a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d82:	1d3a      	adds	r2, r7, #4
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ff72 	bl	8005c74 <xTaskCheckForTimeOut>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d123      	bne.n	8004dde <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d98:	f000 f993 	bl	80050c2 <prvIsQueueEmpty>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d017      	beq.n	8004dd2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	3324      	adds	r3, #36	; 0x24
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fe02 	bl	80059b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db2:	f000 f934 	bl	800501e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004db6:	f000 fc3b 	bl	8005630 <xTaskResumeAll>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d189      	bne.n	8004cd4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <xQueueReceive+0x1b4>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	e780      	b.n	8004cd4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd4:	f000 f923 	bl	800501e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dd8:	f000 fc2a 	bl	8005630 <xTaskResumeAll>
 8004ddc:	e77a      	b.n	8004cd4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de0:	f000 f91d 	bl	800501e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004de4:	f000 fc24 	bl	8005630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f000 f96a 	bl	80050c2 <prvIsQueueEmpty>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f43f af6f 	beq.w	8004cd4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004df6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3730      	adds	r7, #48	; 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <xQueueReceiveFromISR+0x2a>
 8004e1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	e7fe      	b.n	8004e2c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <xQueueReceiveFromISR+0x38>
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <xQueueReceiveFromISR+0x3c>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <xQueueReceiveFromISR+0x3e>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <xQueueReceiveFromISR+0x56>
 8004e46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e7fe      	b.n	8004e58 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e5a:	f001 fe9b 	bl	8006b94 <vPortValidateInterruptPriority>
	__asm volatile
 8004e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61ba      	str	r2, [r7, #24]
 8004e74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d02f      	beq.n	8004ee6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e94:	f000 f89d 	bl	8004fd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	1e5a      	subs	r2, r3, #1
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d112      	bne.n	8004ed0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fe04 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e007      	b.n	8004ee0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	b25a      	sxtb	r2, r3
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	e001      	b.n	8004eea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3738      	adds	r7, #56	; 0x38
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10d      	bne.n	8004f38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d14d      	bne.n	8004fc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 f805 	bl	8005f38 <xTaskPriorityDisinherit>
 8004f2e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	e043      	b.n	8004fc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d119      	bne.n	8004f72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6898      	ldr	r0, [r3, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	461a      	mov	r2, r3
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	f002 f94b 	bl	80071e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d32b      	bcc.n	8004fc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	e026      	b.n	8004fc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68d8      	ldr	r0, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	f002 f931 	bl	80071e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d207      	bcs.n	8004fae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	425b      	negs	r3, r3
 8004fa8:	441a      	add	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d105      	bne.n	8004fc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fc8:	697b      	ldr	r3, [r7, #20]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d303      	bcc.n	8005006 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68d9      	ldr	r1, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	461a      	mov	r2, r3
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	f002 f8e7 	bl	80071e4 <memcpy>
	}
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005026:	f001 fcd9 	bl	80069dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005030:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005032:	e011      	b.n	8005058 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fd3f 	bl	8005ac4 <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800504c:	f000 fe72 	bl	8005d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3b01      	subs	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dce9      	bgt.n	8005034 <prvUnlockQueue+0x16>
 8005060:	e000      	b.n	8005064 <prvUnlockQueue+0x46>
					break;
 8005062:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800506c:	f001 fce4 	bl	8006a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005070:	f001 fcb4 	bl	80069dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800507c:	e011      	b.n	80050a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3310      	adds	r3, #16
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fd1a 	bl	8005ac4 <xTaskRemoveFromEventList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005096:	f000 fe4d 	bl	8005d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	3b01      	subs	r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dce9      	bgt.n	800507e <prvUnlockQueue+0x60>
 80050aa:	e000      	b.n	80050ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	22ff      	movs	r2, #255	; 0xff
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050b6:	f001 fcbf 	bl	8006a38 <vPortExitCritical>
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ca:	f001 fc87 	bl	80069dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e001      	b.n	80050e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050e0:	f001 fcaa 	bl	8006a38 <vPortExitCritical>

	return xReturn;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f6:	f001 fc71 	bl	80069dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	429a      	cmp	r2, r3
 8005104:	d102      	bne.n	800510c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005106:	2301      	movs	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e001      	b.n	8005110 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005110:	f001 fc92 	bl	8006a38 <vPortExitCritical>

	return xReturn;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e014      	b.n	800515a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005130:	4a0e      	ldr	r2, [pc, #56]	; (800516c <vQueueAddToRegistry+0x4c>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800513c:	490b      	ldr	r1, [pc, #44]	; (800516c <vQueueAddToRegistry+0x4c>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <vQueueAddToRegistry+0x4c>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005152:	e005      	b.n	8005160 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b07      	cmp	r3, #7
 800515e:	d9e7      	bls.n	8005130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	200017b8 	.word	0x200017b8

08005170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005180:	f001 fc2c 	bl	80069dc <vPortEnterCritical>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800518a:	b25b      	sxtb	r3, r3
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d103      	bne.n	800519a <vQueueWaitForMessageRestricted+0x2a>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d103      	bne.n	80051b0 <vQueueWaitForMessageRestricted+0x40>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b0:	f001 fc42 	bl	8006a38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3324      	adds	r3, #36	; 0x24
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fc53 	bl	8005a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ca:	6978      	ldr	r0, [r7, #20]
 80051cc:	f7ff ff27 	bl	800501e <prvUnlockQueue>
	}
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	; 0x38
 80051dc:	af04      	add	r7, sp, #16
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <xTaskCreateStatic+0x28>
	__asm volatile
 80051ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	e7fe      	b.n	80051fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <xTaskCreateStatic+0x42>
 8005206:	f04f 0330 	mov.w	r3, #48	; 0x30
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e7fe      	b.n	8005218 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800521a:	2354      	movs	r3, #84	; 0x54
 800521c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b54      	cmp	r3, #84	; 0x54
 8005222:	d009      	beq.n	8005238 <xTaskCreateStatic+0x60>
 8005224:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e7fe      	b.n	8005236 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01e      	beq.n	800527c <xTaskCreateStatic+0xa4>
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2202      	movs	r2, #2
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005256:	2300      	movs	r3, #0
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f850 	bl	8005314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005276:	f000 f8cb 	bl	8005410 <prvAddNewTaskToReadyList>
 800527a:	e001      	b.n	8005280 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005280:	697b      	ldr	r3, [r7, #20]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800528a:	b580      	push	{r7, lr}
 800528c:	b08c      	sub	sp, #48	; 0x30
 800528e:	af04      	add	r7, sp, #16
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fcb6 	bl	8006c10 <pvPortMalloc>
 80052a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052ac:	2054      	movs	r0, #84	; 0x54
 80052ae:	f001 fcaf 	bl	8006c10 <pvPortMalloc>
 80052b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
 80052c0:	e005      	b.n	80052ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	f001 fd66 	bl	8006d94 <vPortFree>
 80052c8:	e001      	b.n	80052ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d017      	beq.n	8005304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	2300      	movs	r3, #0
 80052e0:	9303      	str	r3, [sp, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	9302      	str	r3, [sp, #8]
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f80e 	bl	8005314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f8:	69f8      	ldr	r0, [r7, #28]
 80052fa:	f000 f889 	bl	8005410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e002      	b.n	800530a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800530a:	69bb      	ldr	r3, [r7, #24]
	}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800532c:	3b01      	subs	r3, #1
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <prvInitialiseNewTask+0x46>
 8005346:	f04f 0330 	mov.w	r3, #48	; 0x30
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e7fe      	b.n	8005358 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e012      	b.n	8005386 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	7819      	ldrb	r1, [r3, #0]
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	3334      	adds	r3, #52	; 0x34
 8005370:	460a      	mov	r2, r1
 8005372:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d9e9      	bls.n	8005360 <prvInitialiseNewTask+0x4c>
 800538c:	e000      	b.n	8005390 <prvInitialiseNewTask+0x7c>
		{
			break;
 800538e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	2b06      	cmp	r3, #6
 800539c:	d901      	bls.n	80053a2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800539e:	2306      	movs	r3, #6
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f8ef 	bl	800459c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	3318      	adds	r3, #24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff f8ea 	bl	800459c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	f1c3 0207 	rsb	r2, r3, #7
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	69b8      	ldr	r0, [r7, #24]
 80053f2:	f001 f9cd 	bl	8006790 <pxPortInitialiseStack>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005408:	bf00      	nop
 800540a:	3720      	adds	r7, #32
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005418:	f001 fae0 	bl	80069dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800541c:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <prvAddNewTaskToReadyList+0xb8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <prvAddNewTaskToReadyList+0xb8>)
 8005424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <prvAddNewTaskToReadyList+0xbc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800542e:	4a27      	ldr	r2, [pc, #156]	; (80054cc <prvAddNewTaskToReadyList+0xbc>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <prvAddNewTaskToReadyList+0xb8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d110      	bne.n	800545e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800543c:	f000 fc9e 	bl	8005d7c <prvInitialiseTaskLists>
 8005440:	e00d      	b.n	800545e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005442:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <prvAddNewTaskToReadyList+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800544a:	4b20      	ldr	r3, [pc, #128]	; (80054cc <prvAddNewTaskToReadyList+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d802      	bhi.n	800545e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <prvAddNewTaskToReadyList+0xbc>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800545e:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <prvAddNewTaskToReadyList+0xc4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <prvAddNewTaskToReadyList+0xc4>)
 8005466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <prvAddNewTaskToReadyList+0xc8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <prvAddNewTaskToReadyList+0xc8>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a15      	ldr	r2, [pc, #84]	; (80054dc <prvAddNewTaskToReadyList+0xcc>)
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7ff f890 	bl	80045b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005496:	f001 facf 	bl	8006a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <prvAddNewTaskToReadyList+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <prvAddNewTaskToReadyList+0xbc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d207      	bcs.n	80054c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <prvAddNewTaskToReadyList+0xd0>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000840 	.word	0x20000840
 80054cc:	20000740 	.word	0x20000740
 80054d0:	2000084c 	.word	0x2000084c
 80054d4:	2000085c 	.word	0x2000085c
 80054d8:	20000848 	.word	0x20000848
 80054dc:	20000744 	.word	0x20000744
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <vTaskDelay+0x60>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <vTaskDelay+0x2e>
 80054fe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	e7fe      	b.n	8005510 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005512:	f000 f87f 	bl	8005614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005516:	2100      	movs	r1, #0
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fda9 	bl	8006070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800551e:	f000 f887 	bl	8005630 <xTaskResumeAll>
 8005522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <vTaskDelay+0x64>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000868 	.word	0x20000868
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800555a:	463a      	mov	r2, r7
 800555c:	1d39      	adds	r1, r7, #4
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4618      	mov	r0, r3
 8005564:	f7fa fe62 	bl	800022c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	460a      	mov	r2, r1
 800557a:	4920      	ldr	r1, [pc, #128]	; (80055fc <vTaskStartScheduler+0xb0>)
 800557c:	4820      	ldr	r0, [pc, #128]	; (8005600 <vTaskStartScheduler+0xb4>)
 800557e:	f7ff fe2b 	bl	80051d8 <xTaskCreateStatic>
 8005582:	4602      	mov	r2, r0
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <vTaskStartScheduler+0xb8>)
 8005586:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <vTaskStartScheduler+0xb8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e001      	b.n	800559a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055a0:	f000 fdcc 	bl	800613c <xTimerCreateTimerTask>
 80055a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d115      	bne.n	80055d8 <vTaskStartScheduler+0x8c>
 80055ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <vTaskStartScheduler+0xbc>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c6:	4b11      	ldr	r3, [pc, #68]	; (800560c <vTaskStartScheduler+0xc0>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <vTaskStartScheduler+0xc4>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055d2:	f001 f965 	bl	80068a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d6:	e00d      	b.n	80055f4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d109      	bne.n	80055f4 <vTaskStartScheduler+0xa8>
 80055e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e7fe      	b.n	80055f2 <vTaskStartScheduler+0xa6>
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	080072b4 	.word	0x080072b4
 8005600:	08005d4d 	.word	0x08005d4d
 8005604:	20000864 	.word	0x20000864
 8005608:	20000860 	.word	0x20000860
 800560c:	2000084c 	.word	0x2000084c
 8005610:	20000844 	.word	0x20000844

08005614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <vTaskSuspendAll+0x18>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	4a03      	ldr	r2, [pc, #12]	; (800562c <vTaskSuspendAll+0x18>)
 8005620:	6013      	str	r3, [r2, #0]
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000868 	.word	0x20000868

08005630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800563e:	4b41      	ldr	r3, [pc, #260]	; (8005744 <xTaskResumeAll+0x114>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <xTaskResumeAll+0x2a>
 8005646:	f04f 0330 	mov.w	r3, #48	; 0x30
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	e7fe      	b.n	8005658 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800565a:	f001 f9bf 	bl	80069dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800565e:	4b39      	ldr	r3, [pc, #228]	; (8005744 <xTaskResumeAll+0x114>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3b01      	subs	r3, #1
 8005664:	4a37      	ldr	r2, [pc, #220]	; (8005744 <xTaskResumeAll+0x114>)
 8005666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005668:	4b36      	ldr	r3, [pc, #216]	; (8005744 <xTaskResumeAll+0x114>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d161      	bne.n	8005734 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <xTaskResumeAll+0x118>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05d      	beq.n	8005734 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005678:	e02e      	b.n	80056d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800567a:	4b34      	ldr	r3, [pc, #208]	; (800574c <xTaskResumeAll+0x11c>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3318      	adds	r3, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fff2 	bl	8004670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe ffed 	bl	8004670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <xTaskResumeAll+0x120>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <xTaskResumeAll+0x120>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <xTaskResumeAll+0x124>)
 80056b6:	441a      	add	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fe ff79 	bl	80045b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <xTaskResumeAll+0x128>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80056d2:	4b22      	ldr	r3, [pc, #136]	; (800575c <xTaskResumeAll+0x12c>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d8:	4b1c      	ldr	r3, [pc, #112]	; (800574c <xTaskResumeAll+0x11c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1cc      	bne.n	800567a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056e6:	f000 fbe3 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056ea:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <xTaskResumeAll+0x130>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056f6:	f000 f847 	bl	8005788 <xTaskIncrementTick>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <xTaskResumeAll+0x12c>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f1      	bne.n	80056f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005712:	4b13      	ldr	r3, [pc, #76]	; (8005760 <xTaskResumeAll+0x130>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <xTaskResumeAll+0x12c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005724:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <xTaskResumeAll+0x134>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005734:	f001 f980 	bl	8006a38 <vPortExitCritical>

	return xAlreadyYielded;
 8005738:	68bb      	ldr	r3, [r7, #8]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000868 	.word	0x20000868
 8005748:	20000840 	.word	0x20000840
 800574c:	20000800 	.word	0x20000800
 8005750:	20000848 	.word	0x20000848
 8005754:	20000744 	.word	0x20000744
 8005758:	20000740 	.word	0x20000740
 800575c:	20000854 	.word	0x20000854
 8005760:	20000850 	.word	0x20000850
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <xTaskGetTickCount+0x1c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005774:	687b      	ldr	r3, [r7, #4]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000844 	.word	0x20000844

08005788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005792:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <xTaskIncrementTick+0x14c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 808c 	bne.w	80058b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057a4:	4a4c      	ldr	r2, [pc, #304]	; (80058d8 <xTaskIncrementTick+0x150>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11f      	bne.n	80057f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057b0:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <xTaskIncrementTick+0x154>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <xTaskIncrementTick+0x46>
 80057ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	e7fe      	b.n	80057cc <xTaskIncrementTick+0x44>
 80057ce:	4b43      	ldr	r3, [pc, #268]	; (80058dc <xTaskIncrementTick+0x154>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <xTaskIncrementTick+0x158>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a40      	ldr	r2, [pc, #256]	; (80058dc <xTaskIncrementTick+0x154>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <xTaskIncrementTick+0x158>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b40      	ldr	r3, [pc, #256]	; (80058e4 <xTaskIncrementTick+0x15c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	4a3e      	ldr	r2, [pc, #248]	; (80058e4 <xTaskIncrementTick+0x15c>)
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	f000 fb60 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057f0:	4b3d      	ldr	r3, [pc, #244]	; (80058e8 <xTaskIncrementTick+0x160>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d34d      	bcc.n	8005896 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057fa:	4b38      	ldr	r3, [pc, #224]	; (80058dc <xTaskIncrementTick+0x154>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <xTaskIncrementTick+0x80>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <xTaskIncrementTick+0x82>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <xTaskIncrementTick+0x160>)
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	601a      	str	r2, [r3, #0]
					break;
 8005816:	e03e      	b.n	8005896 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <xTaskIncrementTick+0x154>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d203      	bcs.n	8005838 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005830:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <xTaskIncrementTick+0x160>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6013      	str	r3, [r2, #0]
						break;
 8005836:	e02e      	b.n	8005896 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe ff17 	bl	8004670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3318      	adds	r3, #24
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe ff0e 	bl	8004670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <xTaskIncrementTick+0x164>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	4a22      	ldr	r2, [pc, #136]	; (80058ec <xTaskIncrementTick+0x164>)
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <xTaskIncrementTick+0x168>)
 8005874:	441a      	add	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe fe9a 	bl	80045b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <xTaskIncrementTick+0x16c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	429a      	cmp	r2, r3
 800588e:	d3b4      	bcc.n	80057fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005894:	e7b1      	b.n	80057fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <xTaskIncrementTick+0x16c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4914      	ldr	r1, [pc, #80]	; (80058f0 <xTaskIncrementTick+0x168>)
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d907      	bls.n	80058be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e004      	b.n	80058be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058b4:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <xTaskIncrementTick+0x170>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a0f      	ldr	r2, [pc, #60]	; (80058f8 <xTaskIncrementTick+0x170>)
 80058bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <xTaskIncrementTick+0x174>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058ca:	697b      	ldr	r3, [r7, #20]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000868 	.word	0x20000868
 80058d8:	20000844 	.word	0x20000844
 80058dc:	200007f8 	.word	0x200007f8
 80058e0:	200007fc 	.word	0x200007fc
 80058e4:	20000858 	.word	0x20000858
 80058e8:	20000860 	.word	0x20000860
 80058ec:	20000848 	.word	0x20000848
 80058f0:	20000744 	.word	0x20000744
 80058f4:	20000740 	.word	0x20000740
 80058f8:	20000850 	.word	0x20000850
 80058fc:	20000854 	.word	0x20000854

08005900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <vTaskSwitchContext+0xa0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <vTaskSwitchContext+0xa4>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005914:	e03e      	b.n	8005994 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <vTaskSwitchContext+0xa4>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <vTaskSwitchContext+0xa8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f1c3 031f 	rsb	r3, r3, #31
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	491e      	ldr	r1, [pc, #120]	; (80059ac <vTaskSwitchContext+0xac>)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005946:	f04f 0330 	mov.w	r3, #48	; 0x30
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	e7fe      	b.n	8005958 <vTaskSwitchContext+0x58>
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4a11      	ldr	r2, [pc, #68]	; (80059ac <vTaskSwitchContext+0xac>)
 8005966:	4413      	add	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3308      	adds	r3, #8
 800597c:	429a      	cmp	r2, r3
 800597e:	d104      	bne.n	800598a <vTaskSwitchContext+0x8a>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vTaskSwitchContext+0xb0>)
 8005992:	6013      	str	r3, [r2, #0]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000868 	.word	0x20000868
 80059a4:	20000854 	.word	0x20000854
 80059a8:	20000848 	.word	0x20000848
 80059ac:	20000744 	.word	0x20000744
 80059b0:	20000740 	.word	0x20000740

080059b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <vTaskPlaceOnEventList+0x24>
 80059c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e7fe      	b.n	80059d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <vTaskPlaceOnEventList+0x44>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3318      	adds	r3, #24
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe fe0c 	bl	80045fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059e6:	2101      	movs	r1, #1
 80059e8:	6838      	ldr	r0, [r7, #0]
 80059ea:	f000 fb41 	bl	8006070 <prvAddCurrentTaskToDelayedList>
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000740 	.word	0x20000740

080059fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <vTaskPlaceOnUnorderedEventList+0x26>
 8005a0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e7fe      	b.n	8005a20 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <vTaskPlaceOnUnorderedEventList+0x42>
 8005a2a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e7fe      	b.n	8005a3c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <vTaskPlaceOnUnorderedEventList+0x70>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a48:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <vTaskPlaceOnUnorderedEventList+0x70>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3318      	adds	r3, #24
 8005a50:	4619      	mov	r1, r3
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7fe fdaf 	bl	80045b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a58:	2101      	movs	r1, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fb08 	bl	8006070 <prvAddCurrentTaskToDelayedList>
}
 8005a60:	bf00      	nop
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000868 	.word	0x20000868
 8005a6c:	20000740 	.word	0x20000740

08005a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <vTaskPlaceOnEventListRestricted+0x26>
 8005a82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e7fe      	b.n	8005a94 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3318      	adds	r3, #24
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7fe fd89 	bl	80045b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005aae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f000 fadc 	bl	8006070 <prvAddCurrentTaskToDelayedList>
	}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000740 	.word	0x20000740

08005ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <xTaskRemoveFromEventList+0x2a>
 8005ada:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e7fe      	b.n	8005aec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3318      	adds	r3, #24
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fdbc 	bl	8004670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <xTaskRemoveFromEventList+0xac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11c      	bne.n	8005b3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fdb3 	bl	8004670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	2201      	movs	r2, #1
 8005b10:	409a      	lsls	r2, r3
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <xTaskRemoveFromEventList+0xb0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <xTaskRemoveFromEventList+0xb0>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <xTaskRemoveFromEventList+0xb4>)
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fd3f 	bl	80045b6 <vListInsertEnd>
 8005b38:	e005      	b.n	8005b46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4619      	mov	r1, r3
 8005b40:	480e      	ldr	r0, [pc, #56]	; (8005b7c <xTaskRemoveFromEventList+0xb8>)
 8005b42:	f7fe fd38 	bl	80045b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <xTaskRemoveFromEventList+0xbc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d905      	bls.n	8005b60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <xTaskRemoveFromEventList+0xc0>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e001      	b.n	8005b64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005b64:	697b      	ldr	r3, [r7, #20]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000868 	.word	0x20000868
 8005b74:	20000848 	.word	0x20000848
 8005b78:	20000744 	.word	0x20000744
 8005b7c:	20000800 	.word	0x20000800
 8005b80:	20000740 	.word	0x20000740
 8005b84:	20000854 	.word	0x20000854

08005b88 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <vTaskRemoveFromUnorderedEventList+0xac>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <vTaskRemoveFromUnorderedEventList+0x26>
 8005b9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	e7fe      	b.n	8005bac <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <vTaskRemoveFromUnorderedEventList+0x50>
 8005bc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e7fe      	b.n	8005bd6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fe fd49 	bl	8004670 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fd44 	bl	8004670 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005c08:	441a      	add	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe fcd0 	bl	80045b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d902      	bls.n	8005c2a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
	}
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000868 	.word	0x20000868
 8005c38:	20000848 	.word	0x20000848
 8005c3c:	20000744 	.word	0x20000744
 8005c40:	20000740 	.word	0x20000740
 8005c44:	20000854 	.word	0x20000854

08005c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <vTaskInternalSetTimeOutState+0x24>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <vTaskInternalSetTimeOutState+0x28>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	20000858 	.word	0x20000858
 8005c70:	20000844 	.word	0x20000844

08005c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <xTaskCheckForTimeOut+0x24>
 8005c84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e7fe      	b.n	8005c96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <xTaskCheckForTimeOut+0x3e>
 8005c9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cb2:	f000 fe93 	bl	80069dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <xTaskCheckForTimeOut+0xb8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d102      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e023      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <xTaskCheckForTimeOut+0xbc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d007      	beq.n	8005cf2 <xTaskCheckForTimeOut+0x7e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e015      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d20b      	bcs.n	8005d14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff9d 	bl	8005c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e004      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f000 fe8b 	bl	8006a38 <vPortExitCritical>

	return xReturn;
 8005d22:	69fb      	ldr	r3, [r7, #28]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000844 	.word	0x20000844
 8005d30:	20000858 	.word	0x20000858

08005d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <vTaskMissedYield+0x14>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000854 	.word	0x20000854

08005d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d54:	f000 f852 	bl	8005dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvIdleTask+0x28>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d9f9      	bls.n	8005d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <prvIdleTask+0x2c>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d70:	e7f0      	b.n	8005d54 <prvIdleTask+0x8>
 8005d72:	bf00      	nop
 8005d74:	20000744 	.word	0x20000744
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e00c      	b.n	8005da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <prvInitialiseTaskLists+0x60>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fbe0 	bl	800455c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d9ef      	bls.n	8005d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005daa:	f7fe fbd7 	bl	800455c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005db0:	f7fe fbd4 	bl	800455c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <prvInitialiseTaskLists+0x6c>)
 8005db6:	f7fe fbd1 	bl	800455c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dba:	480c      	ldr	r0, [pc, #48]	; (8005dec <prvInitialiseTaskLists+0x70>)
 8005dbc:	f7fe fbce 	bl	800455c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dc0:	480b      	ldr	r0, [pc, #44]	; (8005df0 <prvInitialiseTaskLists+0x74>)
 8005dc2:	f7fe fbcb 	bl	800455c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvInitialiseTaskLists+0x78>)
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvInitialiseTaskLists+0x7c>)
 8005dce:	4a05      	ldr	r2, [pc, #20]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000744 	.word	0x20000744
 8005de0:	200007d0 	.word	0x200007d0
 8005de4:	200007e4 	.word	0x200007e4
 8005de8:	20000800 	.word	0x20000800
 8005dec:	20000814 	.word	0x20000814
 8005df0:	2000082c 	.word	0x2000082c
 8005df4:	200007f8 	.word	0x200007f8
 8005df8:	200007fc 	.word	0x200007fc

08005dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e02:	e019      	b.n	8005e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e04:	f000 fdea 	bl	80069dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <prvCheckTasksWaitingTermination+0x4c>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fc2b 	bl	8004670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2e:	f000 fe03 	bl	8006a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f80e 	bl	8005e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e1      	bne.n	8005e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000814 	.word	0x20000814
 8005e4c:	20000840 	.word	0x20000840
 8005e50:	20000828 	.word	0x20000828

08005e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ff92 	bl	8006d94 <vPortFree>
				vPortFree( pxTCB );
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 ff8f 	bl	8006d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e76:	e017      	b.n	8005ea8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d103      	bne.n	8005e8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 ff86 	bl	8006d94 <vPortFree>
	}
 8005e88:	e00e      	b.n	8005ea8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d009      	beq.n	8005ea8 <prvDeleteTCB+0x54>
 8005e94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e7fe      	b.n	8005ea6 <prvDeleteTCB+0x52>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <prvResetNextTaskUnblockTime+0x14>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <prvResetNextTaskUnblockTime+0x16>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <prvResetNextTaskUnblockTime+0x48>)
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed2:	e008      	b.n	8005ee6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a05      	ldr	r2, [pc, #20]	; (8005ef8 <prvResetNextTaskUnblockTime+0x48>)
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	200007f8 	.word	0x200007f8
 8005ef8:	20000860 	.word	0x20000860

08005efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <xTaskGetSchedulerState+0x34>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e008      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <xTaskGetSchedulerState+0x38>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e001      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f22:	687b      	ldr	r3, [r7, #4]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000084c 	.word	0x2000084c
 8005f34:	20000868 	.word	0x20000868

08005f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d06c      	beq.n	8006028 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <xTaskPriorityDisinherit+0xfc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d009      	beq.n	8005f6c <xTaskPriorityDisinherit+0x34>
 8005f58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e7fe      	b.n	8005f6a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d109      	bne.n	8005f88 <xTaskPriorityDisinherit+0x50>
 8005f74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	e7fe      	b.n	8005f86 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d044      	beq.n	8006028 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d140      	bne.n	8006028 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fb60 	bl	8004670 <uxListRemove>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	491f      	ldr	r1, [pc, #124]	; (8006038 <xTaskPriorityDisinherit+0x100>)
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xTaskPriorityDisinherit+0xaa>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	4b18      	ldr	r3, [pc, #96]	; (800603c <xTaskPriorityDisinherit+0x104>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <xTaskPriorityDisinherit+0x104>)
 8005fe0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f1c3 0207 	rsb	r2, r3, #7
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <xTaskPriorityDisinherit+0x104>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	4a0d      	ldr	r2, [pc, #52]	; (800603c <xTaskPriorityDisinherit+0x104>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <xTaskPriorityDisinherit+0x100>)
 8006016:	441a      	add	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe fac9 	bl	80045b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006028:	697b      	ldr	r3, [r7, #20]
	}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000740 	.word	0x20000740
 8006038:	20000744 	.word	0x20000744
 800603c:	20000848 	.word	0x20000848

08006040 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <uxTaskResetEventItemValue+0x2c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <uxTaskResetEventItemValue+0x2c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <uxTaskResetEventItemValue+0x2c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1c2 0207 	rsb	r2, r2, #7
 800605c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800605e:	687b      	ldr	r3, [r7, #4]
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000740 	.word	0x20000740

08006070 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800607a:	4b29      	ldr	r3, [pc, #164]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006080:	4b28      	ldr	r3, [pc, #160]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe faf2 	bl	8004670 <uxListRemove>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2201      	movs	r2, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	4b21      	ldr	r3, [pc, #132]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4013      	ands	r3, r2
 80060a6:	4a20      	ldr	r2, [pc, #128]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d10a      	bne.n	80060c8 <prvAddCurrentTaskToDelayedList+0x58>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	481a      	ldr	r0, [pc, #104]	; (800612c <prvAddCurrentTaskToDelayedList+0xbc>)
 80060c2:	f7fe fa78 	bl	80045b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060c6:	e026      	b.n	8006116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d209      	bcs.n	80060f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e0:	4b13      	ldr	r3, [pc, #76]	; (8006130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f7fe fa86 	bl	80045fe <vListInsert>
}
 80060f2:	e010      	b.n	8006116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe fa7c 	bl	80045fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d202      	bcs.n	8006116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006110:	4a09      	ldr	r2, [pc, #36]	; (8006138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6013      	str	r3, [r2, #0]
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000844 	.word	0x20000844
 8006124:	20000740 	.word	0x20000740
 8006128:	20000848 	.word	0x20000848
 800612c:	2000082c 	.word	0x2000082c
 8006130:	200007fc 	.word	0x200007fc
 8006134:	200007f8 	.word	0x200007f8
 8006138:	20000860 	.word	0x20000860

0800613c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006146:	f000 fac3 	bl	80066d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800614a:	4b1c      	ldr	r3, [pc, #112]	; (80061bc <xTimerCreateTimerTask+0x80>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d021      	beq.n	8006196 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800615a:	1d3a      	adds	r2, r7, #4
 800615c:	f107 0108 	add.w	r1, r7, #8
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	4618      	mov	r0, r3
 8006166:	f7fa f87b 	bl	8000260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	9202      	str	r2, [sp, #8]
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	2302      	movs	r3, #2
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2300      	movs	r3, #0
 800617a:	460a      	mov	r2, r1
 800617c:	4910      	ldr	r1, [pc, #64]	; (80061c0 <xTimerCreateTimerTask+0x84>)
 800617e:	4811      	ldr	r0, [pc, #68]	; (80061c4 <xTimerCreateTimerTask+0x88>)
 8006180:	f7ff f82a 	bl	80051d8 <xTaskCreateStatic>
 8006184:	4602      	mov	r2, r0
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <xTimerCreateTimerTask+0x8c>)
 8006188:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <xTimerCreateTimerTask+0x8c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006192:	2301      	movs	r3, #1
 8006194:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <xTimerCreateTimerTask+0x74>
 800619c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e7fe      	b.n	80061ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061b0:	697b      	ldr	r3, [r7, #20]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000089c 	.word	0x2000089c
 80061c0:	080072bc 	.word	0x080072bc
 80061c4:	080062e5 	.word	0x080062e5
 80061c8:	200008a0 	.word	0x200008a0

080061cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08a      	sub	sp, #40	; 0x28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <xTimerGenericCommand+0x2c>
 80061e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	e7fe      	b.n	80061f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <xTimerGenericCommand+0x94>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02a      	beq.n	8006256 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b05      	cmp	r3, #5
 8006210:	dc18      	bgt.n	8006244 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006212:	f7ff fe73 	bl	8005efc <xTaskGetSchedulerState>
 8006216:	4603      	mov	r3, r0
 8006218:	2b02      	cmp	r3, #2
 800621a:	d109      	bne.n	8006230 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <xTimerGenericCommand+0x94>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	f107 0110 	add.w	r1, r7, #16
 8006224:	2300      	movs	r3, #0
 8006226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006228:	f7fe fb82 	bl	8004930 <xQueueGenericSend>
 800622c:	6278      	str	r0, [r7, #36]	; 0x24
 800622e:	e012      	b.n	8006256 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <xTimerGenericCommand+0x94>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f107 0110 	add.w	r1, r7, #16
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	f7fe fb78 	bl	8004930 <xQueueGenericSend>
 8006240:	6278      	str	r0, [r7, #36]	; 0x24
 8006242:	e008      	b.n	8006256 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <xTimerGenericCommand+0x94>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	f107 0110 	add.w	r1, r7, #16
 800624c:	2300      	movs	r3, #0
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	f7fe fc68 	bl	8004b24 <xQueueGenericSendFromISR>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006258:	4618      	mov	r0, r3
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2000089c 	.word	0x2000089c

08006264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800626e:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <prvProcessExpiredTimer+0x7c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	3304      	adds	r3, #4
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe f9f7 	bl	8004670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d121      	bne.n	80062ce <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	18d1      	adds	r1, r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f000 f8c8 	bl	800642c <prvInsertTimerInActiveList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d015      	beq.n	80062ce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	2100      	movs	r1, #0
 80062ac:	6978      	ldr	r0, [r7, #20]
 80062ae:	f7ff ff8d 	bl	80061cc <xTimerGenericCommand>
 80062b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <prvProcessExpiredTimer+0x6a>
 80062ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e7fe      	b.n	80062cc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	4798      	blx	r3
}
 80062d6:	bf00      	nop
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000894 	.word	0x20000894

080062e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f857 	bl	80063a4 <prvGetNextExpireTime>
 80062f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4619      	mov	r1, r3
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f803 	bl	8006308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006302:	f000 f8d5 	bl	80064b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006306:	e7f1      	b.n	80062ec <prvTimerTask+0x8>

08006308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006312:	f7ff f97f 	bl	8005614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f866 	bl	80063ec <prvSampleTimeNow>
 8006320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d130      	bne.n	800638a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <prvProcessTimerOrBlockTask+0x3c>
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	429a      	cmp	r2, r3
 8006334:	d806      	bhi.n	8006344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006336:	f7ff f97b 	bl	8005630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff ff91 	bl	8006264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006342:	e024      	b.n	800638e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <prvProcessTimerOrBlockTask+0x90>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <prvProcessTimerOrBlockTask+0x94>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	f7fe ff01 	bl	8005170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800636e:	f7ff f95f 	bl	8005630 <xTaskResumeAll>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <prvProcessTimerOrBlockTask+0x98>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
}
 8006388:	e001      	b.n	800638e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800638a:	f7ff f951 	bl	8005630 <xTaskResumeAll>
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000898 	.word	0x20000898
 800639c:	2000089c 	.word	0x2000089c
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <prvGetNextExpireTime+0x44>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <prvGetNextExpireTime+0x44>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e001      	b.n	80063da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	20000894 	.word	0x20000894

080063ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063f4:	f7ff f9b8 	bl	8005768 <xTaskGetTickCount>
 80063f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <prvSampleTimeNow+0x3c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d205      	bcs.n	8006410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006404:	f000 f904 	bl	8006610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e002      	b.n	8006416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006416:	4a04      	ldr	r2, [pc, #16]	; (8006428 <prvSampleTimeNow+0x3c>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200008a4 	.word	0x200008a4

0800642c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d812      	bhi.n	8006478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	429a      	cmp	r2, r3
 800645e:	d302      	bcc.n	8006466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e01b      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <prvInsertTimerInActiveList+0x7c>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3304      	adds	r3, #4
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7fe f8c4 	bl	80045fe <vListInsert>
 8006476:	e012      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d206      	bcs.n	800648e <prvInsertTimerInActiveList+0x62>
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e007      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <prvInsertTimerInActiveList+0x80>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7fe f8b0 	bl	80045fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000898 	.word	0x20000898
 80064ac:	20000894 	.word	0x20000894

080064b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064b6:	e099      	b.n	80065ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da17      	bge.n	80064ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	3304      	adds	r3, #4
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <prvProcessReceivedCommands+0x2e>
 80064ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e7fe      	b.n	80064dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e4:	6850      	ldr	r0, [r2, #4]
 80064e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e8:	6892      	ldr	r2, [r2, #8]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db7a      	blt.n	80065ea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	3304      	adds	r3, #4
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe f8b3 	bl	8004670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800650a:	463b      	mov	r3, r7
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff6d 	bl	80063ec <prvSampleTimeNow>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b09      	cmp	r3, #9
 8006518:	d868      	bhi.n	80065ec <prvProcessReceivedCommands+0x13c>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <prvProcessReceivedCommands+0x70>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006549 	.word	0x08006549
 8006524:	08006549 	.word	0x08006549
 8006528:	08006549 	.word	0x08006549
 800652c:	080065ed 	.word	0x080065ed
 8006530:	080065a3 	.word	0x080065a3
 8006534:	080065d9 	.word	0x080065d9
 8006538:	08006549 	.word	0x08006549
 800653c:	08006549 	.word	0x08006549
 8006540:	080065ed 	.word	0x080065ed
 8006544:	080065a3 	.word	0x080065a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	18d1      	adds	r1, r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006556:	f7ff ff69 	bl	800642c <prvInsertTimerInActiveList>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d045      	beq.n	80065ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006566:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d13d      	bne.n	80065ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	441a      	add	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	2100      	movs	r1, #0
 8006580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006582:	f7ff fe23 	bl	80061cc <xTimerGenericCommand>
 8006586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d12e      	bne.n	80065ec <prvProcessReceivedCommands+0x13c>
 800658e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e7fe      	b.n	80065a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <prvProcessReceivedCommands+0x114>
 80065b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e7fe      	b.n	80065c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	18d1      	adds	r1, r2, r3
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f7ff ff2b 	bl	800642c <prvInsertTimerInActiveList>
					break;
 80065d6:	e009      	b.n	80065ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80065e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e4:	f000 fbd6 	bl	8006d94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065e8:	e000      	b.n	80065ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <prvProcessReceivedCommands+0x15c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	1d39      	adds	r1, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe fb29 	bl	8004c4c <xQueueReceive>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f af5b 	bne.w	80064b8 <prvProcessReceivedCommands+0x8>
	}
}
 8006602:	bf00      	nop
 8006604:	3730      	adds	r7, #48	; 0x30
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	2000089c 	.word	0x2000089c

08006610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006616:	e044      	b.n	80066a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006618:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006622:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe f81d 	bl	8004670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d12d      	bne.n	80066a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d90e      	bls.n	8006676 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006664:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fd ffc5 	bl	80045fe <vListInsert>
 8006674:	e015      	b.n	80066a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006676:	2300      	movs	r3, #0
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	2300      	movs	r3, #0
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	2100      	movs	r1, #0
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fda3 	bl	80061cc <xTimerGenericCommand>
 8006686:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <prvSwitchTimerLists+0x92>
 800668e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	e7fe      	b.n	80066a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1b5      	bne.n	8006618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <prvSwitchTimerLists+0xbc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <prvSwitchTimerLists+0xb8>)
 80066b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066ba:	4a04      	ldr	r2, [pc, #16]	; (80066cc <prvSwitchTimerLists+0xbc>)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000894 	.word	0x20000894
 80066cc:	20000898 	.word	0x20000898

080066d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066d6:	f000 f981 	bl	80069dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066da:	4b15      	ldr	r3, [pc, #84]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d120      	bne.n	8006724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066e2:	4814      	ldr	r0, [pc, #80]	; (8006734 <prvCheckForValidListAndQueue+0x64>)
 80066e4:	f7fd ff3a 	bl	800455c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066e8:	4813      	ldr	r0, [pc, #76]	; (8006738 <prvCheckForValidListAndQueue+0x68>)
 80066ea:	f7fd ff37 	bl	800455c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <prvCheckForValidListAndQueue+0x6c>)
 80066f0:	4a10      	ldr	r2, [pc, #64]	; (8006734 <prvCheckForValidListAndQueue+0x64>)
 80066f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066f4:	4b12      	ldr	r3, [pc, #72]	; (8006740 <prvCheckForValidListAndQueue+0x70>)
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <prvCheckForValidListAndQueue+0x68>)
 80066f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <prvCheckForValidListAndQueue+0x74>)
 8006700:	4a11      	ldr	r2, [pc, #68]	; (8006748 <prvCheckForValidListAndQueue+0x78>)
 8006702:	2110      	movs	r1, #16
 8006704:	200a      	movs	r0, #10
 8006706:	f7fe f845 	bl	8004794 <xQueueGenericCreateStatic>
 800670a:	4602      	mov	r2, r0
 800670c:	4b08      	ldr	r3, [pc, #32]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 800670e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	490b      	ldr	r1, [pc, #44]	; (800674c <prvCheckForValidListAndQueue+0x7c>)
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fcfe 	bl	8005120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006724:	f000 f988 	bl	8006a38 <vPortExitCritical>
}
 8006728:	bf00      	nop
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000089c 	.word	0x2000089c
 8006734:	2000086c 	.word	0x2000086c
 8006738:	20000880 	.word	0x20000880
 800673c:	20000894 	.word	0x20000894
 8006740:	20000898 	.word	0x20000898
 8006744:	20000948 	.word	0x20000948
 8006748:	200008a8 	.word	0x200008a8
 800674c:	080072c4 	.word	0x080072c4

08006750 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800675e:	f06f 0301 	mvn.w	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <xTimerPendFunctionCallFromISR+0x3c>)
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	f107 0114 	add.w	r1, r7, #20
 8006778:	2300      	movs	r3, #0
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	f7fe f9d2 	bl	8004b24 <xQueueGenericSendFromISR>
 8006780:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	; 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	2000089c 	.word	0x2000089c

08006790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3b04      	subs	r3, #4
 80067a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b04      	subs	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067c0:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <pxPortInitialiseStack+0x64>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3b14      	subs	r3, #20
 80067ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f06f 0202 	mvn.w	r2, #2
 80067de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3b20      	subs	r3, #32
 80067e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	080067f9 	.word	0x080067f9

080067f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <prvTaskExitError+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d009      	beq.n	8006820 <prvTaskExitError+0x28>
 800680c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e7fe      	b.n	800681e <prvTaskExitError+0x26>
 8006820:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006832:	bf00      	nop
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0fc      	beq.n	8006834 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c
 800684c:	00000000 	.word	0x00000000

08006850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <pxCurrentTCBConst2>)
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f380 8809 	msr	PSP, r0
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	4770      	bx	lr
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst2>:
 8006870:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006878:	4808      	ldr	r0, [pc, #32]	; (800689c <prvPortStartFirstTask+0x24>)
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f380 8808 	msr	MSP, r0
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8814 	msr	CONTROL, r0
 800688a:	b662      	cpsie	i
 800688c:	b661      	cpsie	f
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	df00      	svc	0
 8006898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800689a:	bf00      	nop
 800689c:	e000ed08 	.word	0xe000ed08

080068a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068a6:	4b44      	ldr	r3, [pc, #272]	; (80069b8 <xPortStartScheduler+0x118>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a44      	ldr	r2, [pc, #272]	; (80069bc <xPortStartScheduler+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <xPortStartScheduler+0x24>
 80068b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	e7fe      	b.n	80068c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068c4:	4b3c      	ldr	r3, [pc, #240]	; (80069b8 <xPortStartScheduler+0x118>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3d      	ldr	r2, [pc, #244]	; (80069c0 <xPortStartScheduler+0x120>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d109      	bne.n	80068e2 <xPortStartScheduler+0x42>
 80068ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e7fe      	b.n	80068e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068e2:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <xPortStartScheduler+0x124>)
 80068e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	22ff      	movs	r2, #255	; 0xff
 80068f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006904:	b2da      	uxtb	r2, r3
 8006906:	4b30      	ldr	r3, [pc, #192]	; (80069c8 <xPortStartScheduler+0x128>)
 8006908:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <xPortStartScheduler+0x12c>)
 800690c:	2207      	movs	r2, #7
 800690e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006910:	e009      	b.n	8006926 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <xPortStartScheduler+0x12c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a2c      	ldr	r2, [pc, #176]	; (80069cc <xPortStartScheduler+0x12c>)
 800691a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d0ef      	beq.n	8006912 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <xPortStartScheduler+0x12c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1c3 0307 	rsb	r3, r3, #7
 800693a:	2b04      	cmp	r3, #4
 800693c:	d009      	beq.n	8006952 <xPortStartScheduler+0xb2>
 800693e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	e7fe      	b.n	8006950 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <xPortStartScheduler+0x12c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	4a1c      	ldr	r2, [pc, #112]	; (80069cc <xPortStartScheduler+0x12c>)
 800695a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <xPortStartScheduler+0x12c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <xPortStartScheduler+0x12c>)
 8006966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006970:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <xPortStartScheduler+0x130>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <xPortStartScheduler+0x130>)
 8006976:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800697a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800697c:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <xPortStartScheduler+0x130>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <xPortStartScheduler+0x130>)
 8006982:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006988:	f000 f8d6 	bl	8006b38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <xPortStartScheduler+0x134>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006992:	f000 f8f5 	bl	8006b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006996:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <xPortStartScheduler+0x138>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a0f      	ldr	r2, [pc, #60]	; (80069d8 <xPortStartScheduler+0x138>)
 800699c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069a2:	f7ff ff69 	bl	8006878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069a6:	f7fe ffab 	bl	8005900 <vTaskSwitchContext>
	prvTaskExitError();
 80069aa:	f7ff ff25 	bl	80067f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed00 	.word	0xe000ed00
 80069bc:	410fc271 	.word	0x410fc271
 80069c0:	410fc270 	.word	0x410fc270
 80069c4:	e000e400 	.word	0xe000e400
 80069c8:	20000990 	.word	0x20000990
 80069cc:	20000994 	.word	0x20000994
 80069d0:	e000ed20 	.word	0xe000ed20
 80069d4:	2000000c 	.word	0x2000000c
 80069d8:	e000ef34 	.word	0xe000ef34

080069dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <vPortEnterCritical+0x54>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <vPortEnterCritical+0x54>)
 80069fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069fe:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <vPortEnterCritical+0x54>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10e      	bne.n	8006a24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <vPortEnterCritical+0x58>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <vPortEnterCritical+0x48>
 8006a10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	e7fe      	b.n	8006a22 <vPortEnterCritical+0x46>
	}
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	2000000c 	.word	0x2000000c
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <vPortExitCritical+0x4c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <vPortExitCritical+0x22>
 8006a46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	e7fe      	b.n	8006a58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x4c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <vPortExitCritical+0x4c>)
 8006a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <vPortExitCritical+0x4c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <vPortExitCritical+0x3e>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ff1e 	bl	8005900 <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b10:	f7fe fe3a 	bl	8005788 <xTaskIncrementTick>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <SysTick_Handler+0x3c>)
 8006b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	2300      	movs	r3, #0
 8006b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <vPortSetupTimerInterrupt+0x34>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x38>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <vPortSetupTimerInterrupt+0x3c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x40>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	099b      	lsrs	r3, r3, #6
 8006b54:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <vPortSetupTimerInterrupt+0x44>)
 8006b56:	3b01      	subs	r3, #1
 8006b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <vPortSetupTimerInterrupt+0x34>)
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	601a      	str	r2, [r3, #0]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	e000e010 	.word	0xe000e010
 8006b70:	e000e018 	.word	0xe000e018
 8006b74:	20000000 	.word	0x20000000
 8006b78:	10624dd3 	.word	0x10624dd3
 8006b7c:	e000e014 	.word	0xe000e014

08006b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b90 <vPortEnableVFP+0x10>
 8006b84:	6801      	ldr	r1, [r0, #0]
 8006b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8a:	6001      	str	r1, [r0, #0]
 8006b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b8e:	bf00      	nop
 8006b90:	e000ed88 	.word	0xe000ed88

08006b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9a:	f3ef 8305 	mrs	r3, IPSR
 8006b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d913      	bls.n	8006bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ba6:	4a16      	ldr	r2, [pc, #88]	; (8006c00 <vPortValidateInterruptPriority+0x6c>)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb0:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <vPortValidateInterruptPriority+0x70>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	7afa      	ldrb	r2, [r7, #11]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d209      	bcs.n	8006bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006bba:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	e7fe      	b.n	8006bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bce:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <vPortValidateInterruptPriority+0x74>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <vPortValidateInterruptPriority+0x78>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d909      	bls.n	8006bf2 <vPortValidateInterruptPriority+0x5e>
 8006bde:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	e7fe      	b.n	8006bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	e000e3f0 	.word	0xe000e3f0
 8006c04:	20000990 	.word	0x20000990
 8006c08:	e000ed0c 	.word	0xe000ed0c
 8006c0c:	20000994 	.word	0x20000994

08006c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c1c:	f7fe fcfa 	bl	8005614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c20:	4b57      	ldr	r3, [pc, #348]	; (8006d80 <pvPortMalloc+0x170>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c28:	f000 f90c 	bl	8006e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c2c:	4b55      	ldr	r3, [pc, #340]	; (8006d84 <pvPortMalloc+0x174>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 808c 	bne.w	8006d52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01c      	beq.n	8006c7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4413      	add	r3, r2
 8006c46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	3308      	adds	r3, #8
 8006c5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <pvPortMalloc+0x6a>
 8006c66:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e7fe      	b.n	8006c78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d068      	beq.n	8006d52 <pvPortMalloc+0x142>
 8006c80:	4b41      	ldr	r3, [pc, #260]	; (8006d88 <pvPortMalloc+0x178>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d863      	bhi.n	8006d52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c8a:	4b40      	ldr	r3, [pc, #256]	; (8006d8c <pvPortMalloc+0x17c>)
 8006c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c8e:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <pvPortMalloc+0x17c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c94:	e004      	b.n	8006ca0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d903      	bls.n	8006cb2 <pvPortMalloc+0xa2>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f1      	bne.n	8006c96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cb2:	4b33      	ldr	r3, [pc, #204]	; (8006d80 <pvPortMalloc+0x170>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d04a      	beq.n	8006d52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	4413      	add	r3, r2
 8006cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d91e      	bls.n	8006d1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <pvPortMalloc+0xf4>
 8006cf0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d16:	69b8      	ldr	r0, [r7, #24]
 8006d18:	f000 f8f6 	bl	8006f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <pvPortMalloc+0x178>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <pvPortMalloc+0x178>)
 8006d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <pvPortMalloc+0x178>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <pvPortMalloc+0x180>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d203      	bcs.n	8006d3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <pvPortMalloc+0x178>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <pvPortMalloc+0x180>)
 8006d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <pvPortMalloc+0x174>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d52:	f7fe fc6d 	bl	8005630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <pvPortMalloc+0x164>
 8006d60:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e7fe      	b.n	8006d72 <pvPortMalloc+0x162>
	return pvReturn;
 8006d74:	69fb      	ldr	r3, [r7, #28]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3728      	adds	r7, #40	; 0x28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	200015a0 	.word	0x200015a0
 8006d84:	200015ac 	.word	0x200015ac
 8006d88:	200015a4 	.word	0x200015a4
 8006d8c:	20001598 	.word	0x20001598
 8006d90:	200015a8 	.word	0x200015a8

08006d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d046      	beq.n	8006e34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006da6:	2308      	movs	r3, #8
 8006da8:	425b      	negs	r3, r3
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <vPortFree+0xa8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <vPortFree+0x42>
 8006dc2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e7fe      	b.n	8006dd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <vPortFree+0x5e>
 8006dde:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	e7fe      	b.n	8006df0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <vPortFree+0xa8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d019      	beq.n	8006e34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d115      	bne.n	8006e34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <vPortFree+0xa8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	401a      	ands	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e18:	f7fe fbfc 	bl	8005614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <vPortFree+0xac>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <vPortFree+0xac>)
 8006e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f000 f86c 	bl	8006f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e30:	f7fe fbfe 	bl	8005630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e34:	bf00      	nop
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	200015ac 	.word	0x200015ac
 8006e40:	200015a4 	.word	0x200015a4

08006e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <prvHeapInit+0xac>)
 8006e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <prvHeapInit+0xac>)
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e90:	2208      	movs	r2, #8
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvHeapInit+0xb4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <prvHeapInit+0xb8>)
 8006ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <prvHeapInit+0xbc>)
 8006eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <prvHeapInit+0xc0>)
 8006ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ee2:	601a      	str	r2, [r3, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000998 	.word	0x20000998
 8006ef4:	20001598 	.word	0x20001598
 8006ef8:	200015a0 	.word	0x200015a0
 8006efc:	200015a8 	.word	0x200015a8
 8006f00:	200015a4 	.word	0x200015a4
 8006f04:	200015ac 	.word	0x200015ac

08006f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f10:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <prvInsertBlockIntoFreeList+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <prvInsertBlockIntoFreeList+0x14>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d8f7      	bhi.n	8006f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d108      	bne.n	8006f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d118      	bne.n	8006f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d00d      	beq.n	8006f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	441a      	add	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e008      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e003      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d002      	beq.n	8006fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20001598 	.word	0x20001598
 8006fb8:	200015a0 	.word	0x200015a0

08006fbc <init_uart_data_transfer>:
uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0,
		tx_complete = true;

void init_uart_data_transfer (void) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
	uart_data_transfer_events = xEventGroupCreate();
 8006fc0:	f7fd f930 	bl	8004224 <xEventGroupCreate>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <init_uart_data_transfer+0x34>)
 8006fc8:	601a      	str	r2, [r3, #0]

	enable_idle_flag_interrupt = true;
 8006fca:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <init_uart_data_transfer+0x38>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8006fd0:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <init_uart_data_transfer+0x3c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <init_uart_data_transfer+0x3c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0210 	orr.w	r2, r2, #16
 8006fde:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8006fe0:	2264      	movs	r2, #100	; 0x64
 8006fe2:	4906      	ldr	r1, [pc, #24]	; (8006ffc <init_uart_data_transfer+0x40>)
 8006fe4:	4804      	ldr	r0, [pc, #16]	; (8006ff8 <init_uart_data_transfer+0x3c>)
 8006fe6:	f7fc f9a3 	bl	8003330 <HAL_UART_Receive_DMA>
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20001614 	.word	0x20001614
 8006ff4:	20001618 	.word	0x20001618
 8006ff8:	20001734 	.word	0x20001734
 8006ffc:	200015b0 	.word	0x200015b0

08007000 <event_group_set_bit_from_isr>:

void transmit_data_by_uart (void) {
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
}

void event_group_set_bit_from_isr (EventGroupHandle_t event_group, uint32_t bit_to_set) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]

	xResult = xEventGroupSetBitsFromISR (event_group, bit_to_set, & xHigherPriorityTaskWoken);
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	480b      	ldr	r0, [pc, #44]	; (8007044 <event_group_set_bit_from_isr+0x44>)
 8007018:	f7ff fb9a 	bl	8006750 <xTimerPendFunctionCallFromISR>
 800701c:	60f8      	str	r0, [r7, #12]

	if (xResult != pdFAIL) {
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <event_group_set_bit_from_isr+0x3a>
	  portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <event_group_set_bit_from_isr+0x3a>
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <event_group_set_bit_from_isr+0x48>)
 800702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	f3bf 8f6f 	isb	sy
	}
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	080044ff 	.word	0x080044ff
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2210      	movs	r2, #16
 800705a:	621a      	str	r2, [r3, #32]

	if(enable_idle_flag_interrupt){
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <HAL_UART_IDLE_Callback+0x60>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_UART_IDLE_Callback+0x20>
		enable_idle_flag_interrupt = false;
 8007064:	4b11      	ldr	r3, [pc, #68]	; (80070ac <HAL_UART_IDLE_Callback+0x60>)
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]
		return;
 800706a:	e01c      	b.n	80070a6 <HAL_UART_IDLE_Callback+0x5a>
	}

	if(tx_complete == false)
 800706c:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <HAL_UART_IDLE_Callback+0x64>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f083 0301 	eor.w	r3, r3, #1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d114      	bne.n	80070a4 <HAL_UART_IDLE_Callback+0x58>
		return;
	else
		tx_complete = false;
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <HAL_UART_IDLE_Callback+0x64>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]

	HAL_UART_AbortReceive(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fc f9d9 	bl	8003438 <HAL_UART_AbortReceive>
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_UART_IDLE_Callback+0x68>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_UART_IDLE_Callback+0x68>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0210 	bic.w	r2, r2, #16
 8007094:	601a      	str	r2, [r3, #0]

	event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_UART_IDLE_Callback+0x6c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2101      	movs	r1, #1
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff ffaf 	bl	8007000 <event_group_set_bit_from_isr>
 80070a2:	e000      	b.n	80070a6 <HAL_UART_IDLE_Callback+0x5a>
		return;
 80070a4:	bf00      	nop
}
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20001618 	.word	0x20001618
 80070b0:	20000010 	.word	0x20000010
 80070b4:	20001734 	.word	0x20001734
 80070b8:	20001614 	.word	0x20001614

080070bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	event_group_set_bit_from_isr(uart_data_transfer_events, TX_DATA_COMPLETE);
 80070c4:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <HAL_UART_TxCpltCallback+0x1c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2102      	movs	r1, #2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff98 	bl	8007000 <event_group_set_bit_from_isr>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20001614 	.word	0x20001614

080070dc <rx_uart_data_task>:

void rx_uart_data_task (void const * argument) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	6078      	str	r0, [r7, #4]
	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 80070e4:	4b08      	ldr	r3, [pc, #32]	; (8007108 <rx_uart_data_task+0x2c>)
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2301      	movs	r3, #1
 80070f0:	2201      	movs	r2, #1
 80070f2:	2101      	movs	r1, #1
 80070f4:	f7fd f8b0 	bl	8004258 <xEventGroupWaitBits>



*/
		// while not have parse call
		xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <rx_uart_data_task+0x2c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2104      	movs	r1, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fd f974 	bl	80043ec <xEventGroupSetBits>
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 8007104:	e7ee      	b.n	80070e4 <rx_uart_data_task+0x8>
 8007106:	bf00      	nop
 8007108:	20001614 	.word	0x20001614

0800710c <tx_uart_data_task>:
	}
}

void tx_uart_data_task(void const * argument) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af02      	add	r7, sp, #8
 8007112:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 8007118:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <tx_uart_data_task+0x7c>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	f04f 33ff 	mov.w	r3, #4294967295
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2301      	movs	r3, #1
 8007124:	2201      	movs	r2, #1
 8007126:	2104      	movs	r1, #4
 8007128:	f7fd f896 	bl	8004258 <xEventGroupWaitBits>

		//get pointer tx_data
		//	tx_data = GET_POINTER_FUNCTION

		if(tx_data != 0)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <tx_uart_data_task+0x3c>
			HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7f9 f84c 	bl	80001d0 <strlen>
 8007138:	4603      	mov	r3, r0
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	4812      	ldr	r0, [pc, #72]	; (800718c <tx_uart_data_task+0x80>)
 8007142:	f7fc f879 	bl	8003238 <HAL_UART_Transmit_DMA>
 8007146:	e004      	b.n	8007152 <tx_uart_data_task+0x46>
		else
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error\r\n", strlen("debug message or error\r\n"));
 8007148:	2218      	movs	r2, #24
 800714a:	4911      	ldr	r1, [pc, #68]	; (8007190 <tx_uart_data_task+0x84>)
 800714c:	480f      	ldr	r0, [pc, #60]	; (800718c <tx_uart_data_task+0x80>)
 800714e:	f7fc f873 	bl	8003238 <HAL_UART_Transmit_DMA>

		xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <tx_uart_data_task+0x7c>)
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f04f 33ff 	mov.w	r3, #4294967295
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2301      	movs	r3, #1
 800715e:	2201      	movs	r2, #1
 8007160:	2102      	movs	r1, #2
 8007162:	f7fd f879 	bl	8004258 <xEventGroupWaitBits>


		tx_complete = true;
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <tx_uart_data_task+0x88>)
 8007168:	2201      	movs	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <tx_uart_data_task+0x80>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <tx_uart_data_task+0x80>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0210 	orr.w	r2, r2, #16
 800717a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 800717c:	2264      	movs	r2, #100	; 0x64
 800717e:	4906      	ldr	r1, [pc, #24]	; (8007198 <tx_uart_data_task+0x8c>)
 8007180:	4802      	ldr	r0, [pc, #8]	; (800718c <tx_uart_data_task+0x80>)
 8007182:	f7fc f8d5 	bl	8003330 <HAL_UART_Receive_DMA>
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 8007186:	e7c7      	b.n	8007118 <tx_uart_data_task+0xc>
 8007188:	20001614 	.word	0x20001614
 800718c:	20001734 	.word	0x20001734
 8007190:	080072cc 	.word	0x080072cc
 8007194:	20000010 	.word	0x20000010
 8007198:	200015b0 	.word	0x200015b0

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0d      	ldr	r6, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1ba4      	subs	r4, r4, r6
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2500      	movs	r5, #0
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4e0b      	ldr	r6, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f000 f82c 	bl	800720c <_init>
 80071b4:	1ba4      	subs	r4, r4, r6
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2500      	movs	r5, #0
 80071ba:	42a5      	cmp	r5, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071c4:	4798      	blx	r3
 80071c6:	3501      	adds	r5, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071ce:	4798      	blx	r3
 80071d0:	3501      	adds	r5, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	08007320 	.word	0x08007320
 80071d8:	08007320 	.word	0x08007320
 80071dc:	08007320 	.word	0x08007320
 80071e0:	08007324 	.word	0x08007324

080071e4 <memcpy>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	1e43      	subs	r3, r0, #1
 80071e8:	440a      	add	r2, r1
 80071ea:	4291      	cmp	r1, r2
 80071ec:	d100      	bne.n	80071f0 <memcpy+0xc>
 80071ee:	bd10      	pop	{r4, pc}
 80071f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f8:	e7f7      	b.n	80071ea <memcpy+0x6>

080071fa <memset>:
 80071fa:	4402      	add	r2, r0
 80071fc:	4603      	mov	r3, r0
 80071fe:	4293      	cmp	r3, r2
 8007200:	d100      	bne.n	8007204 <memset+0xa>
 8007202:	4770      	bx	lr
 8007204:	f803 1b01 	strb.w	r1, [r3], #1
 8007208:	e7f9      	b.n	80071fe <memset+0x4>
	...

0800720c <_init>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr

08007218 <_fini>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr
