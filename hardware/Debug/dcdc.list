
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e8c  08005e8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e8c  08005e8c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e8c  08005e8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000010  08005ea4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08005ea4  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f1e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034ac  00000000  00000000  00036f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  0003a410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ea80  00000000  00000000  0003c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010620  00000000  00000000  0005b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000afc2e  00000000  00000000  0006b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0011b534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dfc 	.word	0x08005dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005dfc 	.word	0x08005dfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <MX_DMA_Init+0x38>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6153      	str	r3, [r2, #20]
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <MX_DMA_Init+0x38>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2105      	movs	r1, #5
 8000202:	200f      	movs	r0, #15
 8000204:	f000 fcfe 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000208:	200f      	movs	r0, #15
 800020a:	f000 fd17 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <vApplicationGetIdleTaskMemory+0x2c>)
 800022c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <vApplicationGetIdleTaskMemory+0x30>)
 8000232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b08c      	sub	sp, #48	; 0x30
 8000254:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_FREERTOS_Init+0x50>)
 8000258:	f107 0420 	add.w	r4, r7, #32
 800025c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800025e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 8000262:	f107 0320 	add.w	r3, r7, #32
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f003 fbfb 	bl	8003a64 <osMessageCreate>
 800026e:	4602      	mov	r2, r0
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_FREERTOS_Init+0x54>)
 8000272:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_FREERTOS_Init+0x58>)
 8000276:	1d3c      	adds	r4, r7, #4
 8000278:	461d      	mov	r5, r3
 800027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fb8a 	bl	80039a4 <osThreadCreate>
 8000290:	4602      	mov	r2, r0
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_FREERTOS_Init+0x5c>)
 8000294:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000296:	bf00      	nop
 8000298:	3730      	adds	r7, #48	; 0x30
 800029a:	46bd      	mov	sp, r7
 800029c:	bdb0      	pop	{r4, r5, r7, pc}
 800029e:	bf00      	nop
 80002a0:	08005e14 	.word	0x08005e14
 80002a4:	20001050 	.word	0x20001050
 80002a8:	08005e30 	.word	0x08005e30
 80002ac:	2000104c 	.word	0x2000104c

080002b0 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <StartDefaultTask+0x5c>)
 80002ba:	6819      	ldr	r1, [r3, #0]
 80002bc:	f107 030c 	add.w	r3, r7, #12
 80002c0:	2264      	movs	r2, #100	; 0x64
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fc38 	bl	8003b38 <osMessageGet>
	if (event.status == osEventMessage) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2b10      	cmp	r3, #16
 80002cc:	d11a      	bne.n	8000304 <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 80002ce:	6939      	ldr	r1, [r7, #16]
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <StartDefaultTask+0x60>)
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	b2c9      	uxtb	r1, r1
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <StartDefaultTask+0x64>)
 80002da:	5499      	strb	r1, [r3, r2]
		num_cell++;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <StartDefaultTask+0x60>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <StartDefaultTask+0x60>)
 80002e6:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <StartDefaultTask+0x60>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <StartDefaultTask+0x64>)
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <StartDefaultTask+0x4e>
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <StartDefaultTask+0x60>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	d102      	bne.n	8000304 <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <StartDefaultTask+0x60>)
 8000300:	2200      	movs	r2, #0
 8000302:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f003 fb99 	bl	8003a3c <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 800030a:	e7d5      	b.n	80002b8 <StartDefaultTask+0x8>
 800030c:	20001050 	.word	0x20001050
 8000310:	20000280 	.word	0x20000280
 8000314:	20000284 	.word	0x20000284

08000318 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b37      	ldr	r3, [pc, #220]	; (800040c <MX_GPIO_Init+0xf4>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a36      	ldr	r2, [pc, #216]	; (800040c <MX_GPIO_Init+0xf4>)
 8000334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <MX_GPIO_Init+0xf4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000346:	4b31      	ldr	r3, [pc, #196]	; (800040c <MX_GPIO_Init+0xf4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a30      	ldr	r2, [pc, #192]	; (800040c <MX_GPIO_Init+0xf4>)
 800034c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b2e      	ldr	r3, [pc, #184]	; (800040c <MX_GPIO_Init+0xf4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b2b      	ldr	r3, [pc, #172]	; (800040c <MX_GPIO_Init+0xf4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a2a      	ldr	r2, [pc, #168]	; (800040c <MX_GPIO_Init+0xf4>)
 8000364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b28      	ldr	r3, [pc, #160]	; (800040c <MX_GPIO_Init+0xf4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b25      	ldr	r3, [pc, #148]	; (800040c <MX_GPIO_Init+0xf4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a24      	ldr	r2, [pc, #144]	; (800040c <MX_GPIO_Init+0xf4>)
 800037c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <MX_GPIO_Init+0xf4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 ff19 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_GPIO_Init+0xf8>)
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	4819      	ldr	r0, [pc, #100]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003b0:	f000 fd9a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003b4:	230c      	movs	r3, #12
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b8:	2302      	movs	r3, #2
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c0:	2303      	movs	r3, #3
 80003c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003c4:	2307      	movs	r3, #7
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	4619      	mov	r1, r3
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f000 fd89 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d6:	2320      	movs	r3, #32
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2300      	movs	r3, #0
 80003e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f0:	f000 fd7a 	bl	8000ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2100      	movs	r1, #0
 80003f8:	2028      	movs	r0, #40	; 0x28
 80003fa:	f000 fc03 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fe:	2028      	movs	r0, #40	; 0x28
 8000400:	f000 fc1c 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 8000404:	bf00      	nop
 8000406:	3728      	adds	r7, #40	; 0x28
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	10210000 	.word	0x10210000
 8000414:	48000800 	.word	0x48000800

08000418 <HAL_UART_IDLE_Callback>:
/* USER CODE BEGIN 0 */
#define MAX_SIZE_COMMAND 20
static uint8_t uart_input_command_buff [MAX_SIZE_COMMAND+1] = {0};
extern osMessageQId command_queueHandle;

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2210      	movs	r2, #16
 8000426:	621a      	str	r2, [r3, #32]
//	HAL_UART_AbortReceive(huart);
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <HAL_UART_IDLE_Callback+0x60>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_UART_IDLE_Callback+0x60>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f022 0210 	bic.w	r2, r2, #16
 8000436:	601a      	str	r2, [r3, #0]
	for (uint8_t num = 0; num <= strlen((const char *)uart_input_command_buff); num++)
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e00b      	b.n	8000456 <HAL_UART_IDLE_Callback+0x3e>
		osMessagePut(command_queueHandle, uart_input_command_buff[num] , 100);
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_UART_IDLE_Callback+0x64>)
 8000440:	6818      	ldr	r0, [r3, #0]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_UART_IDLE_Callback+0x68>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	2264      	movs	r2, #100	; 0x64
 800044a:	4619      	mov	r1, r3
 800044c:	f003 fb34 	bl	8003ab8 <osMessagePut>
	for (uint8_t num = 0; num <= strlen((const char *)uart_input_command_buff); num++)
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	3301      	adds	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
 8000456:	7bfc      	ldrb	r4, [r7, #15]
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <HAL_UART_IDLE_Callback+0x68>)
 800045a:	f7ff feb9 	bl	80001d0 <strlen>
 800045e:	4603      	mov	r3, r0
 8000460:	429c      	cmp	r4, r3
 8000462:	d9ec      	bls.n	800043e <HAL_UART_IDLE_Callback+0x26>

	memset(uart_input_command_buff, 0, MAX_SIZE_COMMAND);
 8000464:	2214      	movs	r2, #20
 8000466:	2100      	movs	r1, #0
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <HAL_UART_IDLE_Callback+0x68>)
 800046a:	f005 fcbe 	bl	8005dea <memset>
//
//	HAL_UART_Receive_DMA(huart, uart_input_command_buff, MAX_SIZE_COMMAND);
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bd90      	pop	{r4, r7, pc}
 8000476:	bf00      	nop
 8000478:	20001118 	.word	0x20001118
 800047c:	20001050 	.word	0x20001050
 8000480:	200002e8 	.word	0x200002e8

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 face 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f81c 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f7ff ff42 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 8000494:	f7ff fea4 	bl	80001e0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000498:	f000 f984 	bl	80007a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800049c:	f000 f9f4 	bl	8000888 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <main+0x40>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2210      	movs	r2, #16
 80004a6:	621a      	str	r2, [r3, #32]
   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <main+0x40>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <main+0x40>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f042 0210 	orr.w	r2, r2, #16
 80004b6:	601a      	str	r2, [r3, #0]
//   HAL_UART_Receive_IT(&huart1, uart_input_command_buff, MAX_SIZE_COMMAND);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80004b8:	f7ff feca 	bl	8000250 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80004bc:	f003 fa6b 	bl	8003996 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x3c>
 80004c2:	bf00      	nop
 80004c4:	20001118 	.word	0x20001118

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b096      	sub	sp, #88	; 0x58
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 fc87 	bl	8005dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fe:	2302      	movs	r3, #2
 8000500:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000502:	2301      	movs	r3, #1
 8000504:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	2302      	movs	r3, #2
 800050c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050e:	2300      	movs	r3, #0
 8000510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000512:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000516:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fe91 	bl	8001244 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000528:	f000 f83a 	bl	80005a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	230f      	movs	r3, #15
 800052e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2102      	movs	r1, #2
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fd83 	bl	8002054 <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000554:	f000 f824 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000558:	2301      	movs	r3, #1
 800055a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4618      	mov	r0, r3
 8000564:	f001 ffde 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800056e:	f000 f817 	bl	80005a0 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3758      	adds	r7, #88	; 0x58
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d101      	bne.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800058e:	f000 fa61 	bl	8000a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40012c00 	.word	0x40012c00

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <HAL_MspInit+0x70>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a19      	ldr	r2, [pc, #100]	; (8000620 <HAL_MspInit+0x70>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_MspInit+0x70>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_MspInit+0x70>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <HAL_MspInit+0x70>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_MspInit+0x70>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2101      	movs	r1, #1
 80005ea:	f06f 0009 	mvn.w	r0, #9
 80005ee:	f000 fb09 	bl	8000c04 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	f06f 0004 	mvn.w	r0, #4
 80005fa:	f000 fb03 	bl	8000c04 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	f06f 0003 	mvn.w	r0, #3
 8000606:	f000 fafd 	bl	8000c04 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	210f      	movs	r1, #15
 800060e:	f06f 0001 	mvn.w	r0, #1
 8000612:	f000 faf7 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	2019      	movs	r0, #25
 800063a:	f000 fae3 	bl	8000c04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800063e:	2019      	movs	r0, #25
 8000640:	f000 fafc 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <HAL_InitTick+0x9c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <HAL_InitTick+0x9c>)
 800064a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <HAL_InitTick+0x9c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065c:	f107 0210 	add.w	r2, r7, #16
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ff2a 	bl	80024c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800066c:	f001 ff06 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8000670:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <HAL_InitTick+0xa0>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	0c9b      	lsrs	r3, r3, #18
 800067c:	3b01      	subs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_InitTick+0xa4>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <HAL_InitTick+0xa8>)
 8000684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_InitTick+0xa4>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_InitTick+0xa4>)
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_InitTick+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_InitTick+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <HAL_InitTick+0xa4>)
 80006a2:	f002 f875 	bl	8002790 <HAL_TIM_Base_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d104      	bne.n	80006b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <HAL_InitTick+0xa4>)
 80006ae:	f002 f89b 	bl	80027e8 <HAL_TIM_Base_Start_IT>
 80006b2:	4603      	mov	r3, r0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	431bde83 	.word	0x431bde83
 80006c8:	20001054 	.word	0x20001054
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <DMA1_Channel5_IRQHandler+0x10>)
 800070a:	f000 fb2a 	bl	8000d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200010d4 	.word	0x200010d4

08000718 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800071e:	f002 f88d 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20001054 	.word	0x20001054

0800072c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM2_IRQHandler+0x10>)
 8000732:	f002 f883 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20001094 	.word	0x20001094

08000740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <USART1_IRQHandler+0x24>)
 8000746:	f002 fc65 	bl	8003014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <USART1_IRQHandler+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	2b10      	cmp	r3, #16
 8000756:	d102      	bne.n	800075e <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <USART1_IRQHandler+0x24>)
 800075a:	f7ff fe5d 	bl	8000418 <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20001118 	.word	0x20001118

08000768 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800076c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000770:	f000 fd44 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <SystemInit+0x28>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <SystemInit+0x28>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SystemInit+0x28>)
 800078e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000792:	609a      	str	r2, [r3, #8]
#endif
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_TIM2_Init+0x98>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_TIM2_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_TIM2_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_TIM2_Init+0x98>)
 80007d8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80007dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_TIM2_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_TIM2_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_TIM2_Init+0x98>)
 80007ec:	f001 ffd0 	bl	8002790 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007f6:	f7ff fed3 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_TIM2_Init+0x98>)
 8000808:	f002 f937 	bl	8002a7a <HAL_TIM_ConfigClockSource>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000812:	f7ff fec5 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_TIM2_Init+0x98>)
 8000824:	f002 fb1c 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800082e:	f7ff feb7 	bl	80005a0 <Error_Handler>
  }

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20001094 	.word	0x20001094

08000840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000850:	d113      	bne.n	800087a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_TIM_Base_MspInit+0x44>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <HAL_TIM_Base_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_TIM_Base_MspInit+0x44>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	201c      	movs	r0, #28
 8000870:	f000 f9c8 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000874:	201c      	movs	r0, #28
 8000876:	f000 f9e1 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART1_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008cc:	f002 fb54 	bl	8002f78 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f7ff fe63 	bl	80005a0 <Error_Handler>
  }

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20001118 	.word	0x20001118
 80008e4:	40013800 	.word	0x40013800

080008e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <HAL_UART_MspInit+0xd8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d155      	bne.n	80009b6 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <HAL_UART_MspInit+0xdc>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093a:	23c0      	movs	r3, #192	; 0xc0
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <HAL_UART_MspInit+0xe0>)
 8000956:	f000 fac7 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_MspInit+0xe4>)
 800095c:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <HAL_UART_MspInit+0xe8>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_UART_MspInit+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0xe4>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_UART_MspInit+0xe4>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_UART_MspInit+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_UART_MspInit+0xe4>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_UART_MspInit+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_UART_MspInit+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <HAL_UART_MspInit+0xe4>)
 800098c:	f000 f964 	bl	8000c58 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000996:	f7ff fe03 	bl	80005a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_UART_MspInit+0xe4>)
 800099e:	66da      	str	r2, [r3, #108]	; 0x6c
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_UART_MspInit+0xe4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2105      	movs	r1, #5
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 f92a 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b0:	2025      	movs	r0, #37	; 0x25
 80009b2:	f000 f943 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000400 	.word	0x48000400
 80009cc:	200010d4 	.word	0x200010d4
 80009d0:	40020058 	.word	0x40020058

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009da:	e003      	b.n	80009e4 <LoopCopyDataInit>

080009dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009e2:	3104      	adds	r1, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009ec:	d3f6      	bcc.n	80009dc <CopyDataInit>
	ldr	r2, =_sbss
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LoopForever+0x12>)
	b	LoopFillZerobss
 80009f0:	e002      	b.n	80009f8 <LoopFillZerobss>

080009f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009f4:	f842 3b04 	str.w	r3, [r2], #4

080009f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <LoopForever+0x16>)
	cmp	r2, r3
 80009fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009fc:	d3f9      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fe:	f7ff febb 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f005 f9c3 	bl	8005d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fd3d 	bl	8000484 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a10:	08005e94 	.word	0x08005e94
	ldr	r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a18:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000a1c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000a20:	2000119c 	.word	0x2000119c

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f8d8 	bl	8000bee <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fdf0 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fdb4 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20001198 	.word	0x20001198

08000a7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20001198 	.word	0x20001198

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4c 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c16:	f7ff ff61 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ffb1 	bl	8000b88 <NVIC_EncodePriority>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff80 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff54 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e037      	b.n	8000cde <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2202      	movs	r2, #2
 8000c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f8f1 	bl	8000ea8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}  
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2204      	movs	r2, #4
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e027      	b.n	8000d58 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020e 	bic.w	r2, r2, #14
 8000d16:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	4798      	blx	r3
    } 
  }
  return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	2204      	movs	r2, #4
 8000d80:	409a      	lsls	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d024      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x72>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01f      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d107      	bne.n	8000db2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0204 	bic.w	r2, r2, #4
 8000db0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	2104      	movs	r1, #4
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d06a      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dd2:	e065      	b.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	2202      	movs	r2, #2
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d02c      	beq.n	8000e3e <HAL_DMA_IRQHandler+0xdc>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d027      	beq.n	8000e3e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 020a 	bic.w	r2, r2, #10
 8000e0a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d035      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e3c:	e030      	b.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	2208      	movs	r2, #8
 8000e44:	409a      	lsls	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d028      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d023      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 020e 	bic.w	r2, r2, #14
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	2101      	movs	r1, #1
 8000e72:	fa01 f202 	lsl.w	r2, r1, r2
 8000e76:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d004      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	4798      	blx	r3
    }
  }
}  
 8000e9e:	e7ff      	b.n	8000ea0 <HAL_DMA_IRQHandler+0x13e>
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <DMA_CalcBaseAndBitshift+0x34>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <DMA_CalcBaseAndBitshift+0x38>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	009a      	lsls	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <DMA_CalcBaseAndBitshift+0x3c>)
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	bffdfff8 	.word	0xbffdfff8
 8000ee0:	cccccccd 	.word	0xcccccccd
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e14e      	b.n	8001196 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8140 	beq.w	8001190 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x38>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	6939      	ldr	r1, [r7, #16]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d00b      	beq.n	8000fbc <HAL_GPIO_Init+0xd4>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb0:	2b11      	cmp	r3, #17
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b12      	cmp	r3, #18
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 0201 	and.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 809a 	beq.w	8001190 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a54      	ldr	r2, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800109e:	d013      	beq.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a46      	ldr	r2, [pc, #280]	; (80011bc <HAL_GPIO_Init+0x2d4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d00d      	beq.n	80010c4 <HAL_GPIO_Init+0x1dc>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a45      	ldr	r2, [pc, #276]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d007      	beq.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <HAL_GPIO_Init+0x2dc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d101      	bne.n	80010bc <HAL_GPIO_Init+0x1d4>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e006      	b.n	80010ca <HAL_GPIO_Init+0x1e2>
 80010bc:	2305      	movs	r3, #5
 80010be:	e004      	b.n	80010ca <HAL_GPIO_Init+0x1e2>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x1e2>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_GPIO_Init+0x1e2>
 80010c8:	2300      	movs	r3, #0
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	f002 0203 	and.w	r2, r2, #3
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	4093      	lsls	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010da:	4937      	ldr	r1, [pc, #220]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800110c:	4a2e      	ldr	r2, [pc, #184]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001136:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_GPIO_Init+0x2e0>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f47f aea9 	bne.w	8000ef8 <HAL_GPIO_Init+0x10>
  }
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800
 80011c4:	48000c00 	.word	0x48000c00
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f806 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800124a:	af00      	add	r7, sp, #0
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	f000 bef4 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 816a 	beq.w	8001542 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800126e:	4bb3      	ldr	r3, [pc, #716]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127a:	4bb0      	ldr	r3, [pc, #704]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d159      	bne.n	800133a <HAL_RCC_OscConfig+0xf6>
 8001286:	4bad      	ldr	r3, [pc, #692]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001292:	d152      	bne.n	800133a <HAL_RCC_OscConfig+0xf6>
 8001294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001298:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_OscConfig+0x82>
 80012c0:	4b9e      	ldr	r3, [pc, #632]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0xae>
 80012c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012ee:	4b93      	ldr	r3, [pc, #588]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012fe:	fa92 f2a2 	rbit	r2, r2
 8001302:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001306:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800130a:	fab2 f282 	clz	r2, r2
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	f002 021f 	and.w	r2, r2, #31
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 810c 	beq.w	8001540 <HAL_RCC_OscConfig+0x2fc>
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 8106 	bne.w	8001540 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 be86 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x110>
 8001346:	4b7d      	ldr	r3, [pc, #500]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7c      	ldr	r2, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e030      	b.n	80013b6 <HAL_RCC_OscConfig+0x172>
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x134>
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a76      	ldr	r2, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b74      	ldr	r3, [pc, #464]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a73      	ldr	r2, [pc, #460]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01e      	b.n	80013b6 <HAL_RCC_OscConfig+0x172>
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0x15a>
 8001384:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a6c      	ldr	r2, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a69      	ldr	r2, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x172>
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a66      	ldr	r2, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a63      	ldr	r2, [pc, #396]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013b6:	4b61      	ldr	r3, [pc, #388]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f023 020f 	bic.w	r2, r3, #15
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	495d      	ldr	r1, [pc, #372]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d059      	beq.n	8001488 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb52 	bl	8000a7c <HAL_GetTick>
 80013d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fb4d 	bl	8000a7c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d902      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f000 be29 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
 80013f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001408:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x1e2>
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x20e>
 8001426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800143a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001442:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001456:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800145a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800145e:	fa92 f2a2 	rbit	r2, r2
 8001462:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001466:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800146a:	fab2 f282 	clz	r2, r2
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	f042 0220 	orr.w	r2, r2, #32
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f002 021f 	and.w	r2, r2, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ab      	beq.n	80013de <HAL_RCC_OscConfig+0x19a>
 8001486:	e05c      	b.n	8001542 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff faf8 	bl	8000a7c <HAL_GetTick>
 800148c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001492:	f7ff faf3 	bl	8000a7c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d902      	bls.n	80014a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f000 bdcf 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x2c2>
 80014da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_RCC_OscConfig+0x2f8>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800150a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800150e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800151a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ab      	bne.n	8001492 <HAL_RCC_OscConfig+0x24e>
 800153a:	e002      	b.n	8001542 <HAL_RCC_OscConfig+0x2fe>
 800153c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 816f 	beq.w	8001830 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001552:	4bd0      	ldr	r3, [pc, #832]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800155e:	4bcd      	ldr	r3, [pc, #820]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d16c      	bne.n	8001644 <HAL_RCC_OscConfig+0x400>
 800156a:	4bca      	ldr	r3, [pc, #808]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d166      	bne.n	8001644 <HAL_RCC_OscConfig+0x400>
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001588:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x362>
 80015a0:	4bbc      	ldr	r3, [pc, #752]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e013      	b.n	80015ce <HAL_RCC_OscConfig+0x38a>
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015ca:	4bb2      	ldr	r3, [pc, #712]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2202      	movs	r2, #2
 80015d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015d8:	fa92 f2a2 	rbit	r2, r2
 80015dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f042 0220 	orr.w	r2, r2, #32
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_RCC_OscConfig+0x3cc>
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d002      	beq.n	8001610 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 bd1b 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	21f8      	movs	r1, #248	; 0xf8
 8001620:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001628:	fa91 f1a1 	rbit	r1, r1
 800162c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001630:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001634:	fab1 f181 	clz	r1, r1
 8001638:	b2c9      	uxtb	r1, r1
 800163a:	408b      	lsls	r3, r1
 800163c:	4995      	ldr	r1, [pc, #596]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e0f5      	b.n	8001830 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8085 	beq.w	800175a <HAL_RCC_OscConfig+0x516>
 8001650:	2301      	movs	r3, #1
 8001652:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001662:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	461a      	mov	r2, r3
 8001678:	2301      	movs	r3, #1
 800167a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f9fe 	bl	8000a7c <HAL_GetTick>
 8001680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff f9f9 	bl	8000a7c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d902      	bls.n	800169c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	f000 bcd5 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x488>
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e013      	b.n	80016f4 <HAL_RCC_OscConfig+0x4b0>
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2202      	movs	r2, #2
 80016f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80016fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016fe:	fa92 f2a2 	rbit	r2, r2
 8001702:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001706:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0220 	orr.w	r2, r2, #32
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0af      	beq.n	8001686 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	21f8      	movs	r1, #248	; 0xf8
 8001736:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800173e:	fa91 f1a1 	rbit	r1, r1
 8001742:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001746:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800174a:	fab1 f181 	clz	r1, r1
 800174e:	b2c9      	uxtb	r1, r1
 8001750:	408b      	lsls	r3, r1
 8001752:	4950      	ldr	r1, [pc, #320]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e06a      	b.n	8001830 <HAL_RCC_OscConfig+0x5ec>
 800175a:	2301      	movs	r3, #1
 800175c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800176c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800177a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	461a      	mov	r2, r3
 8001782:	2300      	movs	r3, #0
 8001784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff f979 	bl	8000a7c <HAL_GetTick>
 800178a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff f974 	bl	8000a7c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d902      	bls.n	80017a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f000 bc50 	b.w	8002046 <HAL_RCC_OscConfig+0xe02>
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_OscConfig+0x592>
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	e013      	b.n	80017fe <HAL_RCC_OscConfig+0x5ba>
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	2202      	movs	r2, #2
 8001800:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001808:	fa92 f2a2 	rbit	r2, r2
 800180c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001810:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1af      	bne.n	8001790 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80da 	beq.w	80019f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d069      	beq.n	800191e <HAL_RCC_OscConfig+0x6da>
 800184a:	2301      	movs	r3, #1
 800184c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800185c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x654>)
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	461a      	mov	r2, r3
 8001870:	2301      	movs	r3, #1
 8001872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff f902 	bl	8000a7c <HAL_GetTick>
 8001878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187c:	e00e      	b.n	800189c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff f8fd 	bl	8000a7c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d906      	bls.n	800189c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e3d9      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	10908120 	.word	0x10908120
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4ba5      	ldr	r3, [pc, #660]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018e6:	2102      	movs	r1, #2
 80018e8:	6019      	str	r1, [r3, #0]
 80018ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f1a3 	rbit	r1, r3
 80018f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0b0      	beq.n	800187e <HAL_RCC_OscConfig+0x63a>
 800191c:	e06a      	b.n	80019f4 <HAL_RCC_OscConfig+0x7b0>
 800191e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001934:	601a      	str	r2, [r3, #0]
  return result;
 8001936:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800193a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x934>)
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff f894 	bl	8000a7c <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e009      	b.n	800196e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff f88f 	bl	8000a7c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e36b      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 800196e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 80019b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019be:	2102      	movs	r1, #2
 80019c0:	6019      	str	r1, [r3, #0]
 80019c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f1a3 	rbit	r1, r3
 80019cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019d0:	6019      	str	r1, [r3, #0]
  return result;
 80019d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1b2      	bne.n	800195a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8158 	beq.w	8001cb4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d112      	bne.n	8001a3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <HAL_RCC_OscConfig+0x938>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11a      	bne.n	8001a7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_OscConfig+0x938>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4b      	ldr	r2, [pc, #300]	; (8001b7c <HAL_RCC_OscConfig+0x938>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f812 	bl	8000a7c <HAL_GetTick>
 8001a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff f80d 	bl	8000a7c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e2e9      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCC_OscConfig+0x938>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ef      	beq.n	8001a5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x852>
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a39      	ldr	r2, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e02f      	b.n	8001af6 <HAL_RCC_OscConfig+0x8b2>
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x876>
 8001aa0:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e01d      	b.n	8001af6 <HAL_RCC_OscConfig+0x8b2>
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x89a>
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x8b2>
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7fe ffbc 	bl	8000a7c <HAL_GetTick>
 8001b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7fe ffb7 	bl	8000a7c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e291      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b3e:	2202      	movs	r2, #2
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d109      	bne.n	8001b80 <HAL_RCC_OscConfig+0x93c>
 8001b6c:	4b01      	ldr	r3, [pc, #4]	; (8001b74 <HAL_RCC_OscConfig+0x930>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x958>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	10908120 	.word	0x10908120
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4bbb      	ldr	r3, [pc, #748]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	6011      	str	r1, [r2, #0]
 8001ba4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	fa92 f1a2 	rbit	r1, r2
 8001bae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bb2:	6011      	str	r1, [r2, #0]
  return result;
 8001bb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d099      	beq.n	8001b0a <HAL_RCC_OscConfig+0x8c6>
 8001bd6:	e063      	b.n	8001ca0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7fe ff50 	bl	8000a7c <HAL_GetTick>
 8001bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe ff4b 	bl	8000a7c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e225      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c28:	601a      	str	r2, [r3, #0]
  return result;
 8001c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_OscConfig+0xa06>
 8001c44:	4b90      	ldr	r3, [pc, #576]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	e00d      	b.n	8001c66 <HAL_RCC_OscConfig+0xa22>
 8001c4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c7c:	6011      	str	r1, [r2, #0]
  return result;
 8001c7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1a0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca8:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 81c2 	beq.w	8002044 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc0:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	f000 819c 	beq.w	8002006 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 8114 	bne.w	8001f02 <HAL_RCC_OscConfig+0xcbe>
 8001cda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cf2:	601a      	str	r2, [r3, #0]
  return result;
 8001cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7fe feb4 	bl	8000a7c <HAL_GetTick>
 8001d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe feaf 	bl	8000a7c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e18b      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d46:	601a      	str	r2, [r3, #0]
  return result;
 8001d48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0xb24>
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e01b      	b.n	8001da0 <HAL_RCC_OscConfig+0xb5c>
 8001d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da8:	6011      	str	r1, [r2, #0]
 8001daa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fa92 f1a2 	rbit	r1, r2
 8001db4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001db8:	6011      	str	r1, [r2, #0]
  return result;
 8001dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d19e      	bne.n	8001d1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4925      	ldr	r1, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e10:	601a      	str	r2, [r3, #0]
  return result;
 8001e12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7fe fe25 	bl	8000a7c <HAL_GetTick>
 8001e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe fe20 	bl	8000a7c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0fc      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e64:	601a      	str	r2, [r3, #0]
  return result;
 8001e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0xc48>
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <HAL_RCC_OscConfig+0xc44>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e01e      	b.n	8001ec4 <HAL_RCC_OscConfig+0xc80>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCC_OscConfig+0xe0c>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ecc:	6011      	str	r1, [r2, #0]
 8001ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	fa92 f1a2 	rbit	r1, r2
 8001ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001edc:	6011      	str	r1, [r2, #0]
  return result;
 8001ede:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d09b      	beq.n	8001e38 <HAL_RCC_OscConfig+0xbf4>
 8001f00:	e0a0      	b.n	8002044 <HAL_RCC_OscConfig+0xe00>
 8001f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fda0 	bl	8000a7c <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fd9b 	bl	8000a7c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e077      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
 8001f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	601a      	str	r2, [r3, #0]
  return result;
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0xd4c>
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_OscConfig+0xe0c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd84>
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_RCC_OscConfig+0xe0c>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f107 0210 	add.w	r2, r7, #16
 8001fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	f107 0210 	add.w	r2, r7, #16
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	fa92 f1a2 	rbit	r1, r2
 8001fdc:	f107 020c 	add.w	r2, r7, #12
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f107 020c 	add.w	r2, r7, #12
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19e      	bne.n	8001f42 <HAL_RCC_OscConfig+0xcfe>
 8002004:	e01e      	b.n	8002044 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e018      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0xe0c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800201c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	429a      	cmp	r2, r3
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800202e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b09e      	sub	sp, #120	; 0x78
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e162      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b90      	ldr	r3, [pc, #576]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b8d      	ldr	r3, [pc, #564]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	498b      	ldr	r1, [pc, #556]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e14a      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b82      	ldr	r3, [pc, #520]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	497f      	ldr	r1, [pc, #508]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80dc 	beq.w	8002280 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d13c      	bne.n	800214a <HAL_RCC_ClockConfig+0xf6>
 80020d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_ClockConfig+0xa6>
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	e00f      	b.n	800211a <HAL_RCC_ClockConfig+0xc6>
 80020fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	667b      	str	r3, [r7, #100]	; 0x64
 8002108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800210c:	663b      	str	r3, [r7, #96]	; 0x60
 800210e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002116:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800211e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002122:	fa92 f2a2 	rbit	r2, r2
 8002126:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f002 021f 	and.w	r2, r2, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d17b      	bne.n	800223e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0f3      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d13c      	bne.n	80021cc <HAL_RCC_ClockConfig+0x178>
 8002152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_RCC_ClockConfig+0x128>
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e00f      	b.n	800219c <HAL_RCC_ClockConfig+0x148>
 800217c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	647b      	str	r3, [r7, #68]	; 0x44
 800218a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
 8002190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d13a      	bne.n	800223e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b2      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
 80021cc:	2302      	movs	r3, #2
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
 80021ee:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	e00d      	b.n	8002210 <HAL_RCC_ClockConfig+0x1bc>
 80021f4:	2302      	movs	r3, #2
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2202      	movs	r2, #2
 8002212:	61ba      	str	r2, [r7, #24]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	617a      	str	r2, [r7, #20]
  return result;
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e079      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	491a      	ldr	r1, [pc, #104]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002250:	f7fe fc14 	bl	8000a7c <HAL_GetTick>
 8002254:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe fc10 	bl	8000a7c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e061      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_ClockConfig+0x260>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d214      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_RCC_ClockConfig+0x25c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e040      	b.n	8002332 <HAL_RCC_ClockConfig+0x2de>
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCC_ClockConfig+0x2e8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	491a      	ldr	r1, [pc, #104]	; (800233c <HAL_RCC_ClockConfig+0x2e8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x2e8>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4912      	ldr	r1, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022f6:	f000 f829 	bl	800234c <HAL_RCC_GetSysClockFreq>
 80022fa:	4601      	mov	r1, r0
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_ClockConfig+0x2e8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002304:	22f0      	movs	r2, #240	; 0xf0
 8002306:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	fa92 f2a2 	rbit	r2, r2
 800230e:	60fa      	str	r2, [r7, #12]
  return result;
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	fab2 f282 	clz	r2, r2
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	40d3      	lsrs	r3, r2
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x2ec>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	fa21 f303 	lsr.w	r3, r1, r3
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_RCC_ClockConfig+0x2f0>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_ClockConfig+0x2f4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f97a 	bl	8000624 <HAL_InitTick>
  
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3778      	adds	r7, #120	; 0x78
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	08005e54 	.word	0x08005e54
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b08b      	sub	sp, #44	; 0x2c
 8002350:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x30>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237a:	e03c      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_GetSysClockFreq+0xc4>)
 800237e:	623b      	str	r3, [r7, #32]
      break;
 8002380:	e03c      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002388:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800238c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	fa92 f2a2 	rbit	r2, r2
 8002394:	607a      	str	r2, [r7, #4]
  return result;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	fab2 f282 	clz	r2, r2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	40d3      	lsrs	r3, r2
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	220f      	movs	r2, #15
 80023b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	60fa      	str	r2, [r7, #12]
  return result;
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	40d3      	lsrs	r3, r2
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	e004      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	623b      	str	r3, [r7, #32]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f8:	623b      	str	r3, [r7, #32]
      break;
 80023fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	372c      	adds	r7, #44	; 0x2c
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	08005e6c 	.word	0x08005e6c
 8002418:	08005e7c 	.word	0x08005e7c
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800243e:	f7ff ffef 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002442:	4601      	mov	r1, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800244c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002450:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	603a      	str	r2, [r7, #0]
  return result;
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	40d3      	lsrs	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	08005e64 	.word	0x08005e64

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002482:	f7ff ffcd 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002486:	4601      	mov	r1, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002490:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002494:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	fa92 f2a2 	rbit	r2, r2
 800249c:	603a      	str	r2, [r7, #0]
  return result;
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	40d3      	lsrs	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08005e64 	.word	0x08005e64

080024c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	220f      	movs	r2, #15
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCC_GetClockConfig+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0207 	and.w	r2, r3, #7
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40022000 	.word	0x40022000

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b092      	sub	sp, #72	; 0x48
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80d0 	beq.w	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002548:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10e      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	61d3      	str	r3, [r2, #28]
 8002560:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b85      	ldr	r3, [pc, #532]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fa77 	bl	8000a7c <HAL_GetTick>
 800258e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe fa73 	bl	8000a7c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0ea      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d07d      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d076      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ce:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	461a      	mov	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002624:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d045      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fa24 	bl	8000a7c <HAL_GetTick>
 8002634:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fa20 	bl	8000a7c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e095      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800264e:	2302      	movs	r3, #2
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	2302      	movs	r3, #2
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	61fb      	str	r3, [r7, #28]
  return result;
 8002666:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d102      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	e007      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2202      	movs	r2, #2
 8002694:	613a      	str	r2, [r7, #16]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	fa92 f2a2 	rbit	r2, r2
 800269c:	60fa      	str	r2, [r7, #12]
  return result;
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f002 021f 	and.w	r2, r2, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0bd      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	492e      	ldr	r1, [pc, #184]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f023 0210 	bic.w	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	491a      	ldr	r1, [pc, #104]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	4313      	orrs	r3, r2
 800271c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	4913      	ldr	r1, [pc, #76]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	4313      	orrs	r3, r2
 800273a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	490b      	ldr	r1, [pc, #44]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	4313      	orrs	r3, r2
 8002758:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	4313      	orrs	r3, r2
 8002776:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3748      	adds	r7, #72	; 0x48
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
 800278c:	10908100 	.word	0x10908100

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e01d      	b.n	80027de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f842 	bl	8000840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 fa34 	bl	8002c3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_TIM_Base_Start_IT+0x50>)
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d00b      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x42>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d007      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	00010007 	.word	0x00010007

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d122      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0202 	mvn.w	r2, #2
 8002868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9be 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9b0 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f9c1 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d122      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11b      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0204 	mvn.w	r2, #4
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f994 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f986 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f997 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f96a 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f95c 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f96d 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0210 	mvn.w	r2, #16
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2208      	movs	r2, #8
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f940 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f932 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f943 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0201 	mvn.w	r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fdde 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fab2 	bl	8002f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b80      	cmp	r3, #128	; 0x80
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 faa5 	bl	8002f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8f1 	bl	8002c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d10e      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d107      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0220 	mvn.w	r2, #32
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa65 	bl	8002f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_ConfigClockSource+0x18>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0a8      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x16a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ab4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002abc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d067      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x124>
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d80b      	bhi.n	8002aea <HAL_TIM_ConfigClockSource+0x70>
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d073      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x144>
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d802      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x66>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d06f      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ade:	e078      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d06c      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x144>
 8002ae4:	2b30      	cmp	r3, #48	; 0x30
 8002ae6:	d06a      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002ae8:	e073      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002aea:	2b70      	cmp	r3, #112	; 0x70
 8002aec:	d00d      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x90>
 8002aee:	2b70      	cmp	r3, #112	; 0x70
 8002af0:	d804      	bhi.n	8002afc <HAL_TIM_ConfigClockSource+0x82>
 8002af2:	2b50      	cmp	r3, #80	; 0x50
 8002af4:	d033      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0xe4>
 8002af6:	2b60      	cmp	r3, #96	; 0x60
 8002af8:	d041      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002afa:	e06a      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d066      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0x156>
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	d017      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002b08:	e063      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f000 f981 	bl	8002e20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	609a      	str	r2, [r3, #8]
      break;
 8002b36:	e04c      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f000 f96a 	bl	8002e20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5a:	609a      	str	r2, [r3, #8]
      break;
 8002b5c:	e039      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8de 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2150      	movs	r1, #80	; 0x50
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f937 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e029      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f000 f8fd 	bl	8002d8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2160      	movs	r1, #96	; 0x60
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f927 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002b9c:	e019      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 f8be 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2140      	movs	r1, #64	; 0x40
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f917 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e009      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f000 f90e 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002bce:	e000      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002bd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a32      	ldr	r2, [pc, #200]	; (8002d18 <TIM_Base_SetConfig+0xdc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x28>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x28>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <TIM_Base_SetConfig+0xe0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <TIM_Base_SetConfig+0xdc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <TIM_Base_SetConfig+0x6a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d00f      	beq.n	8002ca6 <TIM_Base_SetConfig+0x6a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <TIM_Base_SetConfig+0xe0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <TIM_Base_SetConfig+0x6a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <TIM_Base_SetConfig+0xe4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <TIM_Base_SetConfig+0x6a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <TIM_Base_SetConfig+0xe8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_Base_SetConfig+0x6a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <TIM_Base_SetConfig+0xec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <TIM_Base_SetConfig+0xdc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0xc0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <TIM_Base_SetConfig+0xe4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0xc0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <TIM_Base_SetConfig+0xe8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0xc0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <TIM_Base_SetConfig+0xec>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	615a      	str	r2, [r3, #20]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800

08002d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 030a 	bic.w	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0210 	bic.w	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f043 0307 	orr.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e054      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ea8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e040      	b.n	800300c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fca4 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f986 	bl	80032c8 <UART_SetConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fafc 	bl	80035cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb83 	bl	8003710 <UART_CheckIdleState>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f640 030f 	movw	r3, #2063	; 0x80f
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d113      	bne.n	800306c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8114 	beq.w	800328a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
      }
      return;
 800306a:	e10e      	b.n	800328a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80d6 	beq.w	8003220 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80cb 	beq.w	8003220 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <HAL_UART_IRQHandler+0x9e>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_UART_IRQHandler+0xc6>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2202      	movs	r2, #2
 80030cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00e      	beq.n	8003102 <HAL_UART_IRQHandler+0xee>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312c:	f043 0208 	orr.w	r2, r3, #8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00f      	beq.n	800315e <HAL_UART_IRQHandler+0x14a>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8093 	beq.w	800328e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003190:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d004      	beq.n	80031aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d031      	beq.n	800320e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fb70 	bl	8003890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d123      	bne.n	8003206 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d013      	beq.n	80031fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031da:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_UART_IRQHandler+0x288>)
 80031dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fd7f 	bl	8000ce6 <HAL_DMA_Abort_IT>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80031f8:	4610      	mov	r0, r2
 80031fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	e00e      	b.n	800321c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f858 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	e00a      	b.n	800321c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f854 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	e006      	b.n	800321c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f850 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800321a:	e038      	b.n	800328e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	bf00      	nop
    return;
 800321e:	e036      	b.n	800328e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_UART_IRQHandler+0x232>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800323c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fb75 	bl	800392e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003244:	e026      	b.n	8003294 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
    }
    return;
 800326a:	e012      	b.n	8003292 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <HAL_UART_IRQHandler+0x280>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fb3b 	bl	80038fc <UART_EndTransmit_IT>
    return;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <HAL_UART_IRQHandler+0x280>
      return;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_UART_IRQHandler+0x280>
    return;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_UART_IRQHandler+0x280>
    return;
 8003292:	bf00      	nop
  }

}
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	080038d1 	.word	0x080038d1

080032a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4ba2      	ldr	r3, [pc, #648]	; (8003580 <UART_SetConfig+0x2b8>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	430b      	orrs	r3, r1
 8003302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	430a      	orrs	r2, r1
 800333c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a90      	ldr	r2, [pc, #576]	; (8003584 <UART_SetConfig+0x2bc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d121      	bne.n	800338c <UART_SetConfig+0xc4>
 8003348:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <UART_SetConfig+0x2c0>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d817      	bhi.n	8003384 <UART_SetConfig+0xbc>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x94>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003379 	.word	0x08003379
 8003364:	0800337f 	.word	0x0800337f
 8003368:	08003373 	.word	0x08003373
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e01e      	b.n	80033b0 <UART_SetConfig+0xe8>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e01b      	b.n	80033b0 <UART_SetConfig+0xe8>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e018      	b.n	80033b0 <UART_SetConfig+0xe8>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e015      	b.n	80033b0 <UART_SetConfig+0xe8>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	bf00      	nop
 800338a:	e011      	b.n	80033b0 <UART_SetConfig+0xe8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7e      	ldr	r2, [pc, #504]	; (800358c <UART_SetConfig+0x2c4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d102      	bne.n	800339c <UART_SetConfig+0xd4>
 8003396:	2300      	movs	r3, #0
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e009      	b.n	80033b0 <UART_SetConfig+0xe8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7b      	ldr	r2, [pc, #492]	; (8003590 <UART_SetConfig+0x2c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d102      	bne.n	80033ac <UART_SetConfig+0xe4>
 80033a6:	2300      	movs	r3, #0
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e001      	b.n	80033b0 <UART_SetConfig+0xe8>
 80033ac:	2310      	movs	r3, #16
 80033ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b8:	f040 8082 	bne.w	80034c0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80033bc:	7ffb      	ldrb	r3, [r7, #31]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d85e      	bhi.n	8003480 <UART_SetConfig+0x1b8>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0x100>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	0800340d 	.word	0x0800340d
 80033d0:	0800342d 	.word	0x0800342d
 80033d4:	08003481 	.word	0x08003481
 80033d8:	08003449 	.word	0x08003449
 80033dc:	08003481 	.word	0x08003481
 80033e0:	08003481 	.word	0x08003481
 80033e4:	08003481 	.word	0x08003481
 80033e8:	08003469 	.word	0x08003469
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7ff f824 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 80033f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	005a      	lsls	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	b29b      	uxth	r3, r3
 8003408:	61bb      	str	r3, [r7, #24]
        break;
 800340a:	e03c      	b.n	8003486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7ff f836 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8003410:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	005a      	lsls	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	b29b      	uxth	r3, r3
 8003428:	61bb      	str	r3, [r7, #24]
        break;
 800342a:	e02c      	b.n	8003486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003436:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6852      	ldr	r2, [r2, #4]
 800343e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	61bb      	str	r3, [r7, #24]
        break;
 8003446:	e01e      	b.n	8003486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003448:	f7fe ff80 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800344c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	b29b      	uxth	r3, r3
 8003464:	61bb      	str	r3, [r7, #24]
        break;
 8003466:	e00e      	b.n	8003486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	61bb      	str	r3, [r7, #24]
        break;
 800347e:	e002      	b.n	8003486 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
        break;
 8003484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d916      	bls.n	80034ba <UART_SetConfig+0x1f2>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d212      	bcs.n	80034ba <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f023 030f 	bic.w	r3, r3, #15
 800349c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	897a      	ldrh	r2, [r7, #10]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	e07d      	b.n	80035b6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
 80034be:	e07a      	b.n	80035b6 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d866      	bhi.n	8003594 <UART_SetConfig+0x2cc>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x204>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	0800350f 	.word	0x0800350f
 80034d4:	0800352d 	.word	0x0800352d
 80034d8:	08003595 	.word	0x08003595
 80034dc:	08003549 	.word	0x08003549
 80034e0:	08003595 	.word	0x08003595
 80034e4:	08003595 	.word	0x08003595
 80034e8:	08003595 	.word	0x08003595
 80034ec:	08003567 	.word	0x08003567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe ffa2 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 80034f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085a      	lsrs	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	b29b      	uxth	r3, r3
 800350a:	61bb      	str	r3, [r7, #24]
        break;
 800350c:	e045      	b.n	800359a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800350e:	f7fe ffb5 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8003512:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	085a      	lsrs	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
        break;
 800352a:	e036      	b.n	800359a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003536:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6852      	ldr	r2, [r2, #4]
 800353e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	61bb      	str	r3, [r7, #24]
        break;
 8003546:	e028      	b.n	800359a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003548:	f7fe ff00 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800354c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085a      	lsrs	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	61bb      	str	r3, [r7, #24]
        break;
 8003564:	e019      	b.n	800359a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00d      	b.n	800359a <UART_SetConfig+0x2d2>
 800357e:	bf00      	nop
 8003580:	efff69f3 	.word	0xefff69f3
 8003584:	40013800 	.word	0x40013800
 8003588:	40021000 	.word	0x40021000
 800358c:	40004400 	.word	0x40004400
 8003590:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
        break;
 8003598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d908      	bls.n	80035b2 <UART_SetConfig+0x2ea>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d204      	bcs.n	80035b2 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e001      	b.n	80035b6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ca:	d10a      	bne.n	80036e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800371e:	f7fd f9ad 	bl	8000a7c <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b08      	cmp	r3, #8
 8003730:	d10e      	bne.n	8003750 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003732:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f82a 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e020      	b.n	8003792 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b04      	cmp	r3, #4
 800375c:	d10e      	bne.n	800377c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f814 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e00a      	b.n	8003792 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e05d      	b.n	8003868 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d059      	beq.n	8003868 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fd f962 	bl	8000a7c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <UART_WaitOnFlagUntilTimeout+0x30>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11b      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e042      	b.n	8003888 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02b      	beq.n	8003868 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381e:	d123      	bne.n	8003868 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003828:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003838:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e00f      	b.n	8003888 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4013      	ands	r3, r2
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	429a      	cmp	r2, r3
 8003884:	d092      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fce0 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fcbd 	bl	80032a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003954:	2b84      	cmp	r3, #132	; 0x84
 8003956:	d005      	beq.n	8003964 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003958:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	3303      	adds	r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003978:	f3ef 8305 	mrs	r3, IPSR
 800397c:	607b      	str	r3, [r7, #4]
  return(result);
 800397e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800399a:	f001 f8dd 	bl	8004b58 <vTaskStartScheduler>
  
  return osOK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d020      	beq.n	80039f8 <osThreadCreate+0x54>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01c      	beq.n	80039f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685c      	ldr	r4, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691e      	ldr	r6, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ffb6 	bl	8003942 <makeFreeRtosPriority>
 80039d6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039e0:	9202      	str	r2, [sp, #8]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	9100      	str	r1, [sp, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4632      	mov	r2, r6
 80039ea:	4629      	mov	r1, r5
 80039ec:	4620      	mov	r0, r4
 80039ee:	f000 fef8 	bl	80047e2 <xTaskCreateStatic>
 80039f2:	4603      	mov	r3, r0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e01c      	b.n	8003a32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685c      	ldr	r4, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a04:	b29e      	uxth	r6, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff98 	bl	8003942 <makeFreeRtosPriority>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4632      	mov	r2, r6
 8003a20:	4629      	mov	r1, r5
 8003a22:	4620      	mov	r0, r4
 8003a24:	f000 ff36 	bl	8004894 <xTaskCreate>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <osDelay+0x16>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	e000      	b.n	8003a54 <osDelay+0x18>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f84b 	bl	8004af0 <vTaskDelay>
  
  return osOK;
 8003a5a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <osMessageCreate+0x38>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68dc      	ldr	r4, [r3, #12]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4623      	mov	r3, r4
 8003a94:	f000 f9e0 	bl	8003e58 <xQueueGenericCreateStatic>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	e008      	b.n	8003aae <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f000 fa48 	bl	8003f3c <xQueueGenericCreate>
 8003aac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}
	...

08003ab8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <osMessagePut+0x1e>
    ticks = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003ad6:	f7ff ff4c 	bl	8003972 <inHandlerMode>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d018      	beq.n	8003b12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003ae0:	f107 0210 	add.w	r2, r7, #16
 8003ae4:	f107 0108 	add.w	r1, r7, #8
 8003ae8:	2300      	movs	r3, #0
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fb7c 	bl	80041e8 <xQueueGenericSendFromISR>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <osMessagePut+0x42>
      return osErrorOS;
 8003af6:	23ff      	movs	r3, #255	; 0xff
 8003af8:	e018      	b.n	8003b2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d014      	beq.n	8003b2a <osMessagePut+0x72>
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <osMessagePut+0x7c>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	e00b      	b.n	8003b2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003b12:	f107 0108 	add.w	r1, r7, #8
 8003b16:	2300      	movs	r3, #0
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fa6a 	bl	8003ff4 <xQueueGenericSend>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <osMessagePut+0x72>
      return osErrorOS;
 8003b26:	23ff      	movs	r3, #255	; 0xff
 8003b28:	e000      	b.n	8003b2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b08b      	sub	sp, #44	; 0x2c
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	617b      	str	r3, [r7, #20]
    return event;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	461c      	mov	r4, r3
 8003b5a:	f107 0314 	add.w	r3, r7, #20
 8003b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b66:	e054      	b.n	8003c12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d103      	bne.n	8003b80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	e009      	b.n	8003b94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <osMessageGet+0x5c>
      ticks = 1;
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003b94:	f7ff feed 	bl	8003972 <inHandlerMode>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01c      	beq.n	8003bd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003b9e:	f107 0220 	add.w	r2, r7, #32
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fc8c 	bl	80044c8 <xQueueReceiveFromISR>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e001      	b.n	8003bc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01d      	beq.n	8003c02 <osMessageGet+0xca>
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <osMessageGet+0xe4>)
 8003bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	e014      	b.n	8003c02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	3304      	adds	r3, #4
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	68b8      	ldr	r0, [r7, #8]
 8003be4:	f000 fb94 	bl	8004310 <xQueueReceive>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003bee:	2310      	movs	r3, #16
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e006      	b.n	8003c02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <osMessageGet+0xc6>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <osMessageGet+0xc8>
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	461c      	mov	r4, r3
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	372c      	adds	r7, #44	; 0x2c
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f103 0208 	add.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f103 0208 	add.w	r2, r3, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f103 0208 	add.w	r2, r3, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d103      	bne.n	8003ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e00c      	b.n	8003cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e002      	b.n	8003cf0 <vListInsert+0x2e>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d2f6      	bcs.n	8003cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6852      	ldr	r2, [r2, #4]
 8003d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d103      	bne.n	8003d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	e7fe      	b.n	8003dae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003db0:	f001 fcfc 	bl	80057ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	3b01      	subs	r3, #1
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	22ff      	movs	r2, #255	; 0xff
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	22ff      	movs	r2, #255	; 0xff
 8003dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d114      	bne.n	8003e30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3310      	adds	r3, #16
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f8e2 	bl	8004fdc <xTaskRemoveFromEventList>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <xQueueGenericReset+0xcc>)
 8003e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	e009      	b.n	8003e44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3310      	adds	r3, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fef3 	bl	8003c20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff feee 	bl	8003c20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e44:	f001 fce0 	bl	8005808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e48:	2301      	movs	r3, #1
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	; 0x38
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <xQueueGenericCreateStatic+0x28>
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7e:	e7fe      	b.n	8003e7e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <xQueueGenericCreateStatic+0x42>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
 8003e98:	e7fe      	b.n	8003e98 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <xQueueGenericCreateStatic+0x4e>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xQueueGenericCreateStatic+0x52>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericCreateStatic+0x54>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <xQueueGenericCreateStatic+0x6c>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	e7fe      	b.n	8003ec2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xQueueGenericCreateStatic+0x78>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueGenericCreateStatic+0x7c>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueGenericCreateStatic+0x7e>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <xQueueGenericCreateStatic+0x96>
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eee:	2348      	movs	r3, #72	; 0x48
 8003ef0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b48      	cmp	r3, #72	; 0x48
 8003ef6:	d009      	beq.n	8003f0c <xQueueGenericCreateStatic+0xb4>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e7fe      	b.n	8003f0a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f842 	bl	8003fb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	; 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <xQueueGenericCreate+0x28>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e004      	b.n	8003f7a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3348      	adds	r3, #72	; 0x48
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fd2e 	bl	80059e0 <pvPortMalloc>
 8003f84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00f      	beq.n	8003fac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	3348      	adds	r3, #72	; 0x48
 8003f90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f9a:	79fa      	ldrb	r2, [r7, #7]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f805 	bl	8003fb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003fac:	69bb      	ldr	r3, [r7, #24]
	}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e002      	b.n	8003fd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	69b8      	ldr	r0, [r7, #24]
 8003fe8:	f7ff fece 	bl	8003d88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08e      	sub	sp, #56	; 0x38
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <xQueueGenericSend+0x30>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	e7fe      	b.n	8004022 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueGenericSend+0x3e>
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueGenericSend+0x42>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueGenericSend+0x44>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <xQueueGenericSend+0x5c>
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	e7fe      	b.n	800404e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x6a>
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <xQueueGenericSend+0x6e>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericSend+0x70>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <xQueueGenericSend+0x88>
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	e7fe      	b.n	800407a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800407c:	f001 f96a 	bl	8005354 <xTaskGetSchedulerState>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <xQueueGenericSend+0x98>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <xQueueGenericSend+0x9c>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <xQueueGenericSend+0x9e>
 8004090:	2300      	movs	r3, #0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <xQueueGenericSend+0xb6>
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e7fe      	b.n	80040a8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040aa:	f001 fb7f 	bl	80057ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d302      	bcc.n	80040c0 <xQueueGenericSend+0xcc>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d129      	bne.n	8004114 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c6:	f000 fa7c 	bl	80045c2 <prvCopyDataToQueue>
 80040ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	3324      	adds	r3, #36	; 0x24
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 ff7f 	bl	8004fdc <xTaskRemoveFromEventList>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <xQueueGenericSend+0x1f0>)
 80040e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	e00a      	b.n	800410c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <xQueueGenericSend+0x1f0>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800410c:	f001 fb7c 	bl	8005808 <vPortExitCritical>
				return pdPASS;
 8004110:	2301      	movs	r3, #1
 8004112:	e063      	b.n	80041dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800411a:	f001 fb75 	bl	8005808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800411e:	2300      	movs	r3, #0
 8004120:	e05c      	b.n	80041dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4618      	mov	r0, r3
 800412e:	f000 ffb7 	bl	80050a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004132:	2301      	movs	r3, #1
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004136:	f001 fb67 	bl	8005808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800413a:	f000 fd6b 	bl	8004c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800413e:	f001 fb35 	bl	80057ac <vPortEnterCritical>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004148:	b25b      	sxtb	r3, r3
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d103      	bne.n	8004158 <xQueueGenericSend+0x164>
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415e:	b25b      	sxtb	r3, r3
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d103      	bne.n	800416e <xQueueGenericSend+0x17a>
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800416e:	f001 fb4b 	bl	8005808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004172:	1d3a      	adds	r2, r7, #4
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 ffa6 	bl	80050cc <xTaskCheckForTimeOut>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d124      	bne.n	80041d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004188:	f000 fb13 	bl	80047b2 <prvIsQueueFull>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	3310      	adds	r3, #16
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fefa 	bl	8004f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a2:	f000 fa9e 	bl	80046e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041a6:	f000 fd43 	bl	8004c30 <xTaskResumeAll>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f af7c 	bne.w	80040aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <xQueueGenericSend+0x1f0>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	e772      	b.n	80040aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c6:	f000 fa8c 	bl	80046e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ca:	f000 fd31 	bl	8004c30 <xTaskResumeAll>
 80041ce:	e76c      	b.n	80040aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d2:	f000 fa86 	bl	80046e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041d6:	f000 fd2b 	bl	8004c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041da:	2300      	movs	r3, #0
		}
	}
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3738      	adds	r7, #56	; 0x38
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08e      	sub	sp, #56	; 0x38
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <xQueueGenericSendFromISR+0x2c>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	e7fe      	b.n	8004212 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <xQueueGenericSendFromISR+0x3a>
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueGenericSendFromISR+0x3e>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericSendFromISR+0x40>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <xQueueGenericSendFromISR+0x58>
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	e7fe      	b.n	800423e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d103      	bne.n	800424e <xQueueGenericSendFromISR+0x66>
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <xQueueGenericSendFromISR+0x6a>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueGenericSendFromISR+0x6c>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <xQueueGenericSendFromISR+0x84>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e7fe      	b.n	800426a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800426c:	f001 fb7a 	bl	8005964 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004270:	f3ef 8211 	mrs	r2, BASEPRI
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61ba      	str	r2, [r7, #24]
 8004286:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004288:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <xQueueGenericSendFromISR+0xb6>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d12c      	bne.n	80042f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ae:	f000 f988 	bl	80045c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d112      	bne.n	80042e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d016      	beq.n	80042f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	3324      	adds	r3, #36	; 0x24
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fe87 	bl	8004fdc <xTaskRemoveFromEventList>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e007      	b.n	80042f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042e6:	3301      	adds	r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	b25a      	sxtb	r2, r3
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042f2:	2301      	movs	r3, #1
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042f6:	e001      	b.n	80042fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004308:	4618      	mov	r0, r3
 800430a:	3738      	adds	r7, #56	; 0x38
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	; 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <xQueueReceive+0x2e>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	e7fe      	b.n	800433c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <xQueueReceive+0x3c>
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueReceive+0x40>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueReceive+0x42>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <xQueueReceive+0x5a>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e7fe      	b.n	8004368 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800436a:	f000 fff3 	bl	8005354 <xTaskGetSchedulerState>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <xQueueReceive+0x6a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <xQueueReceive+0x6e>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueReceive+0x70>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <xQueueReceive+0x88>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e7fe      	b.n	8004396 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004398:	f001 fa08 	bl	80057ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01f      	beq.n	80043e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ac:	f000 f973 	bl	8004696 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1e5a      	subs	r2, r3, #1
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00f      	beq.n	80043e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	3310      	adds	r3, #16
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe09 	bl	8004fdc <xTaskRemoveFromEventList>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <xQueueReceive+0x1b4>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043e0:	f001 fa12 	bl	8005808 <vPortExitCritical>
				return pdPASS;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e069      	b.n	80044bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ee:	f001 fa0b 	bl	8005808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e062      	b.n	80044bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fe4d 	bl	80050a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440a:	f001 f9fd 	bl	8005808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800440e:	f000 fc01 	bl	8004c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004412:	f001 f9cb 	bl	80057ac <vPortEnterCritical>
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d103      	bne.n	800442c <xQueueReceive+0x11c>
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004432:	b25b      	sxtb	r3, r3
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d103      	bne.n	8004442 <xQueueReceive+0x132>
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004442:	f001 f9e1 	bl	8005808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004446:	1d3a      	adds	r2, r7, #4
 8004448:	f107 0310 	add.w	r3, r7, #16
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fe3c 	bl	80050cc <xTaskCheckForTimeOut>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d123      	bne.n	80044a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800445a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445c:	f000 f993 	bl	8004786 <prvIsQueueEmpty>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d017      	beq.n	8004496 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	3324      	adds	r3, #36	; 0x24
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd90 	bl	8004f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004476:	f000 f934 	bl	80046e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800447a:	f000 fbd9 	bl	8004c30 <xTaskResumeAll>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d189      	bne.n	8004398 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <xQueueReceive+0x1b4>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	e780      	b.n	8004398 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004498:	f000 f923 	bl	80046e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800449c:	f000 fbc8 	bl	8004c30 <xTaskResumeAll>
 80044a0:	e77a      	b.n	8004398 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a4:	f000 f91d 	bl	80046e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044a8:	f000 fbc2 	bl	8004c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ae:	f000 f96a 	bl	8004786 <prvIsQueueEmpty>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f43f af6f 	beq.w	8004398 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	; 0x38
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <xQueueReceiveFromISR+0x2a>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <xQueueReceiveFromISR+0x38>
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <xQueueReceiveFromISR+0x3c>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <xQueueReceiveFromISR+0x3e>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <xQueueReceiveFromISR+0x56>
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e7fe      	b.n	800451c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800451e:	f001 fa21 	bl	8005964 <vPortValidateInterruptPriority>
	__asm volatile
 8004522:	f3ef 8211 	mrs	r2, BASEPRI
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61ba      	str	r2, [r7, #24]
 8004538:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800453a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d02f      	beq.n	80045aa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004558:	f000 f89d 	bl	8004696 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d112      	bne.n	8004594 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	3310      	adds	r3, #16
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fd2e 	bl	8004fdc <xTaskRemoveFromEventList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e007      	b.n	80045a4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004598:	3301      	adds	r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	b25a      	sxtb	r2, r3
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80045a4:	2301      	movs	r3, #1
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	e001      	b.n	80045ae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3738      	adds	r7, #56	; 0x38
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d14d      	bne.n	8004684 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fecf 	bl	8005390 <xTaskPriorityDisinherit>
 80045f2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e043      	b.n	8004684 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6898      	ldr	r0, [r3, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	461a      	mov	r2, r3
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	f001 fbe1 	bl	8005dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d32b      	bcc.n	8004684 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	e026      	b.n	8004684 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68d8      	ldr	r0, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	461a      	mov	r2, r3
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	f001 fbc7 	bl	8005dd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	425b      	negs	r3, r3
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d207      	bcs.n	8004672 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	425b      	negs	r3, r3
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d105      	bne.n	8004684 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3b01      	subs	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800468c:	697b      	ldr	r3, [r7, #20]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d018      	beq.n	80046da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d303      	bcc.n	80046ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68d9      	ldr	r1, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	461a      	mov	r2, r3
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f001 fb7d 	bl	8005dd4 <memcpy>
	}
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046ea:	f001 f85f 	bl	80057ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046f6:	e011      	b.n	800471c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3324      	adds	r3, #36	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc69 	bl	8004fdc <xTaskRemoveFromEventList>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004710:	f000 fd3c 	bl	800518c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	3b01      	subs	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	dce9      	bgt.n	80046f8 <prvUnlockQueue+0x16>
 8004724:	e000      	b.n	8004728 <prvUnlockQueue+0x46>
					break;
 8004726:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22ff      	movs	r2, #255	; 0xff
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004730:	f001 f86a 	bl	8005808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004734:	f001 f83a 	bl	80057ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004740:	e011      	b.n	8004766 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3310      	adds	r3, #16
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fc44 	bl	8004fdc <xTaskRemoveFromEventList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800475a:	f000 fd17 	bl	800518c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800475e:	7bbb      	ldrb	r3, [r7, #14]
 8004760:	3b01      	subs	r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dce9      	bgt.n	8004742 <prvUnlockQueue+0x60>
 800476e:	e000      	b.n	8004772 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004770:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800477a:	f001 f845 	bl	8005808 <vPortExitCritical>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800478e:	f001 f80d 	bl	80057ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e001      	b.n	80047a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047a4:	f001 f830 	bl	8005808 <vPortExitCritical>

	return xReturn;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047ba:	f000 fff7 	bl	80057ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d102      	bne.n	80047d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e001      	b.n	80047d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d4:	f001 f818 	bl	8005808 <vPortExitCritical>

	return xReturn;
 80047d8:	68fb      	ldr	r3, [r7, #12]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b08e      	sub	sp, #56	; 0x38
 80047e6:	af04      	add	r7, sp, #16
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <xTaskCreateStatic+0x28>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	e7fe      	b.n	8004808 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <xTaskCreateStatic+0x42>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e7fe      	b.n	8004822 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004824:	2354      	movs	r3, #84	; 0x54
 8004826:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b54      	cmp	r3, #84	; 0x54
 800482c:	d009      	beq.n	8004842 <xTaskCreateStatic+0x60>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e7fe      	b.n	8004840 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01e      	beq.n	8004886 <xTaskCreateStatic+0xa4>
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004856:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004860:	2300      	movs	r3, #0
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f850 	bl	800491e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800487e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004880:	f000 f8cc 	bl	8004a1c <prvAddNewTaskToReadyList>
 8004884:	e001      	b.n	800488a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800488a:	697b      	ldr	r3, [r7, #20]
	}
 800488c:	4618      	mov	r0, r3
 800488e:	3728      	adds	r7, #40	; 0x28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af04      	add	r7, sp, #16
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f899 	bl	80059e0 <pvPortMalloc>
 80048ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048b6:	2054      	movs	r0, #84	; 0x54
 80048b8:	f001 f892 	bl	80059e0 <pvPortMalloc>
 80048bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ca:	e005      	b.n	80048d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048cc:	6978      	ldr	r0, [r7, #20]
 80048ce:	f001 f949 	bl	8005b64 <vPortFree>
 80048d2:	e001      	b.n	80048d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d017      	beq.n	800490e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f80e 	bl	800491e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004902:	69f8      	ldr	r0, [r7, #28]
 8004904:	f000 f88a 	bl	8004a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004908:	2301      	movs	r3, #1
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e002      	b.n	8004914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004914:	69bb      	ldr	r3, [r7, #24]
	}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004936:	3b01      	subs	r3, #1
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <prvInitialiseNewTask+0x46>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e7fe      	b.n	8004962 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e012      	b.n	8004990 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	7819      	ldrb	r1, [r3, #0]
 8004972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	3334      	adds	r3, #52	; 0x34
 800497a:	460a      	mov	r2, r1
 800497c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d9e9      	bls.n	800496a <prvInitialiseNewTask+0x4c>
 8004996:	e000      	b.n	800499a <prvInitialiseNewTask+0x7c>
		{
			break;
 8004998:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d901      	bls.n	80049ac <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049a8:	2306      	movs	r3, #6
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	2200      	movs	r2, #0
 80049bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff f94c 	bl	8003c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	3318      	adds	r3, #24
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff f947 	bl	8003c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f1c3 0207 	rsb	r2, r3, #7
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	69b8      	ldr	r0, [r7, #24]
 80049fc:	f000 fdb2 	bl	8005564 <pxPortInitialiseStack>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a12:	bf00      	nop
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a24:	f000 fec2 	bl	80057ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <prvAddNewTaskToReadyList+0xb8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <prvAddNewTaskToReadyList+0xb8>)
 8004a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <prvAddNewTaskToReadyList+0xbc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a3a:	4a27      	ldr	r2, [pc, #156]	; (8004ad8 <prvAddNewTaskToReadyList+0xbc>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <prvAddNewTaskToReadyList+0xb8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d110      	bne.n	8004a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a48:	f000 fbc4 	bl	80051d4 <prvInitialiseTaskLists>
 8004a4c:	e00d      	b.n	8004a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a4e:	4b23      	ldr	r3, [pc, #140]	; (8004adc <prvAddNewTaskToReadyList+0xc0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <prvAddNewTaskToReadyList+0xbc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d802      	bhi.n	8004a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <prvAddNewTaskToReadyList+0xbc>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <prvAddNewTaskToReadyList+0xc4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <prvAddNewTaskToReadyList+0xc4>)
 8004a72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	2201      	movs	r2, #1
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <prvAddNewTaskToReadyList+0xc8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <prvAddNewTaskToReadyList+0xc8>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <prvAddNewTaskToReadyList+0xcc>)
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff f8ec 	bl	8003c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004aa2:	f000 feb1 	bl	8005808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <prvAddNewTaskToReadyList+0xc0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvAddNewTaskToReadyList+0xbc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d207      	bcs.n	8004acc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <prvAddNewTaskToReadyList+0xd0>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000400 	.word	0x20000400
 8004ad8:	20000300 	.word	0x20000300
 8004adc:	2000040c 	.word	0x2000040c
 8004ae0:	2000041c 	.word	0x2000041c
 8004ae4:	20000408 	.word	0x20000408
 8004ae8:	20000304 	.word	0x20000304
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <vTaskDelay+0x60>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <vTaskDelay+0x2e>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	e7fe      	b.n	8004b1c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b1e:	f000 f879 	bl	8004c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b22:	2100      	movs	r1, #0
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fcb7 	bl	8005498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b2a:	f000 f881 	bl	8004c30 <xTaskResumeAll>
 8004b2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <vTaskDelay+0x64>)
 8004b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000428 	.word	0x20000428
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b66:	463a      	mov	r2, r7
 8004b68:	1d39      	adds	r1, r7, #4
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fb fb54 	bl	800021c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	9202      	str	r2, [sp, #8]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	460a      	mov	r2, r1
 8004b86:	491d      	ldr	r1, [pc, #116]	; (8004bfc <vTaskStartScheduler+0xa4>)
 8004b88:	481d      	ldr	r0, [pc, #116]	; (8004c00 <vTaskStartScheduler+0xa8>)
 8004b8a:	f7ff fe2a 	bl	80047e2 <xTaskCreateStatic>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <vTaskStartScheduler+0xac>)
 8004b92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <vTaskStartScheduler+0xac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e001      	b.n	8004ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d115      	bne.n	8004bd8 <vTaskStartScheduler+0x80>
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <vTaskStartScheduler+0xb0>)
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <vTaskStartScheduler+0xb4>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <vTaskStartScheduler+0xb8>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bd2:	f000 fd4d 	bl	8005670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bd6:	e00d      	b.n	8004bf4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d109      	bne.n	8004bf4 <vTaskStartScheduler+0x9c>
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e7fe      	b.n	8004bf2 <vTaskStartScheduler+0x9a>
}
 8004bf4:	bf00      	nop
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08005e4c 	.word	0x08005e4c
 8004c00:	080051a5 	.word	0x080051a5
 8004c04:	20000424 	.word	0x20000424
 8004c08:	20000420 	.word	0x20000420
 8004c0c:	2000040c 	.word	0x2000040c
 8004c10:	20000404 	.word	0x20000404

08004c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <vTaskSuspendAll+0x18>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <vTaskSuspendAll+0x18>)
 8004c20:	6013      	str	r3, [r2, #0]
}
 8004c22:	bf00      	nop
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000428 	.word	0x20000428

08004c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c3e:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <xTaskResumeAll+0x114>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <xTaskResumeAll+0x2a>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	e7fe      	b.n	8004c58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c5a:	f000 fda7 	bl	80057ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c5e:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <xTaskResumeAll+0x114>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <xTaskResumeAll+0x114>)
 8004c66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <xTaskResumeAll+0x114>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d161      	bne.n	8004d34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <xTaskResumeAll+0x118>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05d      	beq.n	8004d34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c78:	e02e      	b.n	8004cd8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c7a:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <xTaskResumeAll+0x11c>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3318      	adds	r3, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f854 	bl	8003d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f84f 	bl	8003d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <xTaskResumeAll+0x120>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <xTaskResumeAll+0x120>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <xTaskResumeAll+0x124>)
 8004cb6:	441a      	add	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f7fe ffdb 	bl	8003c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <xTaskResumeAll+0x128>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <xTaskResumeAll+0x12c>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <xTaskResumeAll+0x11c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1cc      	bne.n	8004c7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ce6:	f000 fb0f 	bl	8005308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <xTaskResumeAll+0x130>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cf6:	f000 f837 	bl	8004d68 <xTaskIncrementTick>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004d00:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <xTaskResumeAll+0x12c>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f1      	bne.n	8004cf6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <xTaskResumeAll+0x130>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <xTaskResumeAll+0x12c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <xTaskResumeAll+0x134>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d34:	f000 fd68 	bl	8005808 <vPortExitCritical>

	return xAlreadyYielded;
 8004d38:	68bb      	ldr	r3, [r7, #8]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000428 	.word	0x20000428
 8004d48:	20000400 	.word	0x20000400
 8004d4c:	200003c0 	.word	0x200003c0
 8004d50:	20000408 	.word	0x20000408
 8004d54:	20000304 	.word	0x20000304
 8004d58:	20000300 	.word	0x20000300
 8004d5c:	20000414 	.word	0x20000414
 8004d60:	20000410 	.word	0x20000410
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d72:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <xTaskIncrementTick+0x14c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 808c 	bne.w	8004e94 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <xTaskIncrementTick+0x150>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d84:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <xTaskIncrementTick+0x150>)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11f      	bne.n	8004dd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d90:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <xTaskIncrementTick+0x154>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <xTaskIncrementTick+0x46>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	e7fe      	b.n	8004dac <xTaskIncrementTick+0x44>
 8004dae:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <xTaskIncrementTick+0x154>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <xTaskIncrementTick+0x158>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <xTaskIncrementTick+0x154>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <xTaskIncrementTick+0x158>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b40      	ldr	r3, [pc, #256]	; (8004ec4 <xTaskIncrementTick+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <xTaskIncrementTick+0x15c>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	f000 fa9c 	bl	8005308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dd0:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <xTaskIncrementTick+0x160>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d34d      	bcc.n	8004e76 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dda:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <xTaskIncrementTick+0x154>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <xTaskIncrementTick+0x80>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <xTaskIncrementTick+0x82>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <xTaskIncrementTick+0x160>)
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295
 8004df4:	601a      	str	r2, [r3, #0]
					break;
 8004df6:	e03e      	b.n	8004e76 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004df8:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <xTaskIncrementTick+0x154>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d203      	bcs.n	8004e18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e10:	4a2d      	ldr	r2, [pc, #180]	; (8004ec8 <xTaskIncrementTick+0x160>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
						break;
 8004e16:	e02e      	b.n	8004e76 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe ff89 	bl	8003d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3318      	adds	r3, #24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe ff80 	bl	8003d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	2201      	movs	r2, #1
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <xTaskIncrementTick+0x164>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <xTaskIncrementTick+0x164>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <xTaskIncrementTick+0x168>)
 8004e54:	441a      	add	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7fe ff0c 	bl	8003c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <xTaskIncrementTick+0x16c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d3b4      	bcc.n	8004dda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e74:	e7b1      	b.n	8004dda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <xTaskIncrementTick+0x16c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	4914      	ldr	r1, [pc, #80]	; (8004ed0 <xTaskIncrementTick+0x168>)
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d907      	bls.n	8004e9e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e004      	b.n	8004e9e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <xTaskIncrementTick+0x170>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <xTaskIncrementTick+0x170>)
 8004e9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <xTaskIncrementTick+0x174>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004eaa:	697b      	ldr	r3, [r7, #20]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000428 	.word	0x20000428
 8004eb8:	20000404 	.word	0x20000404
 8004ebc:	200003b8 	.word	0x200003b8
 8004ec0:	200003bc 	.word	0x200003bc
 8004ec4:	20000418 	.word	0x20000418
 8004ec8:	20000420 	.word	0x20000420
 8004ecc:	20000408 	.word	0x20000408
 8004ed0:	20000304 	.word	0x20000304
 8004ed4:	20000300 	.word	0x20000300
 8004ed8:	20000410 	.word	0x20000410
 8004edc:	20000414 	.word	0x20000414

08004ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <vTaskSwitchContext+0xa0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <vTaskSwitchContext+0xa4>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ef4:	e03e      	b.n	8004f74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <vTaskSwitchContext+0xa4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <vTaskSwitchContext+0xa8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	fab3 f383 	clz	r3, r3
 8004f08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f0a:	7afb      	ldrb	r3, [r7, #11]
 8004f0c:	f1c3 031f 	rsb	r3, r3, #31
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	491e      	ldr	r1, [pc, #120]	; (8004f8c <vTaskSwitchContext+0xac>)
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e7fe      	b.n	8004f38 <vTaskSwitchContext+0x58>
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <vTaskSwitchContext+0xac>)
 8004f46:	4413      	add	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d104      	bne.n	8004f6a <vTaskSwitchContext+0x8a>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <vTaskSwitchContext+0xb0>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000428 	.word	0x20000428
 8004f84:	20000414 	.word	0x20000414
 8004f88:	20000408 	.word	0x20000408
 8004f8c:	20000304 	.word	0x20000304
 8004f90:	20000300 	.word	0x20000300

08004f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <vTaskPlaceOnEventList+0x24>
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e7fe      	b.n	8004fb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <vTaskPlaceOnEventList+0x44>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fe fe7e 	bl	8003cc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	6838      	ldr	r0, [r7, #0]
 8004fca:	f000 fa65 	bl	8005498 <prvAddCurrentTaskToDelayedList>
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000300 	.word	0x20000300

08004fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <xTaskRemoveFromEventList+0x2a>
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e7fe      	b.n	8005004 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3318      	adds	r3, #24
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fe92 	bl	8003d34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <xTaskRemoveFromEventList+0xac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11c      	bne.n	8005052 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fe89 	bl	8003d34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	2201      	movs	r2, #1
 8005028:	409a      	lsls	r2, r3
 800502a:	4b18      	ldr	r3, [pc, #96]	; (800508c <xTaskRemoveFromEventList+0xb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	4a16      	ldr	r2, [pc, #88]	; (800508c <xTaskRemoveFromEventList+0xb0>)
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <xTaskRemoveFromEventList+0xb4>)
 8005042:	441a      	add	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fe fe15 	bl	8003c7a <vListInsertEnd>
 8005050:	e005      	b.n	800505e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3318      	adds	r3, #24
 8005056:	4619      	mov	r1, r3
 8005058:	480e      	ldr	r0, [pc, #56]	; (8005094 <xTaskRemoveFromEventList+0xb8>)
 800505a:	f7fe fe0e 	bl	8003c7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <xTaskRemoveFromEventList+0xbc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	429a      	cmp	r2, r3
 800506a:	d905      	bls.n	8005078 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <xTaskRemoveFromEventList+0xc0>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e001      	b.n	800507c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800507c:	697b      	ldr	r3, [r7, #20]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000428 	.word	0x20000428
 800508c:	20000408 	.word	0x20000408
 8005090:	20000304 	.word	0x20000304
 8005094:	200003c0 	.word	0x200003c0
 8005098:	20000300 	.word	0x20000300
 800509c:	20000414 	.word	0x20000414

080050a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <vTaskInternalSetTimeOutState+0x24>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <vTaskInternalSetTimeOutState+0x28>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	605a      	str	r2, [r3, #4]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000418 	.word	0x20000418
 80050c8:	20000404 	.word	0x20000404

080050cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <xTaskCheckForTimeOut+0x24>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e7fe      	b.n	80050ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <xTaskCheckForTimeOut+0x3e>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e7fe      	b.n	8005108 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800510a:	f000 fb4f 	bl	80057ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <xTaskCheckForTimeOut+0xb8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d102      	bne.n	800512e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e023      	b.n	8005176 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <xTaskCheckForTimeOut+0xbc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d007      	beq.n	800514a <xTaskCheckForTimeOut+0x7e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e015      	b.n	8005176 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	d20b      	bcs.n	800516c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff9d 	bl	80050a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	e004      	b.n	8005176 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005172:	2301      	movs	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005176:	f000 fb47 	bl	8005808 <vPortExitCritical>

	return xReturn;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000404 	.word	0x20000404
 8005188:	20000418 	.word	0x20000418

0800518c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <vTaskMissedYield+0x14>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000414 	.word	0x20000414

080051a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051ac:	f000 f852 	bl	8005254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <prvIdleTask+0x28>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d9f9      	bls.n	80051ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <prvIdleTask+0x2c>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051c8:	e7f0      	b.n	80051ac <prvIdleTask+0x8>
 80051ca:	bf00      	nop
 80051cc:	20000304 	.word	0x20000304
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e00c      	b.n	80051fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <prvInitialiseTaskLists+0x60>)
 80051ec:	4413      	add	r3, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fd16 	bl	8003c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d9ef      	bls.n	80051e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005200:	480d      	ldr	r0, [pc, #52]	; (8005238 <prvInitialiseTaskLists+0x64>)
 8005202:	f7fe fd0d 	bl	8003c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005206:	480d      	ldr	r0, [pc, #52]	; (800523c <prvInitialiseTaskLists+0x68>)
 8005208:	f7fe fd0a 	bl	8003c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800520c:	480c      	ldr	r0, [pc, #48]	; (8005240 <prvInitialiseTaskLists+0x6c>)
 800520e:	f7fe fd07 	bl	8003c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005212:	480c      	ldr	r0, [pc, #48]	; (8005244 <prvInitialiseTaskLists+0x70>)
 8005214:	f7fe fd04 	bl	8003c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005218:	480b      	ldr	r0, [pc, #44]	; (8005248 <prvInitialiseTaskLists+0x74>)
 800521a:	f7fe fd01 	bl	8003c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <prvInitialiseTaskLists+0x78>)
 8005220:	4a05      	ldr	r2, [pc, #20]	; (8005238 <prvInitialiseTaskLists+0x64>)
 8005222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvInitialiseTaskLists+0x7c>)
 8005226:	4a05      	ldr	r2, [pc, #20]	; (800523c <prvInitialiseTaskLists+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000304 	.word	0x20000304
 8005238:	20000390 	.word	0x20000390
 800523c:	200003a4 	.word	0x200003a4
 8005240:	200003c0 	.word	0x200003c0
 8005244:	200003d4 	.word	0x200003d4
 8005248:	200003ec 	.word	0x200003ec
 800524c:	200003b8 	.word	0x200003b8
 8005250:	200003bc 	.word	0x200003bc

08005254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800525a:	e019      	b.n	8005290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800525c:	f000 faa6 	bl	80057ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <prvCheckTasksWaitingTermination+0x4c>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fd61 	bl	8003d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <prvCheckTasksWaitingTermination+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <prvCheckTasksWaitingTermination+0x50>)
 800527a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <prvCheckTasksWaitingTermination+0x54>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <prvCheckTasksWaitingTermination+0x54>)
 8005284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005286:	f000 fabf 	bl	8005808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f80e 	bl	80052ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <prvCheckTasksWaitingTermination+0x54>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e1      	bne.n	800525c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200003d4 	.word	0x200003d4
 80052a4:	20000400 	.word	0x20000400
 80052a8:	200003e8 	.word	0x200003e8

080052ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fc4e 	bl	8005b64 <vPortFree>
				vPortFree( pxTCB );
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fc4b 	bl	8005b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052ce:	e017      	b.n	8005300 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d103      	bne.n	80052e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fc42 	bl	8005b64 <vPortFree>
	}
 80052e0:	e00e      	b.n	8005300 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d009      	beq.n	8005300 <prvDeleteTCB+0x54>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e7fe      	b.n	80052fe <prvDeleteTCB+0x52>
	}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <prvResetNextTaskUnblockTime+0x44>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <prvResetNextTaskUnblockTime+0x14>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <prvResetNextTaskUnblockTime+0x16>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <prvResetNextTaskUnblockTime+0x48>)
 8005324:	f04f 32ff 	mov.w	r2, #4294967295
 8005328:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800532a:	e008      	b.n	800533e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <prvResetNextTaskUnblockTime+0x44>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a05      	ldr	r2, [pc, #20]	; (8005350 <prvResetNextTaskUnblockTime+0x48>)
 800533c:	6013      	str	r3, [r2, #0]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	200003b8 	.word	0x200003b8
 8005350:	20000420 	.word	0x20000420

08005354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <xTaskGetSchedulerState+0x34>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005362:	2301      	movs	r3, #1
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	e008      	b.n	800537a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <xTaskGetSchedulerState+0x38>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005370:	2302      	movs	r3, #2
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	e001      	b.n	800537a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800537a:	687b      	ldr	r3, [r7, #4]
	}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	2000040c 	.word	0x2000040c
 800538c:	20000428 	.word	0x20000428

08005390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d06c      	beq.n	8005480 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053a6:	4b39      	ldr	r3, [pc, #228]	; (800548c <xTaskPriorityDisinherit+0xfc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d009      	beq.n	80053c4 <xTaskPriorityDisinherit+0x34>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e7fe      	b.n	80053c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xTaskPriorityDisinherit+0x50>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	e7fe      	b.n	80053de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e4:	1e5a      	subs	r2, r3, #1
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d044      	beq.n	8005480 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d140      	bne.n	8005480 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fc96 	bl	8003d34 <uxListRemove>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d115      	bne.n	800543a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005412:	491f      	ldr	r1, [pc, #124]	; (8005490 <xTaskPriorityDisinherit+0x100>)
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xTaskPriorityDisinherit+0xaa>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	2201      	movs	r2, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43da      	mvns	r2, r3
 8005430:	4b18      	ldr	r3, [pc, #96]	; (8005494 <xTaskPriorityDisinherit+0x104>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	4a17      	ldr	r2, [pc, #92]	; (8005494 <xTaskPriorityDisinherit+0x104>)
 8005438:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f1c3 0207 	rsb	r2, r3, #7
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	2201      	movs	r2, #1
 8005454:	409a      	lsls	r2, r3
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <xTaskPriorityDisinherit+0x104>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <xTaskPriorityDisinherit+0x104>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <xTaskPriorityDisinherit+0x100>)
 800546e:	441a      	add	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fe fbff 	bl	8003c7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005480:	697b      	ldr	r3, [r7, #20]
	}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000300 	.word	0x20000300
 8005490:	20000304 	.word	0x20000304
 8005494:	20000408 	.word	0x20000408

08005498 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054a2:	4b29      	ldr	r3, [pc, #164]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fc40 	bl	8003d34 <uxListRemove>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80054ba:	4b24      	ldr	r3, [pc, #144]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	2201      	movs	r2, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43da      	mvns	r2, r3
 80054c8:	4b21      	ldr	r3, [pc, #132]	; (8005550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4013      	ands	r3, r2
 80054ce:	4a20      	ldr	r2, [pc, #128]	; (8005550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d10a      	bne.n	80054f0 <prvAddCurrentTaskToDelayedList+0x58>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e0:	4b1a      	ldr	r3, [pc, #104]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	481a      	ldr	r0, [pc, #104]	; (8005554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054ea:	f7fe fbc6 	bl	8003c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054ee:	e026      	b.n	800553e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	429a      	cmp	r2, r3
 8005506:	d209      	bcs.n	800551c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7fe fbd4 	bl	8003cc2 <vListInsert>
}
 800551a:	e010      	b.n	800553e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <prvAddCurrentTaskToDelayedList+0xc4>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fe fbca 	bl	8003cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d202      	bcs.n	800553e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000404 	.word	0x20000404
 800554c:	20000300 	.word	0x20000300
 8005550:	20000408 	.word	0x20000408
 8005554:	200003ec 	.word	0x200003ec
 8005558:	200003bc 	.word	0x200003bc
 800555c:	200003b8 	.word	0x200003b8
 8005560:	20000420 	.word	0x20000420

08005564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3b04      	subs	r3, #4
 8005574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800557c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b04      	subs	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b04      	subs	r3, #4
 8005592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005594:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <pxPortInitialiseStack+0x64>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b14      	subs	r3, #20
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f06f 0202 	mvn.w	r2, #2
 80055b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b20      	subs	r3, #32
 80055b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	080055cd 	.word	0x080055cd

080055cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <prvTaskExitError+0x50>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d009      	beq.n	80055f4 <prvTaskExitError+0x28>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e7fe      	b.n	80055f2 <prvTaskExitError+0x26>
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005606:	bf00      	nop
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0fc      	beq.n	8005608 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000000c 	.word	0x2000000c

08005620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <pxCurrentTCBConst2>)
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	f380 8809 	msr	PSP, r0
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8811 	msr	BASEPRI, r0
 800563a:	4770      	bx	lr
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst2>:
 8005640:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005648:	4808      	ldr	r0, [pc, #32]	; (800566c <prvPortStartFirstTask+0x24>)
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f380 8808 	msr	MSP, r0
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8814 	msr	CONTROL, r0
 800565a:	b662      	cpsie	i
 800565c:	b661      	cpsie	f
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	df00      	svc	0
 8005668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800566a:	bf00      	nop
 800566c:	e000ed08 	.word	0xe000ed08

08005670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005676:	4b44      	ldr	r3, [pc, #272]	; (8005788 <xPortStartScheduler+0x118>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a44      	ldr	r2, [pc, #272]	; (800578c <xPortStartScheduler+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d109      	bne.n	8005694 <xPortStartScheduler+0x24>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	e7fe      	b.n	8005692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005694:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <xPortStartScheduler+0x118>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <xPortStartScheduler+0x120>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d109      	bne.n	80056b2 <xPortStartScheduler+0x42>
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e7fe      	b.n	80056b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056b2:	4b38      	ldr	r3, [pc, #224]	; (8005794 <xPortStartScheduler+0x124>)
 80056b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	22ff      	movs	r2, #255	; 0xff
 80056c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4b30      	ldr	r3, [pc, #192]	; (8005798 <xPortStartScheduler+0x128>)
 80056d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056da:	4b30      	ldr	r3, [pc, #192]	; (800579c <xPortStartScheduler+0x12c>)
 80056dc:	2207      	movs	r2, #7
 80056de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e0:	e009      	b.n	80056f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80056e2:	4b2e      	ldr	r3, [pc, #184]	; (800579c <xPortStartScheduler+0x12c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a2c      	ldr	r2, [pc, #176]	; (800579c <xPortStartScheduler+0x12c>)
 80056ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d0ef      	beq.n	80056e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <xPortStartScheduler+0x12c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1c3 0307 	rsb	r3, r3, #7
 800570a:	2b04      	cmp	r3, #4
 800570c:	d009      	beq.n	8005722 <xPortStartScheduler+0xb2>
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	e7fe      	b.n	8005720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005722:	4b1e      	ldr	r3, [pc, #120]	; (800579c <xPortStartScheduler+0x12c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	4a1c      	ldr	r2, [pc, #112]	; (800579c <xPortStartScheduler+0x12c>)
 800572a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <xPortStartScheduler+0x12c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <xPortStartScheduler+0x12c>)
 8005736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005740:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <xPortStartScheduler+0x130>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <xPortStartScheduler+0x130>)
 8005746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800574a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <xPortStartScheduler+0x130>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <xPortStartScheduler+0x130>)
 8005752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005758:	f000 f8d6 	bl	8005908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <xPortStartScheduler+0x134>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005762:	f000 f8f5 	bl	8005950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <xPortStartScheduler+0x138>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0f      	ldr	r2, [pc, #60]	; (80057a8 <xPortStartScheduler+0x138>)
 800576c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005772:	f7ff ff69 	bl	8005648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005776:	f7ff fbb3 	bl	8004ee0 <vTaskSwitchContext>
	prvTaskExitError();
 800577a:	f7ff ff27 	bl	80055cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	e000ed00 	.word	0xe000ed00
 800578c:	410fc271 	.word	0x410fc271
 8005790:	410fc270 	.word	0x410fc270
 8005794:	e000e400 	.word	0xe000e400
 8005798:	2000042c 	.word	0x2000042c
 800579c:	20000430 	.word	0x20000430
 80057a0:	e000ed20 	.word	0xe000ed20
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	e000ef34 	.word	0xe000ef34

080057ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <vPortEnterCritical+0x54>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <vPortEnterCritical+0x54>)
 80057cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <vPortEnterCritical+0x54>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d10e      	bne.n	80057f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <vPortEnterCritical+0x58>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <vPortEnterCritical+0x48>
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	e7fe      	b.n	80057f2 <vPortEnterCritical+0x46>
	}
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <vPortExitCritical+0x4c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <vPortExitCritical+0x22>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	e7fe      	b.n	8005828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x4c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <vPortExitCritical+0x4c>)
 8005832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <vPortExitCritical+0x4c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <vPortExitCritical+0x3e>
 800583c:	2300      	movs	r3, #0
 800583e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7ff fb26 	bl	8004ee0 <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e0:	f7ff fa42 	bl	8004d68 <xTaskIncrementTick>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <SysTick_Handler+0x3c>)
 80058ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <vPortSetupTimerInterrupt+0x34>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x38>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <vPortSetupTimerInterrupt+0x3c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x40>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	4a09      	ldr	r2, [pc, #36]	; (800594c <vPortSetupTimerInterrupt+0x44>)
 8005926:	3b01      	subs	r3, #1
 8005928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <vPortSetupTimerInterrupt+0x34>)
 800592c:	2207      	movs	r2, #7
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	e000e010 	.word	0xe000e010
 8005940:	e000e018 	.word	0xe000e018
 8005944:	20000000 	.word	0x20000000
 8005948:	10624dd3 	.word	0x10624dd3
 800594c:	e000e014 	.word	0xe000e014

08005950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005960 <vPortEnableVFP+0x10>
 8005954:	6801      	ldr	r1, [r0, #0]
 8005956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595a:	6001      	str	r1, [r0, #0]
 800595c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800595e:	bf00      	nop
 8005960:	e000ed88 	.word	0xe000ed88

08005964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800596a:	f3ef 8305 	mrs	r3, IPSR
 800596e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d913      	bls.n	800599e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <vPortValidateInterruptPriority+0x6c>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <vPortValidateInterruptPriority+0x70>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	7afa      	ldrb	r2, [r7, #11]
 8005986:	429a      	cmp	r2, r3
 8005988:	d209      	bcs.n	800599e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	e7fe      	b.n	800599c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <vPortValidateInterruptPriority+0x74>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <vPortValidateInterruptPriority+0x78>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d909      	bls.n	80059c2 <vPortValidateInterruptPriority+0x5e>
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	e7fe      	b.n	80059c0 <vPortValidateInterruptPriority+0x5c>
	}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000e3f0 	.word	0xe000e3f0
 80059d4:	2000042c 	.word	0x2000042c
 80059d8:	e000ed0c 	.word	0xe000ed0c
 80059dc:	20000430 	.word	0x20000430

080059e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059ec:	f7ff f912 	bl	8004c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f0:	4b57      	ldr	r3, [pc, #348]	; (8005b50 <pvPortMalloc+0x170>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059f8:	f000 f90c 	bl	8005c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059fc:	4b55      	ldr	r3, [pc, #340]	; (8005b54 <pvPortMalloc+0x174>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 808c 	bne.w	8005b22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01c      	beq.n	8005a4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a10:	2208      	movs	r2, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	3308      	adds	r3, #8
 8005a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <pvPortMalloc+0x6a>
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e7fe      	b.n	8005a48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d068      	beq.n	8005b22 <pvPortMalloc+0x142>
 8005a50:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <pvPortMalloc+0x178>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d863      	bhi.n	8005b22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a5a:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <pvPortMalloc+0x17c>)
 8005a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <pvPortMalloc+0x17c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a64:	e004      	b.n	8005a70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d903      	bls.n	8005a82 <pvPortMalloc+0xa2>
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f1      	bne.n	8005a66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a82:	4b33      	ldr	r3, [pc, #204]	; (8005b50 <pvPortMalloc+0x170>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d04a      	beq.n	8005b22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2208      	movs	r2, #8
 8005a92:	4413      	add	r3, r2
 8005a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	1ad2      	subs	r2, r2, r3
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d91e      	bls.n	8005aec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <pvPortMalloc+0xf4>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e7fe      	b.n	8005ad2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1ad2      	subs	r2, r2, r3
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ae6:	69b8      	ldr	r0, [r7, #24]
 8005ae8:	f000 f8f6 	bl	8005cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <pvPortMalloc+0x178>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <pvPortMalloc+0x178>)
 8005af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005afa:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <pvPortMalloc+0x178>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <pvPortMalloc+0x180>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d203      	bcs.n	8005b0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <pvPortMalloc+0x178>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <pvPortMalloc+0x180>)
 8005b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <pvPortMalloc+0x174>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b22:	f7ff f885 	bl	8004c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <pvPortMalloc+0x164>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e7fe      	b.n	8005b42 <pvPortMalloc+0x162>
	return pvReturn;
 8005b44:	69fb      	ldr	r3, [r7, #28]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3728      	adds	r7, #40	; 0x28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000103c 	.word	0x2000103c
 8005b54:	20001048 	.word	0x20001048
 8005b58:	20001040 	.word	0x20001040
 8005b5c:	20001034 	.word	0x20001034
 8005b60:	20001044 	.word	0x20001044

08005b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d046      	beq.n	8005c04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b76:	2308      	movs	r3, #8
 8005b78:	425b      	negs	r3, r3
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <vPortFree+0xa8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <vPortFree+0x42>
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e7fe      	b.n	8005ba4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <vPortFree+0x5e>
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	e7fe      	b.n	8005bc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <vPortFree+0xa8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d115      	bne.n	8005c04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <vPortFree+0xa8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	401a      	ands	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005be8:	f7ff f814 	bl	8004c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <vPortFree+0xac>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <vPortFree+0xac>)
 8005bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f000 f86c 	bl	8005cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c00:	f7ff f816 	bl	8004c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20001048 	.word	0x20001048
 8005c10:	20001040 	.word	0x20001040

08005c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <prvHeapInit+0xac>)
 8005c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3307      	adds	r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <prvHeapInit+0xac>)
 8005c44:	4413      	add	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c60:	2208      	movs	r2, #8
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <prvHeapInit+0xb8>)
 8005ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <prvHeapInit+0xbc>)
 8005caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <prvHeapInit+0xc0>)
 8005cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000434 	.word	0x20000434
 8005cc4:	20001034 	.word	0x20001034
 8005cc8:	2000103c 	.word	0x2000103c
 8005ccc:	20001044 	.word	0x20001044
 8005cd0:	20001040 	.word	0x20001040
 8005cd4:	20001048 	.word	0x20001048

08005cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ce0:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <prvInsertBlockIntoFreeList+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <prvInsertBlockIntoFreeList+0x14>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d8f7      	bhi.n	8005ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d108      	bne.n	8005d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d118      	bne.n	8005d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d00d      	beq.n	8005d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	441a      	add	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e008      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e003      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d002      	beq.n	8005d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20001034 	.word	0x20001034
 8005d88:	2000103c 	.word	0x2000103c

08005d8c <__libc_init_array>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	4e0d      	ldr	r6, [pc, #52]	; (8005dc4 <__libc_init_array+0x38>)
 8005d90:	4c0d      	ldr	r4, [pc, #52]	; (8005dc8 <__libc_init_array+0x3c>)
 8005d92:	1ba4      	subs	r4, r4, r6
 8005d94:	10a4      	asrs	r4, r4, #2
 8005d96:	2500      	movs	r5, #0
 8005d98:	42a5      	cmp	r5, r4
 8005d9a:	d109      	bne.n	8005db0 <__libc_init_array+0x24>
 8005d9c:	4e0b      	ldr	r6, [pc, #44]	; (8005dcc <__libc_init_array+0x40>)
 8005d9e:	4c0c      	ldr	r4, [pc, #48]	; (8005dd0 <__libc_init_array+0x44>)
 8005da0:	f000 f82c 	bl	8005dfc <_init>
 8005da4:	1ba4      	subs	r4, r4, r6
 8005da6:	10a4      	asrs	r4, r4, #2
 8005da8:	2500      	movs	r5, #0
 8005daa:	42a5      	cmp	r5, r4
 8005dac:	d105      	bne.n	8005dba <__libc_init_array+0x2e>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db4:	4798      	blx	r3
 8005db6:	3501      	adds	r5, #1
 8005db8:	e7ee      	b.n	8005d98 <__libc_init_array+0xc>
 8005dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dbe:	4798      	blx	r3
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7f2      	b.n	8005daa <__libc_init_array+0x1e>
 8005dc4:	08005e8c 	.word	0x08005e8c
 8005dc8:	08005e8c 	.word	0x08005e8c
 8005dcc:	08005e8c 	.word	0x08005e8c
 8005dd0:	08005e90 	.word	0x08005e90

08005dd4 <memcpy>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	1e43      	subs	r3, r0, #1
 8005dd8:	440a      	add	r2, r1
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	d100      	bne.n	8005de0 <memcpy+0xc>
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de8:	e7f7      	b.n	8005dda <memcpy+0x6>

08005dea <memset>:
 8005dea:	4402      	add	r2, r0
 8005dec:	4603      	mov	r3, r0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d100      	bne.n	8005df4 <memset+0xa>
 8005df2:	4770      	bx	lr
 8005df4:	f803 1b01 	strb.w	r1, [r3], #1
 8005df8:	e7f9      	b.n	8005dee <memset+0x4>
	...

08005dfc <_init>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr

08005e08 <_fini>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr
