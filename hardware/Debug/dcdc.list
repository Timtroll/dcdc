
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000944c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009810  08009810  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08009810  08009810  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009810  08009810  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  2000010c  08009924  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b58  08009924  00021b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252a2  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e32  00000000  00000000  000453de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c18  00000000  00000000  0004a210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  0004be28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d91  00000000  00000000  0004d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019c12  00000000  00000000  00070559  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce179  00000000  00000000  0008a16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001582e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007384  00000000  00000000  00158360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095c4 	.word	0x080095c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	080095c4 	.word	0x080095c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001fa:	f107 031c 	add.w	r3, r7, #28
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800021c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000232:	2200      	movs	r2, #0
 8000234:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000246:	2201      	movs	r2, #1
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000252:	2201      	movs	r2, #1
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000260:	2204      	movs	r2, #4
 8000262:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000266:	2200      	movs	r2, #0
 8000268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000272:	f001 f849 	bl	8001308 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800027c:	f000 fe10 	bl	8000ea0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000284:	f107 031c 	add.w	r3, r7, #28
 8000288:	4619      	mov	r1, r3
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800028c:	f001 fc90 	bl	8001bb0 <HAL_ADCEx_MultiModeConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000296:	f000 fe03 	bl	8000ea0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800029a:	2306      	movs	r3, #6
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC1_Init+0xdc>)
 80002b8:	f001 f9b8 	bl	800162c <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002c2:	f000 fded 	bl	8000ea0 <Error_Handler>
  }

}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20001840 	.word	0x20001840

080002d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002ec:	4a27      	ldr	r2, [pc, #156]	; (800038c <MX_ADC2_Init+0xb8>)
 80002ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC2_Init+0xb4>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000318:	2201      	movs	r2, #1
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_ADC2_Init+0xb4>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000324:	2201      	movs	r2, #1
 8000326:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC2_Init+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC2_Init+0xb4>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000342:	4811      	ldr	r0, [pc, #68]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000344:	f000 ffe0 	bl	8001308 <HAL_ADC_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800034e:	f000 fda7 	bl	8000ea0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000352:	230c      	movs	r3, #12
 8000354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000356:	2301      	movs	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <MX_ADC2_Init+0xb4>)
 8000370:	f001 f95c 	bl	800162c <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800037a:	f000 fd91 	bl	8000ea0 <Error_Handler>
  }

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200017f0 	.word	0x200017f0
 800038c:	50000100 	.word	0x50000100

08000390 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b0:	d16d      	bne.n	800048e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003b2:	4b5e      	ldr	r3, [pc, #376]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a5c      	ldr	r2, [pc, #368]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80003bc:	4b5b      	ldr	r3, [pc, #364]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10b      	bne.n	80003dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80003c4:	4b5a      	ldr	r3, [pc, #360]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a59      	ldr	r2, [pc, #356]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b57      	ldr	r3, [pc, #348]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d8:	623b      	str	r3, [r7, #32]
 80003da:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b54      	ldr	r3, [pc, #336]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a53      	ldr	r2, [pc, #332]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b51      	ldr	r3, [pc, #324]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f0:	61fb      	str	r3, [r7, #28]
 80003f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b4e      	ldr	r3, [pc, #312]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a4d      	ldr	r2, [pc, #308]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80003fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b4b      	ldr	r3, [pc, #300]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000408:	61bb      	str	r3, [r7, #24]
 800040a:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800040c:	2303      	movs	r3, #3
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	2303      	movs	r3, #3
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	4619      	mov	r1, r3
 800041e:	4845      	ldr	r0, [pc, #276]	; (8000534 <HAL_ADC_MspInit+0x1a4>)
 8000420:	f001 ffe8 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000424:	2303      	movs	r3, #3
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000428:	2303      	movs	r3, #3
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000434:	4619      	mov	r1, r3
 8000436:	4840      	ldr	r0, [pc, #256]	; (8000538 <HAL_ADC_MspInit+0x1a8>)
 8000438:	f001 ffdc 	bl	80023f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800043c:	4b3f      	ldr	r3, [pc, #252]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800043e:	4a40      	ldr	r2, [pc, #256]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 8000440:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000442:	4b3e      	ldr	r3, [pc, #248]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000448:	4b3c      	ldr	r3, [pc, #240]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000454:	4b39      	ldr	r3, [pc, #228]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800045a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800045e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000462:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000464:	4b35      	ldr	r3, [pc, #212]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000466:	2220      	movs	r2, #32
 8000468:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000470:	4832      	ldr	r0, [pc, #200]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000472:	f001 fda5 	bl	8001fc0 <HAL_DMA_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800047c:	f000 fd10 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a2e      	ldr	r2, [pc, #184]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000484:	639a      	str	r2, [r3, #56]	; 0x38
 8000486:	4a2d      	ldr	r2, [pc, #180]	; (800053c <HAL_ADC_MspInit+0x1ac>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800048c:	e049      	b.n	8000522 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d144      	bne.n	8000522 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <HAL_ADC_MspInit+0x19c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a23      	ldr	r2, [pc, #140]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80004a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <HAL_ADC_MspInit+0x19c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10b      	bne.n	80004c2 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004aa:	4b21      	ldr	r3, [pc, #132]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a20      	ldr	r2, [pc, #128]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_ADC_MspInit+0x1a0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230c      	movs	r3, #12
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f6:	2303      	movs	r3, #3
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <HAL_ADC_MspInit+0x1a4>)
 8000506:	f001 ff75 	bl	80023f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800050a:	2304      	movs	r3, #4
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4619      	mov	r1, r3
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <HAL_ADC_MspInit+0x1a8>)
 800051e:	f001 ff69 	bl	80023f4 <HAL_GPIO_Init>
}
 8000522:	bf00      	nop
 8000524:	3738      	adds	r7, #56	; 0x38
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000128 	.word	0x20000128
 8000530:	40021000 	.word	0x40021000
 8000534:	48000800 	.word	0x48000800
 8000538:	48000400 	.word	0x48000400
 800053c:	20001890 	.word	0x20001890
 8000540:	40020008 	.word	0x40020008
 8000544:	50000100 	.word	0x50000100

08000548 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_DMA_Init+0x58>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <MX_DMA_Init+0x58>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_DMA_Init+0x58>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	200b      	movs	r0, #11
 800056c:	f001 fcfe 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000570:	200b      	movs	r0, #11
 8000572:	f001 fd17 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	200e      	movs	r0, #14
 800057c:	f001 fcf6 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000580:	200e      	movs	r0, #14
 8000582:	f001 fd0f 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2103      	movs	r1, #3
 800058a:	200f      	movs	r0, #15
 800058c:	f001 fcee 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000590:	200f      	movs	r0, #15
 8000592:	f001 fd07 	bl	8001fa4 <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000012c 	.word	0x2000012c
 80005d4:	20000180 	.word	0x20000180

080005d8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetTimerTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetTimerTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000380 	.word	0x20000380
 8000608:	200003d4 	.word	0x200003d4

0800060c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b09a      	sub	sp, #104	; 0x68
 8000610:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_FREERTOS_Init+0x9c>)
 8000614:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 800061e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fbd9 	bl	8005ddc <osMessageCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_FREERTOS_Init+0xa0>)
 800062e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_FREERTOS_Init+0xa4>)
 8000632:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fb66 	bl	8005d1c <osThreadCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_FREERTOS_Init+0xa8>)
 8000654:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityLow, 0, 128);
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_FREERTOS_Init+0xac>)
 8000658:	f107 0420 	add.w	r4, r7, #32
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fb53 	bl	8005d1c <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_FREERTOS_Init+0xb0>)
 800067a:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityLow, 0, 128);
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_FREERTOS_Init+0xb4>)
 800067e:	1d3c      	adds	r4, r7, #4
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fb42 	bl	8005d1c <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_FREERTOS_Init+0xb8>)
 800069c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800069e:	bf00      	nop
 80006a0:	3768      	adds	r7, #104	; 0x68
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	080095dc 	.word	0x080095dc
 80006ac:	200018dc 	.word	0x200018dc
 80006b0:	080095f8 	.word	0x080095f8
 80006b4:	200018d8 	.word	0x200018d8
 80006b8:	08009624 	.word	0x08009624
 80006bc:	200018e0 	.word	0x200018e0
 80006c0:	08009650 	.word	0x08009650
 80006c4:	200018d4 	.word	0x200018d4

080006c8 <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <StartDefaultTask+0x5c>)
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fba8 	bl	8005e30 <osMessageGet>
	if (event.status == osEventMessage) {
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b10      	cmp	r3, #16
 80006e4:	d11a      	bne.n	800071c <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <StartDefaultTask+0x60>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <StartDefaultTask+0x64>)
 80006f2:	5499      	strb	r1, [r3, r2]
		num_cell++;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <StartDefaultTask+0x60>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <StartDefaultTask+0x60>)
 80006fe:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <StartDefaultTask+0x60>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <StartDefaultTask+0x64>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <StartDefaultTask+0x4e>
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <StartDefaultTask+0x60>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2b64      	cmp	r3, #100	; 0x64
 8000714:	d102      	bne.n	800071c <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <StartDefaultTask+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f005 fb49 	bl	8005db4 <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 8000722:	e7d5      	b.n	80006d0 <StartDefaultTask+0x8>
 8000724:	200018dc 	.word	0x200018dc
 8000728:	200007d4 	.word	0x200007d4
 800072c:	200007d8 	.word	0x200007d8

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <MX_GPIO_Init+0x74>)
 800073c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0x74>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_GPIO_Init+0x74>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <MX_GPIO_Init+0x74>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_GPIO_Init+0x74>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80007ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80007bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c0:	2254      	movs	r2, #84	; 0x54
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 fece 	bl	8009566 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2220      	movs	r2, #32
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f008 fec2 	bl	8009566 <memset>

  hhrtim1.Instance = HRTIM1;
 80007e2:	4bc7      	ldr	r3, [pc, #796]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80007e4:	4ac7      	ldr	r2, [pc, #796]	; (8000b04 <MX_HRTIM1_Init+0x35c>)
 80007e6:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80007e8:	4bc5      	ldr	r3, [pc, #788]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80007ee:	4bc4      	ldr	r3, [pc, #784]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80007f4:	48c2      	ldr	r0, [pc, #776]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80007f6:	f001 ff6f 	bl	80026d8 <HAL_HRTIM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_HRTIM1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 fb4e 	bl	8000ea0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000804:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000812:	2305      	movs	r3, #5
 8000814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000818:	2308      	movs	r3, #8
 800081a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800081e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000822:	461a      	mov	r2, r3
 8000824:	2105      	movs	r1, #5
 8000826:	48b6      	ldr	r0, [pc, #728]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000828:	f002 f822 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_HRTIM1_Init+0x8e>
  {
    Error_Handler();
 8000832:	f000 fb35 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000846:	2301      	movs	r3, #1
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800084a:	2300      	movs	r3, #0
 800084c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800084e:	2300      	movs	r3, #0
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000852:	2300      	movs	r3, #0
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800085a:	2300      	movs	r3, #0
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800085e:	2300      	movs	r3, #0
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000862:	2300      	movs	r3, #0
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000866:	2300      	movs	r3, #0
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800086a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086e:	461a      	mov	r2, r3
 8000870:	2105      	movs	r1, #5
 8000872:	48a3      	ldr	r0, [pc, #652]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000874:	f002 f824 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_HRTIM1_Init+0xda>
  {
    Error_Handler();
 800087e:	f000 fb0f 	bl	8000ea0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 160;
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2201      	movs	r2, #1
 800088c:	2105      	movs	r1, #5
 800088e:	489c      	ldr	r0, [pc, #624]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000890:	f002 f888 	bl	80029a4 <HAL_HRTIM_WaveformCompareConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_HRTIM1_Init+0xf6>
  {
    Error_Handler();
 800089a:	f000 fb01 	bl	8000ea0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 320;
 800089e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008a2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	2202      	movs	r2, #2
 80008aa:	2105      	movs	r1, #5
 80008ac:	4894      	ldr	r0, [pc, #592]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80008ae:	f002 f879 	bl	80029a4 <HAL_HRTIM_WaveformCompareConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_HRTIM1_Init+0x114>
  {
    Error_Handler();
 80008b8:	f000 faf2 	bl	8000ea0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 480;
 80008bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008c0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2204      	movs	r2, #4
 80008c8:	2105      	movs	r1, #5
 80008ca:	488d      	ldr	r0, [pc, #564]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80008cc:	f002 f86a 	bl	80029a4 <HAL_HRTIM_WaveformCompareConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 80008d6:	f000 fae3 	bl	8000ea0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 640;
 80008da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008de:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	2208      	movs	r2, #8
 80008e6:	2105      	movs	r1, #5
 80008e8:	4885      	ldr	r0, [pc, #532]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80008ea:	f002 f85b 	bl	80029a4 <HAL_HRTIM_WaveformCompareConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_HRTIM1_Init+0x150>
  {
    Error_Handler();
 80008f4:	f000 fad4 	bl	8000ea0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 80008f8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000900:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000904:	461a      	mov	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	487d      	ldr	r0, [pc, #500]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 800090a:	f001 ffb1 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 8000914:	f000 fac4 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000928:	2301      	movs	r3, #1
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800092c:	2300      	movs	r3, #0
 800092e:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000930:	2300      	movs	r3, #0
 8000932:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000934:	2300      	movs	r3, #0
 8000936:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000938:	2300      	movs	r3, #0
 800093a:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800093c:	2300      	movs	r3, #0
 800093e:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000948:	2300      	movs	r3, #0
 800094a:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800094c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000950:	461a      	mov	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	486a      	ldr	r0, [pc, #424]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000956:	f001 ffb3 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 8000960:	f000 fa9e 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800096c:	2301      	movs	r3, #1
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	461a      	mov	r2, r3
 8000976:	2101      	movs	r1, #1
 8000978:	4861      	ldr	r0, [pc, #388]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 800097a:	f001 ffa1 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_HRTIM1_Init+0x1e0>
  {
    Error_Handler();
 8000984:	f000 fa8c 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000990:	2301      	movs	r3, #1
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000998:	461a      	mov	r2, r3
 800099a:	2102      	movs	r1, #2
 800099c:	4858      	ldr	r0, [pc, #352]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 800099e:	f001 ff8f 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_HRTIM1_Init+0x204>
  {
    Error_Handler();
 80009a8:	f000 fa7a 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80009b8:	2300      	movs	r3, #0
 80009ba:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	461a      	mov	r2, r3
 80009c2:	2103      	movs	r1, #3
 80009c4:	484e      	ldr	r0, [pc, #312]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80009c6:	f001 ff7b 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_HRTIM1_Init+0x22c>
  {
    Error_Handler();
 80009d0:	f000 fa66 	bl	8000ea0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMASrcAddress = 0x0000;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	461a      	mov	r2, r3
 80009ea:	2104      	movs	r1, #4
 80009ec:	4844      	ldr	r0, [pc, #272]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 80009ee:	f001 ff67 	bl	80028c0 <HAL_HRTIM_WaveformTimerConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_HRTIM1_Init+0x254>
  {
    Error_Handler();
 80009f8:	f000 fa52 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a0a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2201      	movs	r2, #1
 8000a24:	2100      	movs	r1, #0
 8000a26:	4836      	ldr	r0, [pc, #216]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000a28:	f002 f92a 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8000a32:	f000 fa35 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8000a36:	2302      	movs	r3, #2
 8000a38:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2204      	movs	r2, #4
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	482c      	ldr	r0, [pc, #176]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000a4e:	f002 f917 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_HRTIM1_Init+0x2b4>
  {
    Error_Handler();
 8000a58:	f000 fa22 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2210      	movs	r2, #16
 8000a70:	2102      	movs	r1, #2
 8000a72:	4823      	ldr	r0, [pc, #140]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000a74:	f002 f904 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8000a7e:	f000 fa0f 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	2103      	movs	r1, #3
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000a8a:	f002 f8f9 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_HRTIM1_Init+0x2f0>
  {
    Error_Handler();
 8000a94:	f000 fa04 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4815      	ldr	r0, [pc, #84]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000aaa:	f002 f8e9 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_HRTIM1_Init+0x310>
  {
    Error_Handler();
 8000ab4:	f000 f9f4 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000acc:	f002 f8d8 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8000ad6:	f000 f9e3 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP3;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP4;
 8000ae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2208      	movs	r2, #8
 8000aea:	2101      	movs	r1, #1
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_HRTIM1_Init+0x358>)
 8000aee:	f002 f8c7 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d007      	beq.n	8000b08 <MX_HRTIM1_Init+0x360>
  {
    Error_Handler();
 8000af8:	f000 f9d2 	bl	8000ea0 <Error_Handler>
 8000afc:	e004      	b.n	8000b08 <MX_HRTIM1_Init+0x360>
 8000afe:	bf00      	nop
 8000b00:	200018e4 	.word	0x200018e4
 8000b04:	40017400 	.word	0x40017400
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERCMP2;
 8000b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b12:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	2220      	movs	r2, #32
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000b1c:	f002 f8b0 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_HRTIM1_Init+0x382>
  {
    Error_Handler();
 8000b26:	f000 f9bb 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	2103      	movs	r1, #3
 8000b30:	482b      	ldr	r0, [pc, #172]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000b32:	f002 f8a5 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_HRTIM1_Init+0x398>
  {
    Error_Handler();
 8000b3c:	f000 f9b0 	bl	8000ea0 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4823      	ldr	r0, [pc, #140]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000b52:	f002 f895 	bl	8002c80 <HAL_HRTIM_WaveformOutputConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_HRTIM1_Init+0x3b8>
  {
    Error_Handler();
 8000b5c:	f000 f9a0 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000b60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000b6a:	f001 fe81 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_HRTIM1_Init+0x3d0>
  {
    Error_Handler();
 8000b74:	f000 f994 	bl	8000ea0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000b78:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000b80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b84:	461a      	mov	r2, r3
 8000b86:	2102      	movs	r1, #2
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000b8a:	f001 fe71 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_HRTIM1_Init+0x3f0>
  {
    Error_Handler();
 8000b94:	f000 f984 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000b98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000ba2:	f001 fe65 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_HRTIM1_Init+0x408>
  {
    Error_Handler();
 8000bac:	f000 f978 	bl	8000ea0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 640;
 8000bb0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000bb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000bc2:	f001 fe55 	bl	8002870 <HAL_HRTIM_TimeBaseConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_HRTIM1_Init+0x428>
  {
    Error_Handler();
 8000bcc:	f000 f968 	bl	8000ea0 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_HRTIM1_Init+0x438>)
 8000bd2:	f000 f827 	bl	8000c24 <HAL_HRTIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3790      	adds	r7, #144	; 0x90
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200018e4 	.word	0x200018e4

08000be4 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_HRTIM_MspInit+0x38>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10b      	bne.n	8000c0e <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_HRTIM_MspInit+0x3c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <HAL_HRTIM_MspInit+0x3c>)
 8000bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_HRTIM_MspInit+0x3c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40017400 	.word	0x40017400
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <HAL_HRTIM_MspPostInit+0xdc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d157      	bne.n	8000cf6 <HAL_HRTIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_HRTIM_MspPostInit+0xe0>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000ca0:	230d      	movs	r3, #13
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <HAL_HRTIM_MspPostInit+0xe4>)
 8000cac:	f001 fba2 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <HAL_HRTIM_MspPostInit+0xe8>)
 8000cce:	f001 fb91 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000cd2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000ce4:	230d      	movs	r3, #13
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f001 fb7f 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40017400 	.word	0x40017400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48000800 	.word	0x48000800

08000d10 <set_vol_cut_off>:
#include "system_config/system_config_internal.h"
#include "measurements/measurements_internal.h"

#include <string.h>

void set_vol_cut_off (void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d14:	f008 fa7a 	bl	800920c <save_data_from_set>
	set_for_voltage_cut_off();
 8000d18:	f008 fa5b 	bl	80091d2 <set_for_voltage_cut_off>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <set_charge_current>:

void set_charge_current (void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d24:	f008 fa72 	bl	800920c <save_data_from_set>
	set_for_charge_current();
 8000d28:	f008 fa5a 	bl	80091e0 <set_for_charge_current>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <set_battery_type>:

void set_battery_type (void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	save_data_from_set();
 8000d34:	f008 fa6a 	bl	800920c <save_data_from_set>
	set_for_battery_type();
 8000d38:	f008 fa59 	bl	80091ee <set_for_battery_type>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <get_vol_cut_off>:
		RESP_INVALID_PARAMETER)
};
	
// HERE MUST BE DECLARATIONS ONLY!
// NOT IMPLEMENTETIONS!
void get_vol_cut_off (void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_voltage_cut_off());
 8000d44:	f008 f93a 	bl	8008fbc <get_for_voltage_cut_off>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f008 fa74 	bl	8009238 <save_data_from_get>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <get_charge_current>:

void get_charge_current (void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_charge_current());
 8000d58:	f008 f938 	bl	8008fcc <get_for_charge_current>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f008 fa6a 	bl	8009238 <save_data_from_get>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <get_battery_type>:

void get_battery_type (void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	save_data_from_get(get_for_battery_type());
 8000d6c:	f008 fa46 	bl	80091fc <get_for_battery_type>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f008 fa60 	bl	8009238 <save_data_from_get>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fa8c 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f81a 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f7ff fcd2 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f7ff fbdc 	bl	8000548 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d90:	f000 f98a 	bl	80010a8 <MX_USART1_UART_Init>
  MX_HRTIM1_Init();
 8000d94:	f7ff fd08 	bl	80007a8 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8000d98:	f7ff fa2c 	bl	80001f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d9c:	f7ff fa9a 	bl	80002d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
//  INIT PARSER EXAMPLE:
  parser_create(&smart_charger_commands, MAX_CMD_LEN);
 8000da0:	211e      	movs	r1, #30
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <main+0x3c>)
 8000da4:	f008 f91a 	bl	8008fdc <parser_create>
  init_uart_data_transfer();
 8000da8:	f008 fa5e 	bl	8009268 <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000dac:	f7ff fc2e 	bl	800060c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000db0:	f004 ffad 	bl	8005d0e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <main+0x38>
 8000db6:	bf00      	nop
 8000db8:	200000a0 	.word	0x200000a0

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b096      	sub	sp, #88	; 0x58
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc6:	2228      	movs	r2, #40	; 0x28
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 fbcb 	bl	8009566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e02:	2300      	movs	r3, #0
 8000e04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fa93 	bl	800333c <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e1c:	f000 f840 	bl	8000ea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 f985 	bl	800414c <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e48:	f000 f82a 	bl	8000ea0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 8000e4c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e50:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fbda 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e6e:	f000 f817 	bl	8000ea0 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	; 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 fa1b 	bl	80012c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012c00 	.word	0x40012c00

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_MspInit+0x70>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_MspInit+0x70>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_MspInit+0x70>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_MspInit+0x70>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_MspInit+0x70>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_MspInit+0x70>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	f06f 0009 	mvn.w	r0, #9
 8000eee:	f001 f83d 	bl	8001f6c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	f06f 0004 	mvn.w	r0, #4
 8000efa:	f001 f837 	bl	8001f6c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	f06f 0003 	mvn.w	r0, #3
 8000f06:	f001 f831 	bl	8001f6c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	f06f 0001 	mvn.w	r0, #1
 8000f12:	f001 f82b 	bl	8001f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	2019      	movs	r0, #25
 8000f3a:	f001 f817 	bl	8001f6c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000f3e:	2019      	movs	r0, #25
 8000f40:	f001 f830 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_InitTick+0x9c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <HAL_InitTick+0x9c>)
 8000f4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_InitTick+0x9c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f5c:	f107 0210 	add.w	r2, r7, #16
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fb26 	bl	80045b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f6c:	f003 fb02 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 8000f70:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_InitTick+0xa0>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	0c9b      	lsrs	r3, r3, #18
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_InitTick+0xa8>)
 8000f84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000fa2:	f003 fc71 	bl	8004888 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d104      	bne.n	8000fb6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000fae:	f003 fca1 	bl	80048f4 <HAL_TIM_Base_Start_IT>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	200019cc 	.word	0x200019cc
 8000fcc:	40012c00 	.word	0x40012c00

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA1_Channel1_IRQHandler+0x10>)
 800100a:	f001 f8f6 	bl	80021fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20001890 	.word	0x20001890

08001018 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Channel4_IRQHandler+0x10>)
 800101e:	f001 f8ec 	bl	80021fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001a0c 	.word	0x20001a0c

0800102c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA1_Channel5_IRQHandler+0x10>)
 8001032:	f001 f8e2 	bl	80021fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001a50 	.word	0x20001a50

08001040 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001046:	f003 fc7f 	bl	8004948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200019cc 	.word	0x200019cc

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <USART1_IRQHandler+0x24>)
 800105a:	f004 f89d 	bl	8005198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <USART1_IRQHandler+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b10      	cmp	r3, #16
 800106a:	d102      	bne.n	8001072 <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <USART1_IRQHandler+0x24>)
 800106e:	f008 f943 	bl	80092f8 <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20001a94 	.word	0x20001a94

0800107c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SystemInit+0x28>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <SystemInit+0x28>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SystemInit+0x28>)
 8001092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001096:	609a      	str	r2, [r3, #8]
#endif
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <MX_USART1_UART_Init+0x5c>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART1_UART_Init+0x58>)
 80010ec:	f003 fe0a 	bl	8004d04 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010f6:	f7ff fed3 	bl	8000ea0 <Error_Handler>
  }

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20001a94 	.word	0x20001a94
 8001104:	40013800 	.word	0x40013800

08001108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a41      	ldr	r2, [pc, #260]	; (800122c <HAL_UART_MspInit+0x124>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d17b      	bne.n	8001222 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_UART_MspInit+0x128>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a40      	ldr	r2, [pc, #256]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	; 0xc0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	482f      	ldr	r0, [pc, #188]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001176:	f001 f93d 	bl	80023f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_UART_MspInit+0x130>)
 800117c:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_UART_MspInit+0x134>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_UART_MspInit+0x130>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_UART_MspInit+0x130>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_UART_MspInit+0x130>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_UART_MspInit+0x130>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_UART_MspInit+0x130>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_UART_MspInit+0x130>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_UART_MspInit+0x130>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <HAL_UART_MspInit+0x130>)
 80011ac:	f000 ff08 	bl	8001fc0 <HAL_DMA_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80011b6:	f7ff fe73 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_UART_MspInit+0x130>)
 80011be:	66da      	str	r2, [r3, #108]	; 0x6c
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x130>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_UART_MspInit+0x13c>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011ce:	2210      	movs	r2, #16
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x138>)
 80011f8:	f000 fee2 	bl	8001fc0 <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001202:	f7ff fe4d 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_UART_MspInit+0x138>)
 800120a:	669a      	str	r2, [r3, #104]	; 0x68
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_UART_MspInit+0x138>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2105      	movs	r1, #5
 8001216:	2025      	movs	r0, #37	; 0x25
 8001218:	f000 fea8 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121c:	2025      	movs	r0, #37	; 0x25
 800121e:	f000 fec1 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40013800 	.word	0x40013800
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400
 8001238:	20001a50 	.word	0x20001a50
 800123c:	40020058 	.word	0x40020058
 8001240:	20001a0c 	.word	0x20001a0c
 8001244:	40020044 	.word	0x40020044

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800124c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800124e:	e003      	b.n	8001258 <LoopCopyDataInit>

08001250 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001252:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001254:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001256:	3104      	adds	r1, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopForever+0xa>)
	ldr	r3, =_edata
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopForever+0xe>)
	adds	r2, r0, r1
 800125c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800125e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001260:	d3f6      	bcc.n	8001250 <CopyDataInit>
	ldr	r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001264:	e002      	b.n	800126c <LoopFillZerobss>

08001266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001266:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001268:	f842 3b04 	str.w	r3, [r2], #4

0800126c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <LoopForever+0x16>)
	cmp	r2, r3
 800126e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001270:	d3f9      	bcc.n	8001266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001272:	f7ff ff03 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f008 f947 	bl	8009508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff fd7f 	bl	8000d7c <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001280:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001284:	08009818 	.word	0x08009818
	ldr	r0, =_sdata
 8001288:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800128c:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8001290:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 8001294:	20001b58 	.word	0x20001b58

08001298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_2_IRQHandler>
	...

0800129c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x28>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x28>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 fe52 	bl	8001f56 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fe36 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fdfa 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200000e4 	.word	0x200000e4
 80012ec:	20001b14 	.word	0x20001b14

080012f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20001b14 	.word	0x20001b14

08001308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09a      	sub	sp, #104	; 0x68
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e172      	b.n	800160e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	d176      	bne.n	8001428 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d152      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff f817 	bl	8000390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d13b      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fce3 	bl	8001d3c <ADC_Disable>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	d12f      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
 8001388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800138c:	2b00      	cmp	r3, #0
 800138e:	d12b      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001398:	f023 0302 	bic.w	r3, r3, #2
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c4:	4b94      	ldr	r3, [pc, #592]	; (8001618 <HAL_ADC_Init+0x310>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a94      	ldr	r2, [pc, #592]	; (800161c <HAL_ADC_Init+0x314>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9a      	lsrs	r2, r3, #18
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013da:	e002      	b.n	80013e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	3b01      	subs	r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001404:	d110      	bne.n	8001428 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f023 0312 	bic.w	r3, r3, #18
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 80df 	bne.w	80015f4 <HAL_ADC_Init+0x2ec>
 8001436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80da 	bne.w	80015f4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 80d2 	bne.w	80015f4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_ADC_Init+0x318>)
 8001462:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146c:	d102      	bne.n	8001474 <HAL_ADC_Init+0x16c>
 800146e:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_ADC_Init+0x31c>)
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e002      	b.n	800147a <HAL_ADC_Init+0x172>
 8001474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001478:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_ADC_Init+0x192>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_ADC_Init+0x192>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_ADC_Init+0x194>
 800149a:	2300      	movs	r3, #0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d11c      	bne.n	80014da <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d010      	beq.n	80014c8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_ADC_Init+0x1ba>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x1ba>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_ADC_Init+0x1bc>
 80014c2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7e5b      	ldrb	r3, [r3, #25]
 80014de:	035b      	lsls	r3, r3, #13
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d002      	beq.n	80014ee <HAL_ADC_Init+0x1e6>
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_Init+0x1e8>
 80014ee:	2200      	movs	r2, #0
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001500:	4313      	orrs	r3, r2
 8001502:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d11b      	bne.n	8001546 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e5b      	ldrb	r3, [r3, #25]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	3b01      	subs	r3, #1
 800151c:	045a      	lsls	r2, r3, #17
 800151e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001520:	4313      	orrs	r3, r2
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
 8001528:	e00d      	b.n	8001546 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001532:	f043 0220 	orr.w	r2, r3, #32
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	2b01      	cmp	r3, #1
 800154c:	d007      	beq.n	800155e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	4313      	orrs	r3, r2
 8001558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155a:	4313      	orrs	r3, r2
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	d114      	bne.n	8001596 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e1b      	ldrb	r3, [r3, #24]
 8001584:	039a      	lsls	r2, r3, #14
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4313      	orrs	r3, r2
 8001590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001592:	4313      	orrs	r3, r2
 8001594:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_ADC_Init+0x320>)
 800159e:	4013      	ands	r3, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015a6:	430b      	orrs	r3, r1
 80015a8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10c      	bne.n	80015cc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f023 010f 	bic.w	r1, r3, #15
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ca:	e007      	b.n	80015dc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020f 	bic.w	r2, r2, #15
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
 80015f2:	e00a      	b.n	800160a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f023 0312 	bic.w	r3, r3, #18
 80015fc:	f043 0210 	orr.w	r2, r3, #16
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800160a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800160e:	4618      	mov	r0, r3
 8001610:	3768      	adds	r7, #104	; 0x68
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000dc 	.word	0x200000dc
 800161c:	431bde83 	.word	0x431bde83
 8001620:	50000300 	.word	0x50000300
 8001624:	50000100 	.word	0x50000100
 8001628:	fff0c007 	.word	0xfff0c007

0800162c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b09b      	sub	sp, #108	; 0x6c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x22>
 800164a:	2302      	movs	r3, #2
 800164c:	e2a5      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x56e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 8289 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d81c      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	461a      	mov	r2, r3
 8001682:	231f      	movs	r3, #31
 8001684:	4093      	lsls	r3, r2
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
 80016a6:	e063      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d81e      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b1e      	subs	r3, #30
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4019      	ands	r1, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3b1e      	subs	r3, #30
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
 80016ec:	e040      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b0e      	cmp	r3, #14
 80016f4:	d81e      	bhi.n	8001734 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	3b3c      	subs	r3, #60	; 0x3c
 800170a:	221f      	movs	r2, #31
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	4019      	ands	r1, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3b3c      	subs	r3, #60	; 0x3c
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
 8001732:	e01d      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	3b5a      	subs	r3, #90	; 0x5a
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	3b5a      	subs	r3, #90	; 0x5a
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80e5 	bne.w	800194a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d91c      	bls.n	80017c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6999      	ldr	r1, [r3, #24]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1e      	subs	r3, #30
 800179a:	2207      	movs	r2, #7
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6898      	ldr	r0, [r3, #8]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	e019      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6959      	ldr	r1, [r3, #20]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	2207      	movs	r2, #7
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6898      	ldr	r0, [r3, #8]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b03      	cmp	r3, #3
 8001816:	d84f      	bhi.n	80018b8 <HAL_ADC_ConfigChannel+0x28c>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_ADC_ConfigChannel+0x1f4>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001853 	.word	0x08001853
 8001828:	08001875 	.word	0x08001875
 800182c:	08001897 	.word	0x08001897
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001836:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_ADC_ConfigChannel+0x484>)
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	0691      	lsls	r1, r2, #26
 8001840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001842:	430a      	orrs	r2, r1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800184e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001850:	e07e      	b.n	8001950 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001858:	4b95      	ldr	r3, [pc, #596]	; (8001ab0 <HAL_ADC_ConfigChannel+0x484>)
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	0691      	lsls	r1, r2, #26
 8001862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001864:	430a      	orrs	r2, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001870:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001872:	e06d      	b.n	8001950 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800187a:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <HAL_ADC_ConfigChannel+0x484>)
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	0691      	lsls	r1, r2, #26
 8001884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001886:	430a      	orrs	r2, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001892:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001894:	e05c      	b.n	8001950 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800189c:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <HAL_ADC_ConfigChannel+0x484>)
 800189e:	4013      	ands	r3, r2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	0691      	lsls	r1, r2, #26
 80018a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a8:	430a      	orrs	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b6:	e04b      	b.n	8001950 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	069b      	lsls	r3, r3, #26
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001922:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800192a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	429a      	cmp	r2, r3
 8001936:	d10a      	bne.n	800194e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001946:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001948:	e001      	b.n	800194e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <HAL_ADC_ConfigChannel+0x324>
      break;
 800194e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x344>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x344>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_ADC_ConfigChannel+0x346>
 8001970:	2300      	movs	r3, #0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 810b 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00f      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800199e:	e049      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b09      	cmp	r3, #9
 80019c0:	d91c      	bls.n	80019fc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6999      	ldr	r1, [r3, #24]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	3b1b      	subs	r3, #27
 80019d4:	2207      	movs	r2, #7
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	4019      	ands	r1, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6898      	ldr	r0, [r3, #8]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b1b      	subs	r3, #27
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	619a      	str	r2, [r3, #24]
 80019fa:	e01b      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6959      	ldr	r1, [r3, #20]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4019      	ands	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6898      	ldr	r0, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_ADC_ConfigChannel+0x488>)
 8001a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b10      	cmp	r3, #16
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	f040 8092 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 808b 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a80:	d102      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x45c>
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_ADC_ConfigChannel+0x48c>)
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x462>
 8001a88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a8c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10f      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x490>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x490>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e007      	b.n	8001abe <HAL_ADC_ConfigChannel+0x492>
 8001aae:	bf00      	nop
 8001ab0:	83fff000 	.word	0x83fff000
 8001ab4:	50000300 	.word	0x50000300
 8001ab8:	50000100 	.word	0x50000100
 8001abc:	2300      	movs	r3, #0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d150      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x4b8>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x4b8>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x4ba>
 8001ae4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d13c      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11d      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x502>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afa:	d118      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b06:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_ADC_ConfigChannel+0x57c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <HAL_ADC_ConfigChannel+0x580>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9a      	lsrs	r2, r3, #18
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2c:	e02e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b11      	cmp	r3, #17
 8001b34:	d10b      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x522>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3e:	d106      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4c:	e01e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d11a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b62:	e013      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b76:	e00a      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	376c      	adds	r7, #108	; 0x6c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000dc 	.word	0x200000dc
 8001bac:	431bde83 	.word	0x431bde83

08001bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b099      	sub	sp, #100	; 0x64
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d102      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bca:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	e002      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bd4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0a2      	b.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e09b      	b.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d17f      	bne.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d179      	bne.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	4b49      	ldr	r3, [pc, #292]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001c12:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d040      	beq.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c2e:	035b      	lsls	r3, r3, #13
 8001c30:	430b      	orrs	r3, r1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c36:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d15c      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001c7a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d14b      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c88:	f023 030f 	bic.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	6892      	ldr	r2, [r2, #8]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c9c:	e03c      	b.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d123      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001cec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cfa:	f023 030f 	bic.w	r3, r3, #15
 8001cfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d00:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d02:	e009      	b.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d16:	e000      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d18:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d26:	4618      	mov	r0, r3
 8001d28:	3764      	adds	r7, #100	; 0x64
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	50000100 	.word	0x50000100
 8001d38:	50000300 	.word	0x50000300

08001d3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <ADC_Disable+0x2c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <ADC_Disable+0x2c>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <ADC_Disable+0x2e>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030d 	and.w	r3, r3, #13
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10f      	bne.n	8001d9c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0202 	orr.w	r2, r2, #2
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2203      	movs	r2, #3
 8001d92:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d94:	f7ff faac 	bl	80012f0 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d9a:	e022      	b.n	8001de2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01c      	b.n	8001df2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001db8:	f7ff fa9a 	bl	80012f0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d90d      	bls.n	8001de2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d0e3      	beq.n	8001db8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff4c 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7e:	f7ff ff61 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7ff ffb1 	bl	8001ef0 <NVIC_EncodePriority>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff80 	bl	8001e9c <__NVIC_SetPriority>
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff54 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e037      	b.n	8002046 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ff0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9c3 	bl	80023b4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}  
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_DMA_Start_IT+0x20>
 800206a:	2302      	movs	r3, #2
 800206c:	e04a      	b.n	8002104 <HAL_DMA_Start_IT+0xb6>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800207c:	2b01      	cmp	r3, #1
 800207e:	d13a      	bne.n	80020f6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f957 	bl	8002358 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 020e 	orr.w	r2, r2, #14
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e00f      	b.n	80020e4 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 020a 	orr.w	r2, r2, #10
 80020d2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0204 	bic.w	r2, r2, #4
 80020e2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e005      	b.n	8002102 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002102:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	2b02      	cmp	r3, #2
 800211c:	d008      	beq.n	8002130 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e020      	b.n	8002172 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020e 	bic.w	r2, r2, #14
 800213e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002190:	2b02      	cmp	r3, #2
 8002192:	d005      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e027      	b.n	80021f0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020e 	bic.w	r2, r2, #14
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
    } 
  }
  return status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2204      	movs	r2, #4
 8002218:	409a      	lsls	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x72>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01f      	beq.n	800226c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0204 	bic.w	r2, r2, #4
 8002248:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	2104      	movs	r1, #4
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06a      	beq.n	8002338 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800226a:	e065      	b.n	8002338 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2202      	movs	r2, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02c      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xdc>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d027      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020a 	bic.w	r2, r2, #10
 80022a2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	2102      	movs	r1, #2
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d035      	beq.n	8002338 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022d4:	e030      	b.n	8002338 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2208      	movs	r2, #8
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d028      	beq.n	8002338 <HAL_DMA_IRQHandler+0x13e>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d023      	beq.n	8002338 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 020e 	bic.w	r2, r2, #14
 80022fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
    }
  }
}  
 8002336:	e7ff      	b.n	8002338 <HAL_DMA_IRQHandler+0x13e>
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d108      	bne.n	8002398 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002396:	e007      	b.n	80023a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <DMA_CalcBaseAndBitshift+0x34>)
 80023c4:	4413      	add	r3, r2
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <DMA_CalcBaseAndBitshift+0x38>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <DMA_CalcBaseAndBitshift+0x3c>)
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	bffdfff8 	.word	0xbffdfff8
 80023ec:	cccccccd 	.word	0xcccccccd
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	e14e      	b.n	80026a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8140 	beq.w	800269c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x38>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d00b      	beq.n	80024c8 <HAL_GPIO_Init+0xd4>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024bc:	2b11      	cmp	r3, #17
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 809a 	beq.w	800269c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_GPIO_Init+0x2cc>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a54      	ldr	r2, [pc, #336]	; (80026c0 <HAL_GPIO_Init+0x2cc>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x2cc>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025aa:	d013      	beq.n	80025d4 <HAL_GPIO_Init+0x1e0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a46      	ldr	r2, [pc, #280]	; (80026c8 <HAL_GPIO_Init+0x2d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00d      	beq.n	80025d0 <HAL_GPIO_Init+0x1dc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a45      	ldr	r2, [pc, #276]	; (80026cc <HAL_GPIO_Init+0x2d8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <HAL_GPIO_Init+0x1d8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_GPIO_Init+0x2dc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_GPIO_Init+0x1d4>
 80025c4:	2303      	movs	r3, #3
 80025c6:	e006      	b.n	80025d6 <HAL_GPIO_Init+0x1e2>
 80025c8:	2305      	movs	r3, #5
 80025ca:	e004      	b.n	80025d6 <HAL_GPIO_Init+0x1e2>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_Init+0x1e2>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_GPIO_Init+0x1e2>
 80025d4:	2300      	movs	r3, #0
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	f002 0203 	and.w	r2, r2, #3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4093      	lsls	r3, r2
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e6:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002618:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_GPIO_Init+0x2e0>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f aea9 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	48000400 	.word	0x48000400
 80026cc:	48000800 	.word	0x48000800
 80026d0:	48000c00 	.word	0x48000c00
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0ba      	b.n	8002860 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02e      	beq.n	800278c <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_HRTIM_Init+0x190>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10b      	bne.n	8002750 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002738:	4b4c      	ldr	r3, [pc, #304]	; (800286c <HAL_HRTIM_Init+0x194>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_HRTIM_Init+0x194>)
 800273e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_HRTIM_Init+0x194>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800275e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002774:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe fa29 	bl	8000be4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80027d4:	2300      	movs	r3, #0
 80027d6:	75fb      	strb	r3, [r7, #23]
 80027d8:	e03e      	b.n	8002858 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80027da:	7dfa      	ldrb	r2, [r7, #23]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3318      	adds	r3, #24
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80027ee:	7dfa      	ldrb	r2, [r7, #23]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331c      	adds	r3, #28
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002802:	7dfa      	ldrb	r2, [r7, #23]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3320      	adds	r3, #32
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002816:	7dfa      	ldrb	r2, [r7, #23]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3324      	adds	r3, #36	; 0x24
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800282a:	7dfa      	ldrb	r2, [r7, #23]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3328      	adds	r3, #40	; 0x28
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800283e:	7dfa      	ldrb	r2, [r7, #23]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3330      	adds	r3, #48	; 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	3301      	adds	r3, #1
 8002856:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d9bd      	bls.n	80027da <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40017400 	.word	0x40017400
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d101      	bne.n	800288c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	e015      	b.n	80028b8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b05      	cmp	r3, #5
 8002898:	d104      	bne.n	80028a4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fa20 	bl	8002ce2 <HRTIM_MasterBase_Config>
 80028a2:	e004      	b.n	80028ae <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fa49 	bl	8002d40 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d101      	bne.n	80028dc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
 80028da:	e05f      	b.n	800299c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e058      	b.n	800299c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d104      	bne.n	800290a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fa5c 	bl	8002dc0 <HRTIM_MasterWaveform_Config>
 8002908:	e004      	b.n	8002914 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fabc 	bl	8002e8c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4403      	add	r3, r0
 8002926:	3320      	adds	r3, #32
 8002928:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4403      	add	r3, r0
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	3328      	adds	r3, #40	; 0x28
 8002954:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68d9      	ldr	r1, [r3, #12]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	332c      	adds	r3, #44	; 0x2c
 800296a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6919      	ldr	r1, [r3, #16]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3330      	adds	r3, #48	; 0x30
 8002980:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fc77 	bl	8003278 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d101      	bne.n	80029c2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e157      	b.n	8002c72 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e150      	b.n	8002c72 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d140      	bne.n	8002a68 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	d82a      	bhi.n	8002a44 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a15 	.word	0x08002a15
 80029f8:	08002a21 	.word	0x08002a21
 80029fc:	08002a45 	.word	0x08002a45
 8002a00:	08002a2d 	.word	0x08002a2d
 8002a04:	08002a45 	.word	0x08002a45
 8002a08:	08002a45 	.word	0x08002a45
 8002a0c:	08002a45 	.word	0x08002a45
 8002a10:	08002a39 	.word	0x08002a39
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	61da      	str	r2, [r3, #28]
        break;
 8002a1e:	e01a      	b.n	8002a56 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002a2a:	e014      	b.n	8002a56 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8002a36:	e00e      	b.n	8002a56 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8002a42:	e008      	b.n	8002a56 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2207      	movs	r2, #7
 8002a48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8002a54:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	f040 80fe 	bne.w	8002c60 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e104      	b.n	8002c72 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	f200 80e3 	bhi.w	8002c38 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a99 	.word	0x08002a99
 8002a7c:	08002aad 	.word	0x08002aad
 8002a80:	08002c39 	.word	0x08002c39
 8002a84:	08002b69 	.word	0x08002b69
 8002a88:	08002c39 	.word	0x08002c39
 8002a8c:	08002c39 	.word	0x08002c39
 8002a90:	08002c39 	.word	0x08002c39
 8002a94:	08002b7d 	.word	0x08002b7d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	01db      	lsls	r3, r3, #7
 8002aa4:	440b      	add	r3, r1
 8002aa6:	339c      	adds	r3, #156	; 0x9c
 8002aa8:	601a      	str	r2, [r3, #0]
        break;
 8002aaa:	e0d1      	b.n	8002c50 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	01db      	lsls	r3, r3, #7
 8002ab8:	440b      	add	r3, r1
 8002aba:	33a4      	adds	r3, #164	; 0xa4
 8002abc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03f      	beq.n	8002b46 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3301      	adds	r3, #1
 8002ace:	01db      	lsls	r3, r3, #7
 8002ad0:	4413      	add	r3, r2
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6811      	ldr	r1, [r2, #0]
 8002ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	01db      	lsls	r3, r3, #7
 8002ae2:	440b      	add	r3, r1
 8002ae4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	4413      	add	r3, r2
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	6809      	ldr	r1, [r1, #0]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	440b      	add	r3, r1
 8002b06:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b10:	d109      	bne.n	8002b26 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	01db      	lsls	r3, r3, #7
 8002b1e:	440b      	add	r3, r1
 8002b20:	339c      	adds	r3, #156	; 0x9c
 8002b22:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8002b24:	e091      	b.n	8002c4a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b2e:	f040 808c 	bne.w	8002c4a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	01db      	lsls	r3, r3, #7
 8002b3e:	440b      	add	r3, r1
 8002b40:	33a8      	adds	r3, #168	; 0xa8
 8002b42:	601a      	str	r2, [r3, #0]
         break;
 8002b44:	e081      	b.n	8002c4a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	01db      	lsls	r3, r3, #7
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	6811      	ldr	r1, [r2, #0]
 8002b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	01db      	lsls	r3, r3, #7
 8002b62:	440b      	add	r3, r1
 8002b64:	601a      	str	r2, [r3, #0]
         break;
 8002b66:	e070      	b.n	8002c4a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	01db      	lsls	r3, r3, #7
 8002b74:	440b      	add	r3, r1
 8002b76:	33a8      	adds	r3, #168	; 0xa8
 8002b78:	601a      	str	r2, [r3, #0]
        break;
 8002b7a:	e069      	b.n	8002c50 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	440b      	add	r3, r1
 8002b8a:	33ac      	adds	r3, #172	; 0xac
 8002b8c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03f      	beq.n	8002c16 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	6811      	ldr	r1, [r2, #0]
 8002ba8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	01db      	lsls	r3, r3, #7
 8002bb2:	440b      	add	r3, r1
 8002bb4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	01db      	lsls	r3, r3, #7
 8002bc0:	4413      	add	r3, r2
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	6809      	ldr	r1, [r1, #0]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	01db      	lsls	r3, r3, #7
 8002bd6:	440b      	add	r3, r1
 8002bd8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be2:	d109      	bne.n	8002bf8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	01db      	lsls	r3, r3, #7
 8002bf0:	440b      	add	r3, r1
 8002bf2:	339c      	adds	r3, #156	; 0x9c
 8002bf4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8002bf6:	e02a      	b.n	8002c4e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c00:	d125      	bne.n	8002c4e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	01db      	lsls	r3, r3, #7
 8002c0e:	440b      	add	r3, r1
 8002c10:	33a8      	adds	r3, #168	; 0xa8
 8002c12:	601a      	str	r2, [r3, #0]
         break;
 8002c14:	e01b      	b.n	8002c4e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	01db      	lsls	r3, r3, #7
 8002c20:	4413      	add	r3, r2
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	01db      	lsls	r3, r3, #7
 8002c32:	440b      	add	r3, r1
 8002c34:	601a      	str	r2, [r3, #0]
         break;
 8002c36:	e00a      	b.n	8002c4e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002c48:	e002      	b.n	8002c50 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002c4e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	d101      	bne.n	8002c60 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e008      	b.n	8002c72 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d101      	bne.n	8002c9e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e01d      	b.n	8002cda <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e016      	b.n	8002cda <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa22 	bl	800310c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0318 	bic.w	r3, r3, #24
 8002d0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6852      	ldr	r2, [r2, #4]
 8002d32:	619a      	str	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3301      	adds	r3, #1
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f023 0318 	bic.w	r3, r3, #24
 8002d74:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3301      	adds	r3, #1
 8002d88:	01db      	lsls	r3, r3, #7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3394      	adds	r3, #148	; 0x94
 8002da0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	01db      	lsls	r3, r3, #7
 8002dae:	440b      	add	r3, r1
 8002db0:	3398      	adds	r3, #152	; 0x98
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002dda:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0320 	bic.w	r3, r3, #32
 8002de2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e06:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e18:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002e2a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e3c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e50:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	01db      	lsls	r3, r3, #7
 8002ea2:	4413      	add	r3, r2
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	6811      	ldr	r1, [r2, #0]
 8002eaa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	01db      	lsls	r3, r3, #7
 8002eb4:	440b      	add	r3, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	01db      	lsls	r3, r3, #7
 8002ec2:	4413      	add	r3, r2
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	01db      	lsls	r3, r3, #7
 8002ed0:	4413      	add	r3, r2
 8002ed2:	33e8      	adds	r3, #232	; 0xe8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	01db      	lsls	r3, r3, #7
 8002ee0:	4413      	add	r3, r2
 8002ee2:	33e4      	adds	r3, #228	; 0xe4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002ef0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f023 0320 	bic.w	r3, r3, #32
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4313      	orrs	r3, r2
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f12:	4313      	orrs	r3, r2
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	4313      	orrs	r3, r2
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	4313      	orrs	r3, r2
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6e:	d103      	bne.n	8002f78 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4313      	orrs	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	4313      	orrs	r3, r2
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f023 031f 	bic.w	r3, r3, #31
 8002fb4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fca:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002ff8:	d004      	beq.n	8003004 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003002:	d103      	bne.n	800300c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d108      	bne.n	800301e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003012:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	4313      	orrs	r3, r2
 800301c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d843      	bhi.n	80030b2 <HRTIM_TimingUnitWaveform_Config+0x226>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003045 	.word	0x08003045
 8003034:	0800305b 	.word	0x0800305b
 8003038:	08003071 	.word	0x08003071
 800303c:	08003087 	.word	0x08003087
 8003040:	0800309d 	.word	0x0800309d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800304a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	4313      	orrs	r3, r2
 8003056:	61fb      	str	r3, [r7, #28]
      break;
 8003058:	e02c      	b.n	80030b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003060:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	4313      	orrs	r3, r2
 800306c:	61fb      	str	r3, [r7, #28]
      break;
 800306e:	e021      	b.n	80030b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003076:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	61fb      	str	r3, [r7, #28]
      break;
 8003084:	e016      	b.n	80030b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800308c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	4313      	orrs	r3, r2
 8003098:	61fb      	str	r3, [r7, #28]
      break;
 800309a:	e00b      	b.n	80030b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	015b      	lsls	r3, r3, #5
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61fb      	str	r3, [r7, #28]
      break;
 80030b0:	e000      	b.n	80030b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80030b2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	01db      	lsls	r3, r3, #7
 80030be:	4413      	add	r3, r2
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	01db      	lsls	r3, r3, #7
 80030cc:	4413      	add	r3, r2
 80030ce:	33e8      	adds	r3, #232	; 0xe8
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	01db      	lsls	r3, r3, #7
 80030dc:	4413      	add	r3, r2
 80030de:	33e4      	adds	r3, #228	; 0xe4
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4413      	add	r3, r2
 80030ee:	33d4      	adds	r3, #212	; 0xd4
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80030fe:	bf00      	nop
 8003100:	372c      	adds	r7, #44	; 0x2c
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	01db      	lsls	r3, r3, #7
 8003126:	4413      	add	r3, r2
 8003128:	33e4      	adds	r3, #228	; 0xe4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	01db      	lsls	r3, r3, #7
 8003136:	4413      	add	r3, r2
 8003138:	33b8      	adds	r3, #184	; 0xb8
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b10      	cmp	r3, #16
 8003142:	d01d      	beq.n	8003180 <HRTIM_OutputConfig+0x74>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d80b      	bhi.n	8003160 <HRTIM_OutputConfig+0x54>
 8003148:	2b02      	cmp	r3, #2
 800314a:	d02c      	beq.n	80031a6 <HRTIM_OutputConfig+0x9a>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d802      	bhi.n	8003156 <HRTIM_OutputConfig+0x4a>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d015      	beq.n	8003180 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 8003154:	e03c      	b.n	80031d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003156:	2b04      	cmp	r3, #4
 8003158:	d012      	beq.n	8003180 <HRTIM_OutputConfig+0x74>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d023      	beq.n	80031a6 <HRTIM_OutputConfig+0x9a>
    break;
 800315e:	e037      	b.n	80031d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d020      	beq.n	80031a6 <HRTIM_OutputConfig+0x9a>
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d804      	bhi.n	8003172 <HRTIM_OutputConfig+0x66>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d01c      	beq.n	80031a6 <HRTIM_OutputConfig+0x9a>
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HRTIM_OutputConfig+0x74>
    break;
 8003170:	e02e      	b.n	80031d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	d003      	beq.n	8003180 <HRTIM_OutputConfig+0x74>
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d013      	beq.n	80031a6 <HRTIM_OutputConfig+0x9a>
    break;
 800317e:	e027      	b.n	80031d0 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	01db      	lsls	r3, r3, #7
 800318c:	440b      	add	r3, r1
 800318e:	33bc      	adds	r3, #188	; 0xbc
 8003190:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	01db      	lsls	r3, r3, #7
 800319e:	440b      	add	r3, r1
 80031a0:	33c0      	adds	r3, #192	; 0xc0
 80031a2:	601a      	str	r2, [r3, #0]
      break;
 80031a4:	e014      	b.n	80031d0 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	01db      	lsls	r3, r3, #7
 80031b2:	440b      	add	r3, r1
 80031b4:	33c4      	adds	r3, #196	; 0xc4
 80031b6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	01db      	lsls	r3, r3, #7
 80031c4:	440b      	add	r3, r1
 80031c6:	33c8      	adds	r3, #200	; 0xc8
 80031c8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80031ca:	2310      	movs	r3, #16
 80031cc:	61bb      	str	r3, [r7, #24]
      break;
 80031ce:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80031d0:	22fe      	movs	r2, #254	; 0xfe
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80031d8:	43db      	mvns	r3, r3
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	4013      	ands	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	4313      	orrs	r3, r2
 800320e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	4313      	orrs	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4313      	orrs	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d111      	bne.n	800325c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	01db      	lsls	r3, r3, #7
 8003264:	4413      	add	r3, r2
 8003266:	33e4      	adds	r3, #228	; 0xe4
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	601a      	str	r2, [r3, #0]
}
 800326c:	bf00      	nop
 800326e:	3724      	adds	r7, #36	; 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d851      	bhi.n	800332c <HRTIM_ForceRegistersUpdate+0xb4>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HRTIM_ForceRegistersUpdate+0x18>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032d5 	.word	0x080032d5
 8003298:	080032eb 	.word	0x080032eb
 800329c:	08003301 	.word	0x08003301
 80032a0:	08003317 	.word	0x08003317
 80032a4:	080032a9 	.word	0x080032a9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80032bc:	e037      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0202 	orr.w	r2, r2, #2
 80032ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80032d2:	e02c      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0204 	orr.w	r2, r2, #4
 80032e4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80032e8:	e021      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80032fe:	e016      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0210 	orr.w	r2, r2, #16
 8003310:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003314:	e00b      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800332a:	e000      	b.n	800332e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800332c:	bf00      	nop
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003342:	af00      	add	r7, sp, #0
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f000 bef4 	b.w	800413e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 816a 	beq.w	800363a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003366:	4bb3      	ldr	r3, [pc, #716]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003372:	4bb0      	ldr	r3, [pc, #704]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d159      	bne.n	8003432 <HAL_RCC_OscConfig+0xf6>
 800337e:	4bad      	ldr	r3, [pc, #692]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d152      	bne.n	8003432 <HAL_RCC_OscConfig+0xf6>
 800338c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003390:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x82>
 80033b8:	4b9e      	ldr	r3, [pc, #632]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0xae>
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80033e6:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80033f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80033fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 810c 	beq.w	8003638 <HAL_RCC_OscConfig+0x2fc>
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 8106 	bne.w	8003638 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f000 be86 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x110>
 800343e:	4b7d      	ldr	r3, [pc, #500]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7c      	ldr	r2, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e030      	b.n	80034ae <HAL_RCC_OscConfig+0x172>
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x134>
 8003456:	4b77      	ldr	r3, [pc, #476]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a76      	ldr	r2, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a73      	ldr	r2, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e01e      	b.n	80034ae <HAL_RCC_OscConfig+0x172>
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_OscConfig+0x15a>
 800347c:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a69      	ldr	r2, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800348e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	e00b      	b.n	80034ae <HAL_RCC_OscConfig+0x172>
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a66      	ldr	r2, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800349c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80034a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	495d      	ldr	r1, [pc, #372]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d059      	beq.n	8003580 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fd ff10 	bl	80012f0 <HAL_GetTick>
 80034d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d6:	f7fd ff0b 	bl	80012f0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d902      	bls.n	80034ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	f000 be29 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
 80034ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003500:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x1e2>
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x20e>
 800351e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800353a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800354e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003556:	fa92 f2a2 	rbit	r2, r2
 800355a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800355e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ab      	beq.n	80034d6 <HAL_RCC_OscConfig+0x19a>
 800357e:	e05c      	b.n	800363a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd feb6 	bl	80012f0 <HAL_GetTick>
 8003584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358a:	f7fd feb1 	bl	80012f0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d902      	bls.n	80035a0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	f000 bdcf 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
 80035a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80035b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0x296>
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e015      	b.n	80035fe <HAL_RCC_OscConfig+0x2c2>
 80035d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_RCC_OscConfig+0x2f8>)
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800360a:	fa92 f2a2 	rbit	r2, r2
 800360e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003612:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ab      	bne.n	800358a <HAL_RCC_OscConfig+0x24e>
 8003632:	e002      	b.n	800363a <HAL_RCC_OscConfig+0x2fe>
 8003634:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 816f 	beq.w	8003928 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800364a:	4bd0      	ldr	r3, [pc, #832]	; (800398c <HAL_RCC_OscConfig+0x650>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003656:	4bcd      	ldr	r3, [pc, #820]	; (800398c <HAL_RCC_OscConfig+0x650>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d16c      	bne.n	800373c <HAL_RCC_OscConfig+0x400>
 8003662:	4bca      	ldr	r3, [pc, #808]	; (800398c <HAL_RCC_OscConfig+0x650>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d166      	bne.n	800373c <HAL_RCC_OscConfig+0x400>
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003680:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <HAL_RCC_OscConfig+0x362>
 8003698:	4bbc      	ldr	r3, [pc, #752]	; (800398c <HAL_RCC_OscConfig+0x650>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e013      	b.n	80036c6 <HAL_RCC_OscConfig+0x38a>
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036b0:	2302      	movs	r3, #2
 80036b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036c2:	4bb2      	ldr	r3, [pc, #712]	; (800398c <HAL_RCC_OscConfig+0x650>)
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2202      	movs	r2, #2
 80036c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80036cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80036d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_RCC_OscConfig+0x3cc>
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f000 bd1b 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x650>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	21f8      	movs	r1, #248	; 0xf8
 8003718:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003720:	fa91 f1a1 	rbit	r1, r1
 8003724:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003728:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800372c:	fab1 f181 	clz	r1, r1
 8003730:	b2c9      	uxtb	r1, r1
 8003732:	408b      	lsls	r3, r1
 8003734:	4995      	ldr	r1, [pc, #596]	; (800398c <HAL_RCC_OscConfig+0x650>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e0f5      	b.n	8003928 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8085 	beq.w	8003852 <HAL_RCC_OscConfig+0x516>
 8003748:	2301      	movs	r3, #1
 800374a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800375a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fdbc 	bl	80012f0 <HAL_GetTick>
 8003778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377e:	f7fd fdb7 	bl	80012f0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	f000 bcd5 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
 8003794:	2302      	movs	r3, #2
 8003796:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_OscConfig+0x488>
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x650>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e013      	b.n	80037ec <HAL_RCC_OscConfig+0x4b0>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_OscConfig+0x650>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80037f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80037fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0af      	beq.n	800377e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_RCC_OscConfig+0x650>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	21f8      	movs	r1, #248	; 0xf8
 800382e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003836:	fa91 f1a1 	rbit	r1, r1
 800383a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800383e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003842:	fab1 f181 	clz	r1, r1
 8003846:	b2c9      	uxtb	r1, r1
 8003848:	408b      	lsls	r3, r1
 800384a:	4950      	ldr	r1, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x650>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
 8003850:	e06a      	b.n	8003928 <HAL_RCC_OscConfig+0x5ec>
 8003852:	2301      	movs	r3, #1
 8003854:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fd37 	bl	80012f0 <HAL_GetTick>
 8003882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003888:	f7fd fd32 	bl	80012f0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f000 bc50 	b.w	800413e <HAL_RCC_OscConfig+0xe02>
 800389e:	2302      	movs	r3, #2
 80038a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0x592>
 80038c8:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_OscConfig+0x650>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e013      	b.n	80038f6 <HAL_RCC_OscConfig+0x5ba>
 80038ce:	2302      	movs	r3, #2
 80038d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x650>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2202      	movs	r2, #2
 80038f8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80038fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003908:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f042 0220 	orr.w	r2, r2, #32
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f002 021f 	and.w	r2, r2, #31
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f202 	lsl.w	r2, r1, r2
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1af      	bne.n	8003888 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80da 	beq.w	8003aec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <HAL_RCC_OscConfig+0x6da>
 8003942:	2301      	movs	r3, #1
 8003944:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x654>)
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	461a      	mov	r2, r3
 8003968:	2301      	movs	r3, #1
 800396a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fd fcc0 	bl	80012f0 <HAL_GetTick>
 8003970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	e00e      	b.n	8003994 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003976:	f7fd fcbb 	bl	80012f0 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d906      	bls.n	8003994 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e3d9      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	10908120 	.word	0x10908120
 8003994:	2302      	movs	r3, #2
 8003996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039c2:	2202      	movs	r2, #2
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	fa93 f2a3 	rbit	r2, r3
 80039d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 80039d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039de:	2102      	movs	r1, #2
 80039e0:	6019      	str	r1, [r3, #0]
 80039e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f1a3 	rbit	r1, r3
 80039ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039f0:	6019      	str	r1, [r3, #0]
  return result;
 80039f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0b0      	beq.n	8003976 <HAL_RCC_OscConfig+0x63a>
 8003a14:	e06a      	b.n	8003aec <HAL_RCC_OscConfig+0x7b0>
 8003a16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a2c:	601a      	str	r2, [r3, #0]
  return result;
 8003a2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <HAL_RCC_OscConfig+0x934>)
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a48:	f7fd fc52 	bl	80012f0 <HAL_GetTick>
 8003a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fd fc4d 	bl	80012f0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e36b      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 8003a66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a82:	2202      	movs	r2, #2
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fa93 f2a3 	rbit	r2, r3
 8003a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003aac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	6019      	str	r1, [r3, #0]
 8003aba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fa93 f1a3 	rbit	r1, r3
 8003ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ac8:	6019      	str	r1, [r3, #0]
  return result;
 8003aca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1b2      	bne.n	8003a52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8158 	beq.w	8003dac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	61d3      	str	r3, [r2, #28]
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b4f      	ldr	r3, [pc, #316]	; (8003c74 <HAL_RCC_OscConfig+0x938>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11a      	bne.n	8003b76 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b40:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x938>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a4b      	ldr	r2, [pc, #300]	; (8003c74 <HAL_RCC_OscConfig+0x938>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fbd0 	bl	80012f0 <HAL_GetTick>
 8003b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	e009      	b.n	8003b6a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7fd fbcb 	bl	80012f0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e2e9      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <HAL_RCC_OscConfig+0x938>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ef      	beq.n	8003b56 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x852>
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a39      	ldr	r2, [pc, #228]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e02f      	b.n	8003bee <HAL_RCC_OscConfig+0x8b2>
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x876>
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a33      	ldr	r2, [pc, #204]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a30      	ldr	r2, [pc, #192]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e01d      	b.n	8003bee <HAL_RCC_OscConfig+0x8b2>
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x89a>
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e00b      	b.n	8003bee <HAL_RCC_OscConfig+0x8b2>
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d06b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fb7a 	bl	80012f0 <HAL_GetTick>
 8003bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	e00b      	b.n	8003c1a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fd fb75 	bl	80012f0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e291      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 8003c1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c1e:	2202      	movs	r2, #2
 8003c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c36:	2202      	movs	r2, #2
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c48:	601a      	str	r2, [r3, #0]
  return result;
 8003c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d109      	bne.n	8003c78 <HAL_RCC_OscConfig+0x93c>
 8003c64:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <HAL_RCC_OscConfig+0x930>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x958>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	10908120 	.word	0x10908120
 8003c74:	40007000 	.word	0x40007000
 8003c78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	4bbb      	ldr	r3, [pc, #748]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c98:	2102      	movs	r1, #2
 8003c9a:	6011      	str	r1, [r2, #0]
 8003c9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	fa92 f1a2 	rbit	r1, r2
 8003ca6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003caa:	6011      	str	r1, [r2, #0]
  return result;
 8003cac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	fab2 f282 	clz	r2, r2
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f002 021f 	and.w	r2, r2, #31
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d099      	beq.n	8003c02 <HAL_RCC_OscConfig+0x8c6>
 8003cce:	e063      	b.n	8003d98 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fb0e 	bl	80012f0 <HAL_GetTick>
 8003cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	e00b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fd fb09 	bl	80012f0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e225      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 8003cf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f2a3 	rbit	r2, r3
 8003d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d20:	601a      	str	r2, [r3, #0]
  return result;
 8003d22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0xa06>
 8003d3c:	4b90      	ldr	r3, [pc, #576]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	e00d      	b.n	8003d5e <HAL_RCC_OscConfig+0xa22>
 8003d42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d46:	2202      	movs	r2, #2
 8003d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	4b89      	ldr	r3, [pc, #548]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d62:	2102      	movs	r1, #2
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	fa92 f1a2 	rbit	r1, r2
 8003d70:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d74:	6011      	str	r1, [r2, #0]
  return result;
 8003d76:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	fab2 f282 	clz	r2, r2
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f002 021f 	and.w	r2, r2, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1a0      	bne.n	8003cda <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b77      	ldr	r3, [pc, #476]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4a76      	ldr	r2, [pc, #472]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 81c2 	beq.w	800413c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db8:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	f000 819c 	beq.w	80040fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	f040 8114 	bne.w	8003ffa <HAL_RCC_OscConfig+0xcbe>
 8003dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003dea:	601a      	str	r2, [r3, #0]
  return result;
 8003dec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003df0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fa72 	bl	80012f0 <HAL_GetTick>
 8003e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	e009      	b.n	8003e26 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fd fa6d 	bl	80012f0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e18b      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 8003e26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	fa93 f2a3 	rbit	r2, r3
 8003e3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e3e:	601a      	str	r2, [r3, #0]
  return result;
 8003e40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0xb24>
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e01b      	b.n	8003e98 <HAL_RCC_OscConfig+0xb5c>
 8003e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	fa92 f1a2 	rbit	r1, r2
 8003eac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003eb0:	6011      	str	r1, [r2, #0]
  return result;
 8003eb2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	fab2 f282 	clz	r2, r2
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	f042 0220 	orr.w	r2, r2, #32
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	f002 021f 	and.w	r2, r2, #31
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d19e      	bne.n	8003e12 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	4925      	ldr	r1, [pc, #148]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f0e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	461a      	mov	r2, r3
 8003f22:	2301      	movs	r3, #1
 8003f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fd f9e3 	bl	80012f0 <HAL_GetTick>
 8003f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f2e:	e009      	b.n	8003f44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd f9de 	bl	80012f0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0fc      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 8003f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f5c:	601a      	str	r2, [r3, #0]
  return result;
 8003f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <HAL_RCC_OscConfig+0xc48>
 8003f78:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <HAL_RCC_OscConfig+0xc44>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	e01e      	b.n	8003fbc <HAL_RCC_OscConfig+0xc80>
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	fa93 f2a3 	rbit	r2, r3
 8003fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_OscConfig+0xe0c>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc4:	6011      	str	r1, [r2, #0]
 8003fc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	fa92 f1a2 	rbit	r1, r2
 8003fd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003fd4:	6011      	str	r1, [r2, #0]
  return result;
 8003fd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f002 021f 	and.w	r2, r2, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d09b      	beq.n	8003f30 <HAL_RCC_OscConfig+0xbf4>
 8003ff8:	e0a0      	b.n	800413c <HAL_RCC_OscConfig+0xe00>
 8003ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004012:	601a      	str	r2, [r3, #0]
  return result;
 8004014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd f95e 	bl	80012f0 <HAL_GetTick>
 8004034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	e009      	b.n	800404e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403a:	f7fd f959 	bl	80012f0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e077      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
 800404e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004066:	601a      	str	r2, [r3, #0]
  return result;
 8004068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800406c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d102      	bne.n	8004088 <HAL_RCC_OscConfig+0xd4c>
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_OscConfig+0xe0c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	e01b      	b.n	80040c0 <HAL_RCC_OscConfig+0xd84>
 8004088:	f107 0320 	add.w	r3, r7, #32
 800408c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f107 0320 	add.w	r3, r7, #32
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	fa93 f2a3 	rbit	r2, r3
 800409c:	f107 031c 	add.w	r3, r7, #28
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f107 0318 	add.w	r3, r7, #24
 80040a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f107 0318 	add.w	r3, r7, #24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	fa93 f2a3 	rbit	r2, r3
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_OscConfig+0xe0c>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f107 0210 	add.w	r2, r7, #16
 80040c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	f107 0210 	add.w	r2, r7, #16
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	fa92 f1a2 	rbit	r1, r2
 80040d4:	f107 020c 	add.w	r2, r7, #12
 80040d8:	6011      	str	r1, [r2, #0]
  return result;
 80040da:	f107 020c 	add.w	r2, r7, #12
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	fab2 f282 	clz	r2, r2
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f042 0220 	orr.w	r2, r2, #32
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	f002 021f 	and.w	r2, r2, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f202 	lsl.w	r2, r1, r2
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d19e      	bne.n	800403a <HAL_RCC_OscConfig+0xcfe>
 80040fc:	e01e      	b.n	800413c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e018      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_RCC_OscConfig+0xe0c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004114:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	429a      	cmp	r2, r3
 8004124:	d108      	bne.n	8004138 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800412a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09e      	sub	sp, #120	; 0x78
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e162      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b8d      	ldr	r3, [pc, #564]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	498b      	ldr	r1, [pc, #556]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e14a      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	497f      	ldr	r1, [pc, #508]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80dc 	beq.w	8004378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d13c      	bne.n	8004242 <HAL_RCC_ClockConfig+0xf6>
 80041c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xa6>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	e00f      	b.n	8004212 <HAL_RCC_ClockConfig+0xc6>
 80041f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
 8004206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004216:	65ba      	str	r2, [r7, #88]	; 0x58
 8004218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004222:	fab2 f282 	clz	r2, r2
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f042 0220 	orr.w	r2, r2, #32
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f002 021f 	and.w	r2, r2, #31
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d17b      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0f3      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d13c      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x178>
 800424a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_RCC_ClockConfig+0x128>
 800426e:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	e00f      	b.n	8004294 <HAL_RCC_ClockConfig+0x148>
 8004274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004298:	63ba      	str	r2, [r7, #56]	; 0x38
 800429a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429c:	fa92 f2a2 	rbit	r2, r2
 80042a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a4:	fab2 f282 	clz	r2, r2
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	f002 021f 	and.w	r2, r2, #31
 80042b4:	2101      	movs	r1, #1
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13a      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0b2      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
 80042c4:	2302      	movs	r3, #2
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	e00d      	b.n	8004308 <HAL_RCC_ClockConfig+0x1bc>
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	2302      	movs	r3, #2
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2202      	movs	r2, #2
 800430a:	61ba      	str	r2, [r7, #24]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	617a      	str	r2, [r7, #20]
  return result;
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e079      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	491a      	ldr	r1, [pc, #104]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004348:	f7fc ffd2 	bl	80012f0 <HAL_GetTick>
 800434c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fc ffce 	bl	80012f0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e061      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d214      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4906      	ldr	r1, [pc, #24]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e040      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	491a      	ldr	r1, [pc, #104]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4912      	ldr	r1, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043ee:	f000 f829 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80043f2:	4601      	mov	r1, r0
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fc:	22f0      	movs	r2, #240	; 0xf0
 80043fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	60fa      	str	r2, [r7, #12]
  return result;
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	40d3      	lsrs	r3, r2
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x2ec>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	fa21 f303 	lsr.w	r3, r1, r3
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <HAL_RCC_ClockConfig+0x2f0>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_RCC_ClockConfig+0x2f4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fd7e 	bl	8000f24 <HAL_InitTick>
  
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3778      	adds	r7, #120	; 0x78
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	080097d8 	.word	0x080097d8
 800443c:	200000dc 	.word	0x200000dc
 8004440:	200000e0 	.word	0x200000e0

08004444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b08b      	sub	sp, #44	; 0x2c
 8004448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b04      	cmp	r3, #4
 800446c:	d002      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x30>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x36>
 8004472:	e03c      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004476:	623b      	str	r3, [r7, #32]
      break;
 8004478:	e03c      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	fa92 f2a2 	rbit	r2, r2
 800448c:	607a      	str	r2, [r7, #4]
  return result;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	40d3      	lsrs	r3, r2
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_RCC_GetSysClockFreq+0xc8>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	220f      	movs	r2, #15
 80044a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	fa92 f2a2 	rbit	r2, r2
 80044b0:	60fa      	str	r2, [r7, #12]
  return result;
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	40d3      	lsrs	r3, r2
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044cc:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e004      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	623b      	str	r3, [r7, #32]
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f0:	623b      	str	r3, [r7, #32]
      break;
 80044f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	372c      	adds	r7, #44	; 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	007a1200 	.word	0x007a1200
 800450c:	080097f0 	.word	0x080097f0
 8004510:	08009800 	.word	0x08009800
 8004514:	003d0900 	.word	0x003d0900

08004518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_RCC_GetHCLKFreq+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	200000dc 	.word	0x200000dc

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004536:	f7ff ffef 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 800453a:	4601      	mov	r1, r0
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004544:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004548:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	fa92 f2a2 	rbit	r2, r2
 8004550:	603a      	str	r2, [r7, #0]
  return result;
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	fab2 f282 	clz	r2, r2
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	40d3      	lsrs	r3, r2
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x40>)
 800455e:	5cd3      	ldrb	r3, [r2, r3]
 8004560:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	080097e8 	.word	0x080097e8

08004574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800457a:	f7ff ffcd 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004588:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800458c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	fa92 f2a2 	rbit	r2, r2
 8004594:	603a      	str	r2, [r7, #0]
  return result;
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	40d3      	lsrs	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	080097e8 	.word	0x080097e8

080045b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	220f      	movs	r2, #15
 80045c6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0203 	and.w	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	08db      	lsrs	r3, r3, #3
 80045f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_RCC_GetClockConfig+0x60>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0207 	and.w	r2, r3, #7
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	40022000 	.word	0x40022000

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b092      	sub	sp, #72	; 0x48
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80d0 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004640:	4b8e      	ldr	r3, [pc, #568]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10e      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b8b      	ldr	r3, [pc, #556]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	4a8a      	ldr	r2, [pc, #552]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	61d3      	str	r3, [r2, #28]
 8004658:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a81      	ldr	r2, [pc, #516]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fc fe35 	bl	80012f0 <HAL_GetTick>
 8004686:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fc fe31 	bl	80012f0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0ea      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	4b78      	ldr	r3, [pc, #480]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a8:	4b74      	ldr	r3, [pc, #464]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d07d      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d076      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c6:	4b6d      	ldr	r3, [pc, #436]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e0:	fab3 f383 	clz	r3, r3
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	2301      	movs	r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d045      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc fde2 	bl	80012f0 <HAL_GetTick>
 800472c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	e00a      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004730:	f7fc fdde 	bl	80012f0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e095      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004746:	2302      	movs	r3, #2
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
 8004752:	2302      	movs	r3, #2
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	61fb      	str	r3, [r7, #28]
  return result;
 800475e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f043 0302 	orr.w	r3, r3, #2
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d102      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004774:	4b41      	ldr	r3, [pc, #260]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	e007      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800477a:	2302      	movs	r3, #2
 800477c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2202      	movs	r2, #2
 800478c:	613a      	str	r2, [r7, #16]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	fa92 f2a2 	rbit	r2, r2
 8004794:	60fa      	str	r2, [r7, #12]
  return result;
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	fab2 f282 	clz	r2, r2
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f002 021f 	and.w	r2, r2, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f202 	lsl.w	r2, r1, r2
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0bd      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	492e      	ldr	r1, [pc, #184]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4a2a      	ldr	r2, [pc, #168]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e6:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f023 0210 	bic.w	r2, r3, #16
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	491a      	ldr	r1, [pc, #104]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	4313      	orrs	r3, r2
 8004814:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	4913      	ldr	r1, [pc, #76]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004830:	4313      	orrs	r3, r2
 8004832:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004840:	4b0e      	ldr	r3, [pc, #56]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	490b      	ldr	r1, [pc, #44]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	4313      	orrs	r3, r2
 8004850:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3748      	adds	r7, #72	; 0x48
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
 8004884:	10908100 	.word	0x10908100

08004888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e01d      	b.n	80048d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f815 	bl	80048de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 f986 	bl	8004bd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_TIM_Base_Start_IT+0x50>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d00b      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0x42>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d007      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	00010007 	.word	0x00010007

08004948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0202 	mvn.w	r2, #2
 8004974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f905 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8f7 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f908 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0204 	mvn.w	r2, #4
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8db 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8cd 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8de 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0208 	mvn.w	r2, #8
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2204      	movs	r2, #4
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8b1 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8a3 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8b4 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0210 	mvn.w	r2, #16
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2208      	movs	r2, #8
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f887 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f879 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f88a 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0201 	mvn.w	r2, #1
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc f9d8 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8f2 	bl	8004cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8e5 	bl	8004cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d10e      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d107      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f838 	bl	8004bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d10e      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0220 	mvn.w	r2, #32
 8004b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f8a5 	bl	8004cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <TIM_Base_SetConfig+0xdc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d007      	beq.n	8004c00 <TIM_Base_SetConfig+0x28>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d003      	beq.n	8004c00 <TIM_Base_SetConfig+0x28>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <TIM_Base_SetConfig+0xe0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <TIM_Base_SetConfig+0xdc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <TIM_Base_SetConfig+0x6a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d00f      	beq.n	8004c42 <TIM_Base_SetConfig+0x6a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <TIM_Base_SetConfig+0xe0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_Base_SetConfig+0x6a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <TIM_Base_SetConfig+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_Base_SetConfig+0x6a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <TIM_Base_SetConfig+0xe8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_Base_SetConfig+0x6a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a21      	ldr	r2, [pc, #132]	; (8004cc4 <TIM_Base_SetConfig+0xec>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <TIM_Base_SetConfig+0xdc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_Base_SetConfig+0xc0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <TIM_Base_SetConfig+0xe4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_Base_SetConfig+0xc0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <TIM_Base_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0xc0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <TIM_Base_SetConfig+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d103      	bne.n	8004ca0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e040      	b.n	8004d98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc f9ee 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2224      	movs	r2, #36	; 0x24
 8004d30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fb96 	bl	8005474 <UART_SetConfig>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e022      	b.n	8004d98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fd0c 	bl	8005778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fd93 	bl	80058bc <UART_CheckIdleState>
 8004d96:	4603      	mov	r3, r0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d164      	bne.n	8004e80 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_Transmit_DMA+0x22>
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e05d      	b.n	8004e82 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Transmit_DMA+0x34>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e056      	b.n	8004e82 <HAL_UART_Transmit_DMA+0xe2>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2221      	movs	r2, #33	; 0x21
 8004dfc:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02a      	beq.n	8004e5c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0a:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <HAL_UART_Transmit_DMA+0xec>)
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e12:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <HAL_UART_Transmit_DMA+0xf0>)
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_UART_Transmit_DMA+0xf4>)
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e22:	2200      	movs	r2, #0
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	4619      	mov	r1, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3328      	adds	r3, #40	; 0x28
 8004e36:	461a      	mov	r2, r3
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	f7fd f908 	bl	800204e <HAL_DMA_Start_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2210      	movs	r2, #16
 8004e48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e012      	b.n	8004e82 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e7a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08005aa7 	.word	0x08005aa7
 8004e90:	08005af5 	.word	0x08005af5
 8004e94:	08005b8f 	.word	0x08005b8f

08004e98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d16c      	bne.n	8004f88 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_UART_Receive_DMA+0x22>
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e065      	b.n	8004f8a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Receive_DMA+0x34>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e05e      	b.n	8004f8a <HAL_UART_Receive_DMA+0xf2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2222      	movs	r2, #34	; 0x22
 8004eec:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02a      	beq.n	8004f4c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efa:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <HAL_UART_Receive_DMA+0xfc>)
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <HAL_UART_Receive_DMA+0x100>)
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <HAL_UART_Receive_DMA+0x104>)
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f12:	2200      	movs	r2, #0
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3324      	adds	r3, #36	; 0x24
 8004f20:	4619      	mov	r1, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	461a      	mov	r2, r3
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	f7fd f890 	bl	800204e <HAL_DMA_Start_IT>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2210      	movs	r2, #16
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e01e      	b.n	8004f8a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f62:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f82:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08005b11 	.word	0x08005b11
 8004f98:	08005b73 	.word	0x08005b73
 8004f9c:	08005b8f 	.word	0x08005b8f

08004fa0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004fb6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d124      	bne.n	8005020 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fe4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd f886 	bl	800210c <HAL_DMA_Abort>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00c      	beq.n	8005020 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd f998 	bl	8002340 <HAL_DMA_GetError>
 8005010:	4603      	mov	r3, r0
 8005012:	2b20      	cmp	r3, #32
 8005014:	d104      	bne.n	8005020 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2210      	movs	r2, #16
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e049      	b.n	80050b4 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d124      	bne.n	8005078 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504a:	2200      	movs	r2, #0
 800504c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd f85a 	bl	800210c <HAL_DMA_Abort>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd f96c 	bl	8002340 <HAL_DMA_GetError>
 8005068:	4603      	mov	r3, r0
 800506a:	2b20      	cmp	r3, #32
 800506c:	d104      	bne.n	8005078 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2210      	movs	r2, #16
 8005072:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e01d      	b.n	80050b4 <HAL_UART_Abort+0x114>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	220f      	movs	r2, #15
 800508e:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d139      	bne.n	8005166 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d013      	beq.n	8005132 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <HAL_UART_AbortReceive_IT+0xd8>)
 8005110:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd f831 	bl	800217e <HAL_DMA_Abort_IT>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d032      	beq.n	8005188 <HAL_UART_AbortReceive_IT+0xcc>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
 8005130:	e02a      	b.n	8005188 <HAL_UART_AbortReceive_IT+0xcc>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	220f      	movs	r2, #15
 8005146:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f97e 	bl	8005460 <HAL_UART_AbortReceiveCpltCallback>
 8005164:	e010      	b.n	8005188 <HAL_UART_AbortReceive_IT+0xcc>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	220f      	movs	r2, #15
 800517a:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f96c 	bl	8005460 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	08005c33 	.word	0x08005c33

08005198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d113      	bne.n	80051f0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8114 	beq.w	800540e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
      }
      return;
 80051ee:	e10e      	b.n	800540e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80d6 	beq.w	80053a4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80cb 	beq.w	80053a4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_UART_IRQHandler+0x9e>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <HAL_UART_IRQHandler+0xc6>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2202      	movs	r2, #2
 8005250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005256:	f043 0204 	orr.w	r2, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00e      	beq.n	8005286 <HAL_UART_IRQHandler+0xee>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2204      	movs	r2, #4
 8005278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527e:	f043 0202 	orr.w	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2208      	movs	r2, #8
 80052aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	f043 0208 	orr.w	r2, r3, #8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00f      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14a>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8093 	beq.w	8005412 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d004      	beq.n	800532e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800532a:	2b00      	cmp	r3, #0
 800532c:	d031      	beq.n	8005392 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fb99 	bl	8005a66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d123      	bne.n	800538a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_UART_IRQHandler+0x288>)
 8005360:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	4618      	mov	r0, r3
 8005368:	f7fc ff09 	bl	800217e <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00e      	b.n	80053a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f862 	bl	800544c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00a      	b.n	80053a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f85e 	bl	800544c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e006      	b.n	80053a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f85a 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800539e:	e038      	b.n	8005412 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	bf00      	nop
    return;
 80053a2:	e036      	b.n	8005412 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_UART_IRQHandler+0x232>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fc6f 	bl	8005ca6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053c8:	e026      	b.n	8005418 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    }
    return;
 80053ee:	e012      	b.n	8005416 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <HAL_UART_IRQHandler+0x280>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fc35 	bl	8005c74 <UART_EndTransmit_IT>
    return;
 800540a:	bf00      	nop
 800540c:	e004      	b.n	8005418 <HAL_UART_IRQHandler+0x280>
      return;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <HAL_UART_IRQHandler+0x280>
    return;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_UART_IRQHandler+0x280>
    return;
 8005416:	bf00      	nop
  }

}
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08005c07 	.word	0x08005c07

08005424 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4ba2      	ldr	r3, [pc, #648]	; (800572c <UART_SetConfig+0x2b8>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a90      	ldr	r2, [pc, #576]	; (8005730 <UART_SetConfig+0x2bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d121      	bne.n	8005538 <UART_SetConfig+0xc4>
 80054f4:	4b8f      	ldr	r3, [pc, #572]	; (8005734 <UART_SetConfig+0x2c0>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d817      	bhi.n	8005530 <UART_SetConfig+0xbc>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x94>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552b 	.word	0x0800552b
 8005514:	0800551f 	.word	0x0800551f
 8005518:	2300      	movs	r3, #0
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e01e      	b.n	800555c <UART_SetConfig+0xe8>
 800551e:	2302      	movs	r3, #2
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e01b      	b.n	800555c <UART_SetConfig+0xe8>
 8005524:	2304      	movs	r3, #4
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e018      	b.n	800555c <UART_SetConfig+0xe8>
 800552a:	2308      	movs	r3, #8
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e015      	b.n	800555c <UART_SetConfig+0xe8>
 8005530:	2310      	movs	r3, #16
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	bf00      	nop
 8005536:	e011      	b.n	800555c <UART_SetConfig+0xe8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7e      	ldr	r2, [pc, #504]	; (8005738 <UART_SetConfig+0x2c4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d102      	bne.n	8005548 <UART_SetConfig+0xd4>
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e009      	b.n	800555c <UART_SetConfig+0xe8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a7b      	ldr	r2, [pc, #492]	; (800573c <UART_SetConfig+0x2c8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d102      	bne.n	8005558 <UART_SetConfig+0xe4>
 8005552:	2300      	movs	r3, #0
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e001      	b.n	800555c <UART_SetConfig+0xe8>
 8005558:	2310      	movs	r3, #16
 800555a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	f040 8082 	bne.w	800566c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005568:	7ffb      	ldrb	r3, [r7, #31]
 800556a:	2b08      	cmp	r3, #8
 800556c:	d85e      	bhi.n	800562c <UART_SetConfig+0x1b8>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <UART_SetConfig+0x100>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005599 	.word	0x08005599
 8005578:	080055b9 	.word	0x080055b9
 800557c:	080055d9 	.word	0x080055d9
 8005580:	0800562d 	.word	0x0800562d
 8005584:	080055f5 	.word	0x080055f5
 8005588:	0800562d 	.word	0x0800562d
 800558c:	0800562d 	.word	0x0800562d
 8005590:	0800562d 	.word	0x0800562d
 8005594:	08005615 	.word	0x08005615
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7fe ffca 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 800559c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	61bb      	str	r3, [r7, #24]
        break;
 80055b6:	e03c      	b.n	8005632 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe ffdc 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 80055bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	61bb      	str	r3, [r7, #24]
        break;
 80055d6:	e02c      	b.n	8005632 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80055e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6852      	ldr	r2, [r2, #4]
 80055ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	61bb      	str	r3, [r7, #24]
        break;
 80055f2:	e01e      	b.n	8005632 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f4:	f7fe ff26 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80055f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	005a      	lsls	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	61bb      	str	r3, [r7, #24]
        break;
 8005612:	e00e      	b.n	8005632 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	b29b      	uxth	r3, r3
 8005628:	61bb      	str	r3, [r7, #24]
        break;
 800562a:	e002      	b.n	8005632 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
        break;
 8005630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d916      	bls.n	8005666 <UART_SetConfig+0x1f2>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d212      	bcs.n	8005666 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f023 030f 	bic.w	r3, r3, #15
 8005648:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	b29a      	uxth	r2, r3
 8005656:	897b      	ldrh	r3, [r7, #10]
 8005658:	4313      	orrs	r3, r2
 800565a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	897a      	ldrh	r2, [r7, #10]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	e07d      	b.n	8005762 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
 800566a:	e07a      	b.n	8005762 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 800566c:	7ffb      	ldrb	r3, [r7, #31]
 800566e:	2b08      	cmp	r3, #8
 8005670:	d866      	bhi.n	8005740 <UART_SetConfig+0x2cc>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x204>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056d9 	.word	0x080056d9
 8005684:	08005741 	.word	0x08005741
 8005688:	080056f5 	.word	0x080056f5
 800568c:	08005741 	.word	0x08005741
 8005690:	08005741 	.word	0x08005741
 8005694:	08005741 	.word	0x08005741
 8005698:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe ff48 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80056a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	085a      	lsrs	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	441a      	add	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e045      	b.n	8005746 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ba:	f7fe ff5b 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 80056be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	085a      	lsrs	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	61bb      	str	r3, [r7, #24]
        break;
 80056d6:	e036      	b.n	8005746 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80056e2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6852      	ldr	r2, [r2, #4]
 80056ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	61bb      	str	r3, [r7, #24]
        break;
 80056f2:	e028      	b.n	8005746 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f4:	f7fe fea6 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80056f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	085a      	lsrs	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	b29b      	uxth	r3, r3
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e019      	b.n	8005746 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x2d2>
 800572a:	bf00      	nop
 800572c:	efff69f3 	.word	0xefff69f3
 8005730:	40013800 	.word	0x40013800
 8005734:	40021000 	.word	0x40021000
 8005738:	40004400 	.word	0x40004400
 800573c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
        break;
 8005744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b0f      	cmp	r3, #15
 800574a:	d908      	bls.n	800575e <UART_SetConfig+0x2ea>
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005752:	d204      	bcs.n	800575e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e001      	b.n	8005762 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01a      	beq.n	800588e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d10a      	bne.n	800588e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80058ca:	f7fb fd11 	bl	80012f0 <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d10e      	bne.n	80058fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f82a 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e020      	b.n	800593e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d10e      	bne.n	8005928 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f814 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e00a      	b.n	800593e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	e05d      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d059      	beq.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005960:	f7fb fcc6 	bl	80012f0 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d11b      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e042      	b.n	8005a34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02b      	beq.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ca:	d123      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e00f      	b.n	8005a34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69da      	ldr	r2, [r3, #28]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d092      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a52:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d014      	beq.n	8005ae6 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ae4:	e002      	b.n	8005aec <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f003 fc7c 	bl	80093e4 <HAL_UART_TxCpltCallback>
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fc8e 	bl	8005424 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d01e      	beq.n	8005b64 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f003 fc21 	bl	80093ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fc59 	bl	8005438 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b80      	cmp	r3, #128	; 0x80
 8005bb4:	d109      	bne.n	8005bca <UART_DMAError+0x3c>
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b21      	cmp	r3, #33	; 0x21
 8005bba:	d106      	bne.n	8005bca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f7ff ff39 	bl	8005a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d109      	bne.n	8005bec <UART_DMAError+0x5e>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b22      	cmp	r3, #34	; 0x22
 8005bdc:	d106      	bne.n	8005bec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff ff3d 	bl	8005a66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf0:	f043 0210 	orr.w	r2, r3, #16
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f7ff fc27 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fc11 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0208 	orr.w	r2, r2, #8
 8005c5e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fbfa 	bl	8005460 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f003 fba3 	bl	80093e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ccc:	2b84      	cmp	r3, #132	; 0x84
 8005cce:	d005      	beq.n	8005cdc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005cd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3303      	adds	r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf0:	f3ef 8305 	mrs	r3, IPSR
 8005cf4:	607b      	str	r3, [r7, #4]
  return(result);
 8005cf6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bf14      	ite	ne
 8005cfc:	2301      	movne	r3, #1
 8005cfe:	2300      	moveq	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d12:	f001 fa95 	bl	8007240 <vTaskStartScheduler>
  
  return osOK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1e:	b089      	sub	sp, #36	; 0x24
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d020      	beq.n	8005d70 <osThreadCreate+0x54>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01c      	beq.n	8005d70 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685c      	ldr	r4, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681d      	ldr	r5, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691e      	ldr	r6, [r3, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ffb6 	bl	8005cba <makeFreeRtosPriority>
 8005d4e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d58:	9202      	str	r2, [sp, #8]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	9100      	str	r1, [sp, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4629      	mov	r1, r5
 8005d64:	4620      	mov	r0, r4
 8005d66:	f001 f8b1 	bl	8006ecc <xTaskCreateStatic>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e01c      	b.n	8005daa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685c      	ldr	r4, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d7c:	b29e      	uxth	r6, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff98 	bl	8005cba <makeFreeRtosPriority>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	9200      	str	r2, [sp, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4632      	mov	r2, r6
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f001 f8ef 	bl	8006f7e <xTaskCreate>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d001      	beq.n	8005daa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005db4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <osDelay+0x16>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	e000      	b.n	8005dcc <osDelay+0x18>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 fa03 	bl	80071d8 <vTaskDelay>
  
  return osOK;
 8005dd2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d012      	beq.n	8005e14 <osMessageCreate+0x38>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68dc      	ldr	r4, [r3, #12]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f000 fb3c 	bl	8006488 <xQueueGenericCreateStatic>
 8005e10:	4603      	mov	r3, r0
 8005e12:	e008      	b.n	8005e26 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f000 fba4 	bl	800656c <xQueueGenericCreate>
 8005e24:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd90      	pop	{r4, r7, pc}
	...

08005e30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b08b      	sub	sp, #44	; 0x2c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	617b      	str	r3, [r7, #20]
    return event;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	461c      	mov	r4, r3
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e5e:	e054      	b.n	8005f0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d103      	bne.n	8005e78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	e009      	b.n	8005e8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d006      	beq.n	8005e8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <osMessageGet+0x5c>
      ticks = 1;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e8c:	f7ff ff2d 	bl	8005cea <inHandlerMode>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01c      	beq.n	8005ed0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e96:	f107 0220 	add.w	r2, r7, #32
 8005e9a:	f107 0314 	add.w	r3, r7, #20
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68b8      	ldr	r0, [r7, #8]
 8005ea4:	f000 fe28 	bl	8006af8 <xQueueReceiveFromISR>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d102      	bne.n	8005eb4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005eae:	2310      	movs	r3, #16
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e001      	b.n	8005eb8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01d      	beq.n	8005efa <osMessageGet+0xca>
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <osMessageGet+0xe4>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	e014      	b.n	8005efa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68b8      	ldr	r0, [r7, #8]
 8005edc:	f000 fd30 	bl	8006940 <xQueueReceive>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e006      	b.n	8005efa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <osMessageGet+0xc6>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <osMessageGet+0xc8>
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	461c      	mov	r4, r3
 8005efe:	f107 0314 	add.w	r3, r7, #20
 8005f02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	372c      	adds	r7, #44	; 0x2c
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005f1e:	201c      	movs	r0, #28
 8005f20:	f002 fcee 	bl	8008900 <pvPortMalloc>
 8005f24:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f98a 	bl	8006250 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005f42:	687b      	ldr	r3, [r7, #4]
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b090      	sub	sp, #64	; 0x40
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	e7fe      	b.n	8005f7e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <xEventGroupWaitBits+0x52>
 8005f8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e7fe      	b.n	8005f9c <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <xEventGroupWaitBits+0x6c>
 8005fa4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e7fe      	b.n	8005fb6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb8:	f001 fe1a 	bl	8007bf0 <xTaskGetSchedulerState>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xEventGroupWaitBits+0x7c>
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <xEventGroupWaitBits+0x80>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <xEventGroupWaitBits+0x82>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <xEventGroupWaitBits+0x9a>
 8005fd2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e7fe      	b.n	8005fe4 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005fe6:	f001 f98f 	bl	8007308 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ff6:	f000 f909 	bl	800620c <prvTestWaitCondition>
 8005ffa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006006:	2300      	movs	r3, #0
 8006008:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d028      	beq.n	8006062 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	43db      	mvns	r3, r3
 8006018:	401a      	ands	r2, r3
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e020      	b.n	8006062 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	633b      	str	r3, [r7, #48]	; 0x30
 800602e:	e018      	b.n	8006062 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	1d18      	adds	r0, r3, #4
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	4313      	orrs	r3, r2
 8006056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006058:	4619      	mov	r1, r3
 800605a:	f001 fb49 	bl	80076f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006062:	f001 f95f 	bl	8007324 <xTaskResumeAll>
 8006066:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606a:	2b00      	cmp	r3, #0
 800606c:	d031      	beq.n	80060d2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <xEventGroupWaitBits+0x190>)
 8006076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006084:	f001 fe56 	bl	8007d34 <uxTaskResetEventItemValue>
 8006088:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d11a      	bne.n	80060ca <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8006094:	f002 fb1a 	bl	80086cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060a4:	f000 f8b2 	bl	800620c <prvTestWaitCondition>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	401a      	ands	r2, r3
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80060c6:	f002 fb2f 	bl	8008728 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80060ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3740      	adds	r7, #64	; 0x40
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08e      	sub	sp, #56	; 0x38
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80060ea:	2300      	movs	r3, #0
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <xEventGroupSetBits+0x30>
 80060fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	e7fe      	b.n	800610e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <xEventGroupSetBits+0x4e>
 800611a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e7fe      	b.n	800612c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	3304      	adds	r3, #4
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	3308      	adds	r3, #8
 8006138:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800613a:	f001 f8e5 	bl	8007308 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	431a      	orrs	r2, r3
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006150:	e03c      	b.n	80061cc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800615e:	2300      	movs	r3, #0
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006168:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006170:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d108      	bne.n	800618e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618c:	e008      	b.n	80061a0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d101      	bne.n	80061a0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d010      	beq.n	80061c8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80061b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061c0:	4619      	mov	r1, r3
 80061c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061c4:	f001 fb5a 	bl	800787c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80061cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1be      	bne.n	8006152 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	43db      	mvns	r3, r3
 80061dc:	401a      	ands	r2, r3
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80061e2:	f001 f89f 	bl	8007324 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	681b      	ldr	r3, [r3, #0]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3738      	adds	r7, #56	; 0x38
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff6e 	bl	80060e0 <xEventGroupSetBits>
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e007      	b.n	8006242 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d101      	bne.n	8006242 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f103 0208 	add.w	r2, r3, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f04f 32ff 	mov.w	r2, #4294967295
 8006268:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f103 0208 	add.w	r2, r3, #8
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f103 0208 	add.w	r2, r3, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d103      	bne.n	8006312 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e00c      	b.n	800632c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3308      	adds	r3, #8
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e002      	b.n	8006320 <vListInsert+0x2e>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d2f6      	bcs.n	800631a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6892      	ldr	r2, [r2, #8]
 800637a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6852      	ldr	r2, [r2, #4]
 8006384:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d103      	bne.n	8006398 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <xQueueGenericReset+0x28>
 80063cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	e7fe      	b.n	80063de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80063e0:	f002 f974 	bl	80086cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	3b01      	subs	r3, #1
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	22ff      	movs	r2, #255	; 0xff
 800642c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d114      	bne.n	8006460 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01a      	beq.n	8006474 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3310      	adds	r3, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f001 f9b8 	bl	80077b8 <xTaskRemoveFromEventList>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d012      	beq.n	8006474 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <xQueueGenericReset+0xcc>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	e009      	b.n	8006474 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3310      	adds	r3, #16
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fef3 	bl	8006250 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3324      	adds	r3, #36	; 0x24
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff feee 	bl	8006250 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006474:	f002 f958 	bl	8008728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006478:	2301      	movs	r3, #1
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <xQueueGenericCreateStatic+0x28>
 800649c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ae:	e7fe      	b.n	80064ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <xQueueGenericCreateStatic+0x42>
 80064b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
 80064c8:	e7fe      	b.n	80064c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <xQueueGenericCreateStatic+0x4e>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <xQueueGenericCreateStatic+0x52>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericCreateStatic+0x54>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <xQueueGenericCreateStatic+0x6c>
 80064e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	e7fe      	b.n	80064f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <xQueueGenericCreateStatic+0x78>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <xQueueGenericCreateStatic+0x7c>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <xQueueGenericCreateStatic+0x7e>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <xQueueGenericCreateStatic+0x96>
 800650a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e7fe      	b.n	800651c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800651e:	2348      	movs	r3, #72	; 0x48
 8006520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b48      	cmp	r3, #72	; 0x48
 8006526:	d009      	beq.n	800653c <xQueueGenericCreateStatic+0xb4>
 8006528:	f04f 0330 	mov.w	r3, #48	; 0x30
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e7fe      	b.n	800653a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800654e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f842 	bl	80065e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006564:	4618      	mov	r0, r3
 8006566:	3730      	adds	r7, #48	; 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <xQueueGenericCreate+0x28>
 8006580:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e7fe      	b.n	8006592 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e004      	b.n	80065aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	3348      	adds	r3, #72	; 0x48
 80065ae:	4618      	mov	r0, r3
 80065b0:	f002 f9a6 	bl	8008900 <pvPortMalloc>
 80065b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00f      	beq.n	80065dc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	3348      	adds	r3, #72	; 0x48
 80065c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ca:	79fa      	ldrb	r2, [r7, #7]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f805 	bl	80065e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065dc:	69bb      	ldr	r3, [r7, #24]
	}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e002      	b.n	8006608 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006614:	2101      	movs	r1, #1
 8006616:	69b8      	ldr	r0, [r7, #24]
 8006618:	f7ff fece 	bl	80063b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006632:	2300      	movs	r3, #0
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <xQueueGenericSend+0x30>
 8006640:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
 8006652:	e7fe      	b.n	8006652 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <xQueueGenericSend+0x3e>
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <xQueueGenericSend+0x42>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <xQueueGenericSend+0x44>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <xQueueGenericSend+0x5c>
 800666c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
 800667e:	e7fe      	b.n	800667e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d103      	bne.n	800668e <xQueueGenericSend+0x6a>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <xQueueGenericSend+0x6e>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <xQueueGenericSend+0x70>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <xQueueGenericSend+0x88>
 8006698:	f04f 0330 	mov.w	r3, #48	; 0x30
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	e7fe      	b.n	80066aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ac:	f001 faa0 	bl	8007bf0 <xTaskGetSchedulerState>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <xQueueGenericSend+0x98>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <xQueueGenericSend+0x9c>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <xQueueGenericSend+0x9e>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <xQueueGenericSend+0xb6>
 80066c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066da:	f001 fff7 	bl	80086cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <xQueueGenericSend+0xcc>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d129      	bne.n	8006744 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f6:	f000 fa7c 	bl	8006bf2 <prvCopyDataToQueue>
 80066fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d010      	beq.n	8006726 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f001 f855 	bl	80077b8 <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006714:	4b3f      	ldr	r3, [pc, #252]	; (8006814 <xQueueGenericSend+0x1f0>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	e00a      	b.n	800673c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800672c:	4b39      	ldr	r3, [pc, #228]	; (8006814 <xQueueGenericSend+0x1f0>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800673c:	f001 fff4 	bl	8008728 <vPortExitCritical>
				return pdPASS;
 8006740:	2301      	movs	r3, #1
 8006742:	e063      	b.n	800680c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800674a:	f001 ffed 	bl	8008728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800674e:	2300      	movs	r3, #0
 8006750:	e05c      	b.n	800680c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f8ed 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006766:	f001 ffdf 	bl	8008728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800676a:	f000 fdcd 	bl	8007308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676e:	f001 ffad 	bl	80086cc <vPortEnterCritical>
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x164>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x17a>
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679e:	f001 ffc3 	bl	8008728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067a2:	1d3a      	adds	r2, r7, #4
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f8dc 	bl	8007968 <xTaskCheckForTimeOut>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d124      	bne.n	8006800 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067b8:	f000 fb13 	bl	8006de2 <prvIsQueueFull>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	3310      	adds	r3, #16
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 ff6c 	bl	80076a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d2:	f000 fa9e 	bl	8006d12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067d6:	f000 fda5 	bl	8007324 <xTaskResumeAll>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f af7c 	bne.w	80066da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <xQueueGenericSend+0x1f0>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	e772      	b.n	80066da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f6:	f000 fa8c 	bl	8006d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067fa:	f000 fd93 	bl	8007324 <xTaskResumeAll>
 80067fe:	e76c      	b.n	80066da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006802:	f000 fa86 	bl	8006d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006806:	f000 fd8d 	bl	8007324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
		}
	}
}
 800680c:	4618      	mov	r0, r3
 800680e:	3738      	adds	r7, #56	; 0x38
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <xQueueGenericSendFromISR+0x2c>
 8006830:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <xQueueGenericSendFromISR+0x3a>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <xQueueGenericSendFromISR+0x3e>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSendFromISR+0x40>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xQueueGenericSendFromISR+0x58>
 800685c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	e7fe      	b.n	800686e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d103      	bne.n	800687e <xQueueGenericSendFromISR+0x66>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <xQueueGenericSendFromISR+0x6a>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <xQueueGenericSendFromISR+0x6c>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d109      	bne.n	800689c <xQueueGenericSendFromISR+0x84>
 8006888:	f04f 0330 	mov.w	r3, #48	; 0x30
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e7fe      	b.n	800689a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800689c:	f001 fff2 	bl	8008884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068a0:	f3ef 8211 	mrs	r2, BASEPRI
 80068a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	61ba      	str	r2, [r7, #24]
 80068b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <xQueueGenericSendFromISR+0xb6>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d12c      	bne.n	8006928 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068de:	f000 f988 	bl	8006bf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d112      	bne.n	8006912 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 ff5d 	bl	80077b8 <xTaskRemoveFromEventList>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e007      	b.n	8006922 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006916:	3301      	adds	r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	b25a      	sxtb	r2, r3
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006922:	2301      	movs	r3, #1
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006926:	e001      	b.n	800692c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006928:	2300      	movs	r3, #0
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	; 0x30
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <xQueueReceive+0x2e>
	__asm volatile
 800695a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	e7fe      	b.n	800696c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <xQueueReceive+0x3c>
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <xQueueReceive+0x40>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <xQueueReceive+0x42>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <xQueueReceive+0x5a>
 8006986:	f04f 0330 	mov.w	r3, #48	; 0x30
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e7fe      	b.n	8006998 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699a:	f001 f929 	bl	8007bf0 <xTaskGetSchedulerState>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <xQueueReceive+0x6a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <xQueueReceive+0x6e>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueReceive+0x70>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <xQueueReceive+0x88>
 80069b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e7fe      	b.n	80069c6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80069c8:	f001 fe80 	bl	80086cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01f      	beq.n	8006a18 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069dc:	f000 f973 	bl	8006cc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1e5a      	subs	r2, r3, #1
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	3310      	adds	r3, #16
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fedf 	bl	80077b8 <xTaskRemoveFromEventList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a00:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <xQueueReceive+0x1b4>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a10:	f001 fe8a 	bl	8008728 <vPortExitCritical>
				return pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e069      	b.n	8006aec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a1e:	f001 fe83 	bl	8008728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e062      	b.n	8006aec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 ff83 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a3a:	f001 fe75 	bl	8008728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a3e:	f000 fc63 	bl	8007308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a42:	f001 fe43 	bl	80086cc <vPortEnterCritical>
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d103      	bne.n	8006a5c <xQueueReceive+0x11c>
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d103      	bne.n	8006a72 <xQueueReceive+0x132>
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a72:	f001 fe59 	bl	8008728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	f107 0310 	add.w	r3, r7, #16
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 ff72 	bl	8007968 <xTaskCheckForTimeOut>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d123      	bne.n	8006ad2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8c:	f000 f993 	bl	8006db6 <prvIsQueueEmpty>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d017      	beq.n	8006ac6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	3324      	adds	r3, #36	; 0x24
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fe02 	bl	80076a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa6:	f000 f934 	bl	8006d12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aaa:	f000 fc3b 	bl	8007324 <xTaskResumeAll>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d189      	bne.n	80069c8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <xQueueReceive+0x1b4>)
 8006ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	e780      	b.n	80069c8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac8:	f000 f923 	bl	8006d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006acc:	f000 fc2a 	bl	8007324 <xTaskResumeAll>
 8006ad0:	e77a      	b.n	80069c8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad4:	f000 f91d 	bl	8006d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad8:	f000 fc24 	bl	8007324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ade:	f000 f96a 	bl	8006db6 <prvIsQueueEmpty>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f43f af6f 	beq.w	80069c8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006aea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3730      	adds	r7, #48	; 0x30
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <xQueueReceiveFromISR+0x2a>
 8006b0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	e7fe      	b.n	8006b20 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <xQueueReceiveFromISR+0x38>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <xQueueReceiveFromISR+0x3c>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <xQueueReceiveFromISR+0x3e>
 8006b34:	2300      	movs	r3, #0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <xQueueReceiveFromISR+0x56>
 8006b3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e7fe      	b.n	8006b4c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b4e:	f001 fe99 	bl	8008884 <vPortValidateInterruptPriority>
	__asm volatile
 8006b52:	f3ef 8211 	mrs	r2, BASEPRI
 8006b56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	61ba      	str	r2, [r7, #24]
 8006b68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02f      	beq.n	8006bda <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b88:	f000 f89d 	bl	8006cc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d112      	bne.n	8006bc4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d016      	beq.n	8006bd4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	3310      	adds	r3, #16
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fe04 	bl	80077b8 <xTaskRemoveFromEventList>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00e      	beq.n	8006bd4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e007      	b.n	8006bd4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc8:	3301      	adds	r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	b25a      	sxtb	r2, r3
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd8:	e001      	b.n	8006bde <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3738      	adds	r7, #56	; 0x38
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d14d      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f805 	bl	8007c2c <xTaskPriorityDisinherit>
 8006c22:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	e043      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6898      	ldr	r0, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	f002 fc87 	bl	8009550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	441a      	add	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d32b      	bcc.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	e026      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68d8      	ldr	r0, [r3, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	f002 fc6d 	bl	8009550 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	425b      	negs	r3, r3
 8006c80:	441a      	add	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d207      	bcs.n	8006ca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	425b      	negs	r3, r3
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d105      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d018      	beq.n	8006d0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d303      	bcc.n	8006cfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68d9      	ldr	r1, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	461a      	mov	r2, r3
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f002 fc23 	bl	8009550 <memcpy>
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d1a:	f001 fcd7 	bl	80086cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d26:	e011      	b.n	8006d4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3324      	adds	r3, #36	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fd3f 	bl	80077b8 <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d40:	f000 fe72 	bl	8007a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dce9      	bgt.n	8006d28 <prvUnlockQueue+0x16>
 8006d54:	e000      	b.n	8006d58 <prvUnlockQueue+0x46>
					break;
 8006d56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d60:	f001 fce2 	bl	8008728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d64:	f001 fcb2 	bl	80086cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d70:	e011      	b.n	8006d96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fd1a 	bl	80077b8 <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d8a:	f000 fe4d 	bl	8007a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dce9      	bgt.n	8006d72 <prvUnlockQueue+0x60>
 8006d9e:	e000      	b.n	8006da2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006da0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fcbd 	bl	8008728 <vPortExitCritical>
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dbe:	f001 fc85 	bl	80086cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e001      	b.n	8006dd4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dd4:	f001 fca8 	bl	8008728 <vPortExitCritical>

	return xReturn;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dea:	f001 fc6f 	bl	80086cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d102      	bne.n	8006e00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e001      	b.n	8006e04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fc90 	bl	8008728 <vPortExitCritical>

	return xReturn;
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e014      	b.n	8006e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e24:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <vQueueAddToRegistry+0x4c>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e30:	490b      	ldr	r1, [pc, #44]	; (8006e60 <vQueueAddToRegistry+0x4c>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <vQueueAddToRegistry+0x4c>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e46:	e005      	b.n	8006e54 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	d9e7      	bls.n	8006e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20001b18 	.word	0x20001b18

08006e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e74:	f001 fc2a 	bl	80086cc <vPortEnterCritical>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d103      	bne.n	8006e8e <vQueueWaitForMessageRestricted+0x2a>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d103      	bne.n	8006ea4 <vQueueWaitForMessageRestricted+0x40>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea4:	f001 fc40 	bl	8008728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3324      	adds	r3, #36	; 0x24
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fc53 	bl	8007764 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ebe:	6978      	ldr	r0, [r7, #20]
 8006ec0:	f7ff ff27 	bl	8006d12 <prvUnlockQueue>
	}
 8006ec4:	bf00      	nop
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <xTaskCreateStatic+0x28>
	__asm volatile
 8006ee0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	e7fe      	b.n	8006ef2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <xTaskCreateStatic+0x42>
 8006efa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e7fe      	b.n	8006f0c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f0e:	2354      	movs	r3, #84	; 0x54
 8006f10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b54      	cmp	r3, #84	; 0x54
 8006f16:	d009      	beq.n	8006f2c <xTaskCreateStatic+0x60>
 8006f18:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e7fe      	b.n	8006f2a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01e      	beq.n	8006f70 <xTaskCreateStatic+0xa4>
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01b      	beq.n	8006f70 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9302      	str	r3, [sp, #8]
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f850 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f6a:	f000 f8cb 	bl	8007104 <prvAddNewTaskToReadyList>
 8006f6e:	e001      	b.n	8006f74 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f74:	697b      	ldr	r3, [r7, #20]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b08c      	sub	sp, #48	; 0x30
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fcb4 	bl	8008900 <pvPortMalloc>
 8006f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006fa0:	2054      	movs	r0, #84	; 0x54
 8006fa2:	f001 fcad 	bl	8008900 <pvPortMalloc>
 8006fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fb4:	e005      	b.n	8006fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f001 fd64 	bl	8008a84 <vPortFree>
 8006fbc:	e001      	b.n	8006fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f80e 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fec:	69f8      	ldr	r0, [r7, #28]
 8006fee:	f000 f889 	bl	8007104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e002      	b.n	8006ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007020:	3b01      	subs	r3, #1
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <prvInitialiseNewTask+0x46>
 800703a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e7fe      	b.n	800704c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e012      	b.n	800707a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	7819      	ldrb	r1, [r3, #0]
 800705c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	3334      	adds	r3, #52	; 0x34
 8007064:	460a      	mov	r2, r1
 8007066:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d9e9      	bls.n	8007054 <prvInitialiseNewTask+0x4c>
 8007080:	e000      	b.n	8007084 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007082:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	2b06      	cmp	r3, #6
 8007090:	d901      	bls.n	8007096 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007092:	2306      	movs	r3, #6
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2200      	movs	r2, #0
 80070a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff f8ef 	bl	8006290 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f8ea 	bl	8006290 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	f1c3 0207 	rsb	r2, r3, #7
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	2200      	movs	r2, #0
 80070d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	69b8      	ldr	r0, [r7, #24]
 80070e6:	f001 f9cd 	bl	8008484 <pxPortInitialiseStack>
 80070ea:	4602      	mov	r2, r0
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070fc:	bf00      	nop
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800710c:	f001 fade 	bl	80086cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007110:	4b2a      	ldr	r3, [pc, #168]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a29      	ldr	r2, [pc, #164]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800711a:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007122:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007128:	4b24      	ldr	r3, [pc, #144]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d110      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007130:	f000 fc9e 	bl	8007a70 <prvInitialiseTaskLists>
 8007134:	e00d      	b.n	8007152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d802      	bhi.n	8007152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007152:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 800715a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <prvAddNewTaskToReadyList+0xc8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4313      	orrs	r3, r2
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <prvAddNewTaskToReadyList+0xc8>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <prvAddNewTaskToReadyList+0xcc>)
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7ff f890 	bl	80062aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800718a:	f001 facd 	bl	8008728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d207      	bcs.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvAddNewTaskToReadyList+0xd0>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2000093c 	.word	0x2000093c
 80071c0:	2000083c 	.word	0x2000083c
 80071c4:	20000948 	.word	0x20000948
 80071c8:	20000958 	.word	0x20000958
 80071cc:	20000944 	.word	0x20000944
 80071d0:	20000840 	.word	0x20000840
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <vTaskDelay+0x60>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <vTaskDelay+0x2e>
 80071f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	e7fe      	b.n	8007204 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007206:	f000 f87f 	bl	8007308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800720a:	2100      	movs	r1, #0
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fda9 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007212:	f000 f887 	bl	8007324 <xTaskResumeAll>
 8007216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d107      	bne.n	800722e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <vTaskDelay+0x64>)
 8007220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000964 	.word	0x20000964
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800724e:	463a      	mov	r2, r7
 8007250:	1d39      	adds	r1, r7, #4
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f7f9 f9a4 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	2300      	movs	r3, #0
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	460a      	mov	r2, r1
 800726e:	4920      	ldr	r1, [pc, #128]	; (80072f0 <vTaskStartScheduler+0xb0>)
 8007270:	4820      	ldr	r0, [pc, #128]	; (80072f4 <vTaskStartScheduler+0xb4>)
 8007272:	f7ff fe2b 	bl	8006ecc <xTaskCreateStatic>
 8007276:	4602      	mov	r2, r0
 8007278:	4b1f      	ldr	r3, [pc, #124]	; (80072f8 <vTaskStartScheduler+0xb8>)
 800727a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800727c:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <vTaskStartScheduler+0xb8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e001      	b.n	800728e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d102      	bne.n	800729a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007294:	f000 fdcc 	bl	8007e30 <xTimerCreateTimerTask>
 8007298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d115      	bne.n	80072cc <vTaskStartScheduler+0x8c>
 80072a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <vTaskStartScheduler+0xbc>)
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <vTaskStartScheduler+0xc0>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <vTaskStartScheduler+0xc4>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072c6:	f001 f963 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072ca:	e00d      	b.n	80072e8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d109      	bne.n	80072e8 <vTaskStartScheduler+0xa8>
 80072d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e7fe      	b.n	80072e6 <vTaskStartScheduler+0xa6>
}
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08009750 	.word	0x08009750
 80072f4:	08007a41 	.word	0x08007a41
 80072f8:	20000960 	.word	0x20000960
 80072fc:	2000095c 	.word	0x2000095c
 8007300:	20000948 	.word	0x20000948
 8007304:	20000940 	.word	0x20000940

08007308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <vTaskSuspendAll+0x18>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	4a03      	ldr	r2, [pc, #12]	; (8007320 <vTaskSuspendAll+0x18>)
 8007314:	6013      	str	r3, [r2, #0]
}
 8007316:	bf00      	nop
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000964 	.word	0x20000964

08007324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007332:	4b41      	ldr	r3, [pc, #260]	; (8007438 <xTaskResumeAll+0x114>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <xTaskResumeAll+0x2a>
 800733a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	e7fe      	b.n	800734c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800734e:	f001 f9bd 	bl	80086cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007352:	4b39      	ldr	r3, [pc, #228]	; (8007438 <xTaskResumeAll+0x114>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3b01      	subs	r3, #1
 8007358:	4a37      	ldr	r2, [pc, #220]	; (8007438 <xTaskResumeAll+0x114>)
 800735a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800735c:	4b36      	ldr	r3, [pc, #216]	; (8007438 <xTaskResumeAll+0x114>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d161      	bne.n	8007428 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007364:	4b35      	ldr	r3, [pc, #212]	; (800743c <xTaskResumeAll+0x118>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d05d      	beq.n	8007428 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800736c:	e02e      	b.n	80073cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800736e:	4b34      	ldr	r3, [pc, #208]	; (8007440 <xTaskResumeAll+0x11c>)
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3318      	adds	r3, #24
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fff2 	bl	8006364 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3304      	adds	r3, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe ffed 	bl	8006364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	2201      	movs	r2, #1
 8007390:	409a      	lsls	r2, r3
 8007392:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <xTaskResumeAll+0x120>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	4a2a      	ldr	r2, [pc, #168]	; (8007444 <xTaskResumeAll+0x120>)
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a27      	ldr	r2, [pc, #156]	; (8007448 <xTaskResumeAll+0x124>)
 80073aa:	441a      	add	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe ff79 	bl	80062aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	4b23      	ldr	r3, [pc, #140]	; (800744c <xTaskResumeAll+0x128>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80073c6:	4b22      	ldr	r3, [pc, #136]	; (8007450 <xTaskResumeAll+0x12c>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073cc:	4b1c      	ldr	r3, [pc, #112]	; (8007440 <xTaskResumeAll+0x11c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1cc      	bne.n	800736e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073da:	f000 fbe3 	bl	8007ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80073de:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <xTaskResumeAll+0x130>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d010      	beq.n	800740c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073ea:	f000 f847 	bl	800747c <xTaskIncrementTick>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80073f4:	4b16      	ldr	r3, [pc, #88]	; (8007450 <xTaskResumeAll+0x12c>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f1      	bne.n	80073ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <xTaskResumeAll+0x130>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <xTaskResumeAll+0x12c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <xTaskResumeAll+0x134>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007428:	f001 f97e 	bl	8008728 <vPortExitCritical>

	return xAlreadyYielded;
 800742c:	68bb      	ldr	r3, [r7, #8]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000964 	.word	0x20000964
 800743c:	2000093c 	.word	0x2000093c
 8007440:	200008fc 	.word	0x200008fc
 8007444:	20000944 	.word	0x20000944
 8007448:	20000840 	.word	0x20000840
 800744c:	2000083c 	.word	0x2000083c
 8007450:	20000950 	.word	0x20000950
 8007454:	2000094c 	.word	0x2000094c
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <xTaskGetTickCount+0x1c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007468:	687b      	ldr	r3, [r7, #4]
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000940 	.word	0x20000940

0800747c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007486:	4b50      	ldr	r3, [pc, #320]	; (80075c8 <xTaskIncrementTick+0x14c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 808c 	bne.w	80075a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007490:	4b4e      	ldr	r3, [pc, #312]	; (80075cc <xTaskIncrementTick+0x150>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007498:	4a4c      	ldr	r2, [pc, #304]	; (80075cc <xTaskIncrementTick+0x150>)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11f      	bne.n	80074e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80074a4:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <xTaskIncrementTick+0x154>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <xTaskIncrementTick+0x46>
 80074ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	e7fe      	b.n	80074c0 <xTaskIncrementTick+0x44>
 80074c2:	4b43      	ldr	r3, [pc, #268]	; (80075d0 <xTaskIncrementTick+0x154>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	4b42      	ldr	r3, [pc, #264]	; (80075d4 <xTaskIncrementTick+0x158>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a40      	ldr	r2, [pc, #256]	; (80075d0 <xTaskIncrementTick+0x154>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4a40      	ldr	r2, [pc, #256]	; (80075d4 <xTaskIncrementTick+0x158>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <xTaskIncrementTick+0x15c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a3e      	ldr	r2, [pc, #248]	; (80075d8 <xTaskIncrementTick+0x15c>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	f000 fb60 	bl	8007ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074e4:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <xTaskIncrementTick+0x160>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d34d      	bcc.n	800758a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ee:	4b38      	ldr	r3, [pc, #224]	; (80075d0 <xTaskIncrementTick+0x154>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <xTaskIncrementTick+0x80>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <xTaskIncrementTick+0x82>
 80074fc:	2300      	movs	r3, #0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007502:	4b36      	ldr	r3, [pc, #216]	; (80075dc <xTaskIncrementTick+0x160>)
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	601a      	str	r2, [r3, #0]
					break;
 800750a:	e03e      	b.n	800758a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800750c:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <xTaskIncrementTick+0x154>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d203      	bcs.n	800752c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007524:	4a2d      	ldr	r2, [pc, #180]	; (80075dc <xTaskIncrementTick+0x160>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6013      	str	r3, [r2, #0]
						break;
 800752a:	e02e      	b.n	800758a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe ff17 	bl	8006364 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	3318      	adds	r3, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe ff0e 	bl	8006364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	2201      	movs	r2, #1
 800754e:	409a      	lsls	r2, r3
 8007550:	4b23      	ldr	r3, [pc, #140]	; (80075e0 <xTaskIncrementTick+0x164>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4313      	orrs	r3, r2
 8007556:	4a22      	ldr	r2, [pc, #136]	; (80075e0 <xTaskIncrementTick+0x164>)
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <xTaskIncrementTick+0x168>)
 8007568:	441a      	add	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	3304      	adds	r3, #4
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f7fe fe9a 	bl	80062aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <xTaskIncrementTick+0x16c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d3b4      	bcc.n	80074ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007588:	e7b1      	b.n	80074ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800758a:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <xTaskIncrementTick+0x16c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	4914      	ldr	r1, [pc, #80]	; (80075e4 <xTaskIncrementTick+0x168>)
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d907      	bls.n	80075b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80075a2:	2301      	movs	r3, #1
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e004      	b.n	80075b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80075a8:	4b10      	ldr	r3, [pc, #64]	; (80075ec <xTaskIncrementTick+0x170>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	4a0f      	ldr	r2, [pc, #60]	; (80075ec <xTaskIncrementTick+0x170>)
 80075b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80075b2:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <xTaskIncrementTick+0x174>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80075be:	697b      	ldr	r3, [r7, #20]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000964 	.word	0x20000964
 80075cc:	20000940 	.word	0x20000940
 80075d0:	200008f4 	.word	0x200008f4
 80075d4:	200008f8 	.word	0x200008f8
 80075d8:	20000954 	.word	0x20000954
 80075dc:	2000095c 	.word	0x2000095c
 80075e0:	20000944 	.word	0x20000944
 80075e4:	20000840 	.word	0x20000840
 80075e8:	2000083c 	.word	0x2000083c
 80075ec:	2000094c 	.word	0x2000094c
 80075f0:	20000950 	.word	0x20000950

080075f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <vTaskSwitchContext+0xa0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007602:	4b25      	ldr	r3, [pc, #148]	; (8007698 <vTaskSwitchContext+0xa4>)
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007608:	e03e      	b.n	8007688 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800760a:	4b23      	ldr	r3, [pc, #140]	; (8007698 <vTaskSwitchContext+0xa4>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007610:	4b22      	ldr	r3, [pc, #136]	; (800769c <vTaskSwitchContext+0xa8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	fab3 f383 	clz	r3, r3
 800761c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	f1c3 031f 	rsb	r3, r3, #31
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	491e      	ldr	r1, [pc, #120]	; (80076a0 <vTaskSwitchContext+0xac>)
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <vTaskSwitchContext+0x5a>
	__asm volatile
 800763a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e7fe      	b.n	800764c <vTaskSwitchContext+0x58>
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4a11      	ldr	r2, [pc, #68]	; (80076a0 <vTaskSwitchContext+0xac>)
 800765a:	4413      	add	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	605a      	str	r2, [r3, #4]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	3308      	adds	r3, #8
 8007670:	429a      	cmp	r2, r3
 8007672:	d104      	bne.n	800767e <vTaskSwitchContext+0x8a>
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <vTaskSwitchContext+0xb0>)
 8007686:	6013      	str	r3, [r2, #0]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000964 	.word	0x20000964
 8007698:	20000950 	.word	0x20000950
 800769c:	20000944 	.word	0x20000944
 80076a0:	20000840 	.word	0x20000840
 80076a4:	2000083c 	.word	0x2000083c

080076a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <vTaskPlaceOnEventList+0x24>
 80076b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e7fe      	b.n	80076ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <vTaskPlaceOnEventList+0x44>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3318      	adds	r3, #24
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fe fe0c 	bl	80062f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076da:	2101      	movs	r1, #1
 80076dc:	6838      	ldr	r0, [r7, #0]
 80076de:	f000 fb41 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	2000083c 	.word	0x2000083c

080076f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <vTaskPlaceOnUnorderedEventList+0x26>
 8007702:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e7fe      	b.n	8007714 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007716:	4b11      	ldr	r3, [pc, #68]	; (800775c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <vTaskPlaceOnUnorderedEventList+0x42>
 800771e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	e7fe      	b.n	8007730 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800773c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800773e:	4b08      	ldr	r3, [pc, #32]	; (8007760 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3318      	adds	r3, #24
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7fe fdaf 	bl	80062aa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800774c:	2101      	movs	r1, #1
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb08 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
}
 8007754:	bf00      	nop
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000964 	.word	0x20000964
 8007760:	2000083c 	.word	0x2000083c

08007764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <vTaskPlaceOnEventListRestricted+0x26>
 8007776:	f04f 0330 	mov.w	r3, #48	; 0x30
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e7fe      	b.n	8007788 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3318      	adds	r3, #24
 8007790:	4619      	mov	r1, r3
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7fe fd89 	bl	80062aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	f000 fadc 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
	}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	2000083c 	.word	0x2000083c

080077b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <xTaskRemoveFromEventList+0x2a>
 80077ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e7fe      	b.n	80077e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	3318      	adds	r3, #24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fdbc 	bl	8006364 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ec:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <xTaskRemoveFromEventList+0xac>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11c      	bne.n	800782e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fdb3 	bl	8006364 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	2201      	movs	r2, #1
 8007804:	409a      	lsls	r2, r3
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <xTaskRemoveFromEventList+0xb0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4313      	orrs	r3, r2
 800780c:	4a16      	ldr	r2, [pc, #88]	; (8007868 <xTaskRemoveFromEventList+0xb0>)
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <xTaskRemoveFromEventList+0xb4>)
 800781e:	441a      	add	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7fe fd3f 	bl	80062aa <vListInsertEnd>
 800782c:	e005      	b.n	800783a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	3318      	adds	r3, #24
 8007832:	4619      	mov	r1, r3
 8007834:	480e      	ldr	r0, [pc, #56]	; (8007870 <xTaskRemoveFromEventList+0xb8>)
 8007836:	f7fe fd38 	bl	80062aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <xTaskRemoveFromEventList+0xbc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	429a      	cmp	r2, r3
 8007846:	d905      	bls.n	8007854 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <xTaskRemoveFromEventList+0xc0>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e001      	b.n	8007858 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007858:	697b      	ldr	r3, [r7, #20]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000964 	.word	0x20000964
 8007868:	20000944 	.word	0x20000944
 800786c:	20000840 	.word	0x20000840
 8007870:	200008fc 	.word	0x200008fc
 8007874:	2000083c 	.word	0x2000083c
 8007878:	20000950 	.word	0x20000950

0800787c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007886:	4b28      	ldr	r3, [pc, #160]	; (8007928 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <vTaskRemoveFromUnorderedEventList+0x26>
 800788e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	e7fe      	b.n	80078a0 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <vTaskRemoveFromUnorderedEventList+0x50>
 80078b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	e7fe      	b.n	80078ca <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fe fd49 	bl	8006364 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fd44 	bl	8006364 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	2201      	movs	r2, #1
 80078e2:	409a      	lsls	r2, r3
 80078e4:	4b11      	ldr	r3, [pc, #68]	; (800792c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	4a10      	ldr	r2, [pc, #64]	; (800792c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80078fc:	441a      	add	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f7fe fcd0 	bl	80062aa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	429a      	cmp	r2, r3
 8007916:	d902      	bls.n	800791e <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007918:	4b07      	ldr	r3, [pc, #28]	; (8007938 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
	}
}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000964 	.word	0x20000964
 800792c:	20000944 	.word	0x20000944
 8007930:	20000840 	.word	0x20000840
 8007934:	2000083c 	.word	0x2000083c
 8007938:	20000950 	.word	0x20000950

0800793c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <vTaskInternalSetTimeOutState+0x24>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <vTaskInternalSetTimeOutState+0x28>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000954 	.word	0x20000954
 8007964:	20000940 	.word	0x20000940

08007968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d109      	bne.n	800798c <xTaskCheckForTimeOut+0x24>
 8007978:	f04f 0330 	mov.w	r3, #48	; 0x30
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e7fe      	b.n	800798a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <xTaskCheckForTimeOut+0x3e>
 8007992:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e7fe      	b.n	80079a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079a6:	f000 fe91 	bl	80086cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079aa:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <xTaskCheckForTimeOut+0xb8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d102      	bne.n	80079ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	e023      	b.n	8007a12 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <xTaskCheckForTimeOut+0xbc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d007      	beq.n	80079e6 <xTaskCheckForTimeOut+0x7e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d302      	bcc.n	80079e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e015      	b.n	8007a12 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d20b      	bcs.n	8007a08 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff9d 	bl	800793c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	e004      	b.n	8007a12 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a12:	f000 fe89 	bl	8008728 <vPortExitCritical>

	return xReturn;
 8007a16:	69fb      	ldr	r3, [r7, #28]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000940 	.word	0x20000940
 8007a24:	20000954 	.word	0x20000954

08007a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <vTaskMissedYield+0x14>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
}
 8007a32:	bf00      	nop
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000950 	.word	0x20000950

08007a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a48:	f000 f852 	bl	8007af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <prvIdleTask+0x28>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d9f9      	bls.n	8007a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <prvIdleTask+0x2c>)
 8007a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a64:	e7f0      	b.n	8007a48 <prvIdleTask+0x8>
 8007a66:	bf00      	nop
 8007a68:	20000840 	.word	0x20000840
 8007a6c:	e000ed04 	.word	0xe000ed04

08007a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
 8007a7a:	e00c      	b.n	8007a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4a12      	ldr	r2, [pc, #72]	; (8007ad0 <prvInitialiseTaskLists+0x60>)
 8007a88:	4413      	add	r3, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fbe0 	bl	8006250 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3301      	adds	r3, #1
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b06      	cmp	r3, #6
 8007a9a:	d9ef      	bls.n	8007a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a9c:	480d      	ldr	r0, [pc, #52]	; (8007ad4 <prvInitialiseTaskLists+0x64>)
 8007a9e:	f7fe fbd7 	bl	8006250 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aa2:	480d      	ldr	r0, [pc, #52]	; (8007ad8 <prvInitialiseTaskLists+0x68>)
 8007aa4:	f7fe fbd4 	bl	8006250 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007aa8:	480c      	ldr	r0, [pc, #48]	; (8007adc <prvInitialiseTaskLists+0x6c>)
 8007aaa:	f7fe fbd1 	bl	8006250 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aae:	480c      	ldr	r0, [pc, #48]	; (8007ae0 <prvInitialiseTaskLists+0x70>)
 8007ab0:	f7fe fbce 	bl	8006250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ab4:	480b      	ldr	r0, [pc, #44]	; (8007ae4 <prvInitialiseTaskLists+0x74>)
 8007ab6:	f7fe fbcb 	bl	8006250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <prvInitialiseTaskLists+0x78>)
 8007abc:	4a05      	ldr	r2, [pc, #20]	; (8007ad4 <prvInitialiseTaskLists+0x64>)
 8007abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <prvInitialiseTaskLists+0x7c>)
 8007ac2:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <prvInitialiseTaskLists+0x68>)
 8007ac4:	601a      	str	r2, [r3, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000840 	.word	0x20000840
 8007ad4:	200008cc 	.word	0x200008cc
 8007ad8:	200008e0 	.word	0x200008e0
 8007adc:	200008fc 	.word	0x200008fc
 8007ae0:	20000910 	.word	0x20000910
 8007ae4:	20000928 	.word	0x20000928
 8007ae8:	200008f4 	.word	0x200008f4
 8007aec:	200008f8 	.word	0x200008f8

08007af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007af6:	e019      	b.n	8007b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007af8:	f000 fde8 	bl	80086cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007afc:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <prvCheckTasksWaitingTermination+0x4c>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fe fc2b 	bl	8006364 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <prvCheckTasksWaitingTermination+0x50>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <prvCheckTasksWaitingTermination+0x50>)
 8007b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <prvCheckTasksWaitingTermination+0x54>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <prvCheckTasksWaitingTermination+0x54>)
 8007b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b22:	f000 fe01 	bl	8008728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f80e 	bl	8007b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <prvCheckTasksWaitingTermination+0x54>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e1      	bne.n	8007af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000910 	.word	0x20000910
 8007b40:	2000093c 	.word	0x2000093c
 8007b44:	20000924 	.word	0x20000924

08007b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 ff90 	bl	8008a84 <vPortFree>
				vPortFree( pxTCB );
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 ff8d 	bl	8008a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b6a:	e017      	b.n	8007b9c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d103      	bne.n	8007b7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ff84 	bl	8008a84 <vPortFree>
	}
 8007b7c:	e00e      	b.n	8007b9c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d009      	beq.n	8007b9c <prvDeleteTCB+0x54>
 8007b88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	e7fe      	b.n	8007b9a <prvDeleteTCB+0x52>
	}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <prvResetNextTaskUnblockTime+0x44>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <prvResetNextTaskUnblockTime+0x14>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <prvResetNextTaskUnblockTime+0x16>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <prvResetNextTaskUnblockTime+0x48>)
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bc6:	e008      	b.n	8007bda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <prvResetNextTaskUnblockTime+0x44>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4a05      	ldr	r2, [pc, #20]	; (8007bec <prvResetNextTaskUnblockTime+0x48>)
 8007bd8:	6013      	str	r3, [r2, #0]
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	200008f4 	.word	0x200008f4
 8007bec:	2000095c 	.word	0x2000095c

08007bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <xTaskGetSchedulerState+0x34>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	e008      	b.n	8007c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c04:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <xTaskGetSchedulerState+0x38>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	607b      	str	r3, [r7, #4]
 8007c10:	e001      	b.n	8007c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c16:	687b      	ldr	r3, [r7, #4]
	}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	20000948 	.word	0x20000948
 8007c28:	20000964 	.word	0x20000964

08007c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d06c      	beq.n	8007d1c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c42:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <xTaskPriorityDisinherit+0xfc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d009      	beq.n	8007c60 <xTaskPriorityDisinherit+0x34>
 8007c4c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e7fe      	b.n	8007c5e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <xTaskPriorityDisinherit+0x50>
 8007c68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	e7fe      	b.n	8007c7a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c80:	1e5a      	subs	r2, r3, #1
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d044      	beq.n	8007d1c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d140      	bne.n	8007d1c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fb60 	bl	8006364 <uxListRemove>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d115      	bne.n	8007cd6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	491f      	ldr	r1, [pc, #124]	; (8007d2c <xTaskPriorityDisinherit+0x100>)
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTaskPriorityDisinherit+0xaa>
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	43da      	mvns	r2, r3
 8007ccc:	4b18      	ldr	r3, [pc, #96]	; (8007d30 <xTaskPriorityDisinherit+0x104>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	4a17      	ldr	r2, [pc, #92]	; (8007d30 <xTaskPriorityDisinherit+0x104>)
 8007cd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	f1c3 0207 	rsb	r2, r3, #7
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	2201      	movs	r2, #1
 8007cf0:	409a      	lsls	r2, r3
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <xTaskPriorityDisinherit+0x104>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	4a0d      	ldr	r2, [pc, #52]	; (8007d30 <xTaskPriorityDisinherit+0x104>)
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <xTaskPriorityDisinherit+0x100>)
 8007d0a:	441a      	add	r2, r3
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f7fe fac9 	bl	80062aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d1c:	697b      	ldr	r3, [r7, #20]
	}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	2000083c 	.word	0x2000083c
 8007d2c:	20000840 	.word	0x20000840
 8007d30:	20000944 	.word	0x20000944

08007d34 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <uxTaskResetEventItemValue+0x2c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <uxTaskResetEventItemValue+0x2c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <uxTaskResetEventItemValue+0x2c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f1c2 0207 	rsb	r2, r2, #7
 8007d50:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007d52:	687b      	ldr	r3, [r7, #4]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	2000083c 	.word	0x2000083c

08007d64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d6e:	4b29      	ldr	r3, [pc, #164]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d74:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe faf2 	bl	8006364 <uxListRemove>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43da      	mvns	r2, r3
 8007d94:	4b21      	ldr	r3, [pc, #132]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d10a      	bne.n	8007dbc <prvAddCurrentTaskToDelayedList+0x58>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d007      	beq.n	8007dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	481a      	ldr	r0, [pc, #104]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007db6:	f7fe fa78 	bl	80062aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dba:	e026      	b.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc4:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d209      	bcs.n	8007de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f7fe fa86 	bl	80062f2 <vListInsert>
}
 8007de6:	e010      	b.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de8:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fe fa7c 	bl	80062f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d202      	bcs.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e04:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6013      	str	r3, [r2, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000940 	.word	0x20000940
 8007e18:	2000083c 	.word	0x2000083c
 8007e1c:	20000944 	.word	0x20000944
 8007e20:	20000928 	.word	0x20000928
 8007e24:	200008f8 	.word	0x200008f8
 8007e28:	200008f4 	.word	0x200008f4
 8007e2c:	2000095c 	.word	0x2000095c

08007e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e3a:	f000 fac3 	bl	80083c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e3e:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <xTimerCreateTimerTask+0x80>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d021      	beq.n	8007e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e4e:	1d3a      	adds	r2, r7, #4
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7f8 fbbd 	bl	80005d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	9202      	str	r2, [sp, #8]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	460a      	mov	r2, r1
 8007e70:	4910      	ldr	r1, [pc, #64]	; (8007eb4 <xTimerCreateTimerTask+0x84>)
 8007e72:	4811      	ldr	r0, [pc, #68]	; (8007eb8 <xTimerCreateTimerTask+0x88>)
 8007e74:	f7ff f82a 	bl	8006ecc <xTaskCreateStatic>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <xTimerCreateTimerTask+0x8c>)
 8007e7c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e7e:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <xTimerCreateTimerTask+0x8c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e86:	2301      	movs	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <xTimerCreateTimerTask+0x74>
 8007e90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e7fe      	b.n	8007ea2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007ea4:	697b      	ldr	r3, [r7, #20]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000998 	.word	0x20000998
 8007eb4:	08009758 	.word	0x08009758
 8007eb8:	08007fd9 	.word	0x08007fd9
 8007ebc:	2000099c 	.word	0x2000099c

08007ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <xTimerGenericCommand+0x2c>
 8007ed8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	e7fe      	b.n	8007eea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007eec:	4b19      	ldr	r3, [pc, #100]	; (8007f54 <xTimerGenericCommand+0x94>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d02a      	beq.n	8007f4a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	dc18      	bgt.n	8007f38 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f06:	f7ff fe73 	bl	8007bf0 <xTaskGetSchedulerState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d109      	bne.n	8007f24 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f10:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <xTimerGenericCommand+0x94>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	f107 0110 	add.w	r1, r7, #16
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1c:	f7fe fb82 	bl	8006624 <xQueueGenericSend>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24
 8007f22:	e012      	b.n	8007f4a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f24:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <xTimerGenericCommand+0x94>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	f107 0110 	add.w	r1, r7, #16
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f7fe fb78 	bl	8006624 <xQueueGenericSend>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24
 8007f36:	e008      	b.n	8007f4a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <xTimerGenericCommand+0x94>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	f107 0110 	add.w	r1, r7, #16
 8007f40:	2300      	movs	r3, #0
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	f7fe fc68 	bl	8006818 <xQueueGenericSendFromISR>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	; 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000998 	.word	0x20000998

08007f58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvProcessExpiredTimer+0x7c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f9f7 	bl	8006364 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d121      	bne.n	8007fc2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	18d1      	adds	r1, r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	6978      	ldr	r0, [r7, #20]
 8007f8c:	f000 f8c8 	bl	8008120 <prvInsertTimerInActiveList>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d015      	beq.n	8007fc2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f96:	2300      	movs	r3, #0
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6978      	ldr	r0, [r7, #20]
 8007fa2:	f7ff ff8d 	bl	8007ec0 <xTimerGenericCommand>
 8007fa6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <prvProcessExpiredTimer+0x6a>
 8007fae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e7fe      	b.n	8007fc0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	6978      	ldr	r0, [r7, #20]
 8007fc8:	4798      	blx	r3
}
 8007fca:	bf00      	nop
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000990 	.word	0x20000990

08007fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f857 	bl	8008098 <prvGetNextExpireTime>
 8007fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f803 	bl	8007ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ff6:	f000 f8d5 	bl	80081a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ffa:	e7f1      	b.n	8007fe0 <prvTimerTask+0x8>

08007ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008006:	f7ff f97f 	bl	8007308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f866 	bl	80080e0 <prvSampleTimeNow>
 8008014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d130      	bne.n	800807e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	429a      	cmp	r2, r3
 8008028:	d806      	bhi.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800802a:	f7ff f97b 	bl	8007324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ff91 	bl	8007f58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008036:	e024      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <prvProcessTimerOrBlockTask+0x90>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	bf0c      	ite	eq
 8008048:	2301      	moveq	r3, #1
 800804a:	2300      	movne	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <prvProcessTimerOrBlockTask+0x94>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4619      	mov	r1, r3
 800805e:	f7fe ff01 	bl	8006e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008062:	f7ff f95f 	bl	8007324 <xTaskResumeAll>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <prvProcessTimerOrBlockTask+0x98>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
}
 800807c:	e001      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800807e:	f7ff f951 	bl	8007324 <xTaskResumeAll>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000994 	.word	0x20000994
 8008090:	20000998 	.word	0x20000998
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <prvGetNextExpireTime+0x44>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <prvGetNextExpireTime+0x44>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e001      	b.n	80080ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080ce:	68fb      	ldr	r3, [r7, #12]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20000990 	.word	0x20000990

080080e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080e8:	f7ff f9b8 	bl	800745c <xTaskGetTickCount>
 80080ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <prvSampleTimeNow+0x3c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d205      	bcs.n	8008104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080f8:	f000 f904 	bl	8008304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e002      	b.n	800810a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800810a:	4a04      	ldr	r2, [pc, #16]	; (800811c <prvSampleTimeNow+0x3c>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	200009a0 	.word	0x200009a0

08008120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d812      	bhi.n	800816c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e01b      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <prvInsertTimerInActiveList+0x7c>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fe f8c4 	bl	80062f2 <vListInsert>
 800816a:	e012      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d206      	bcs.n	8008182 <prvInsertTimerInActiveList+0x62>
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d302      	bcc.n	8008182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e007      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <prvInsertTimerInActiveList+0x80>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7fe f8b0 	bl	80062f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008192:	697b      	ldr	r3, [r7, #20]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000994 	.word	0x20000994
 80081a0:	20000990 	.word	0x20000990

080081a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	; 0x38
 80081a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081aa:	e099      	b.n	80082e0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da17      	bge.n	80081e2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081b2:	1d3b      	adds	r3, r7, #4
 80081b4:	3304      	adds	r3, #4
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <prvProcessReceivedCommands+0x2e>
 80081be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e7fe      	b.n	80081d0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d8:	6850      	ldr	r0, [r2, #4]
 80081da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081dc:	6892      	ldr	r2, [r2, #8]
 80081de:	4611      	mov	r1, r2
 80081e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	db7a      	blt.n	80082de <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe f8b3 	bl	8006364 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081fe:	463b      	mov	r3, r7
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff6d 	bl	80080e0 <prvSampleTimeNow>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b09      	cmp	r3, #9
 800820c:	d868      	bhi.n	80082e0 <prvProcessReceivedCommands+0x13c>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <prvProcessReceivedCommands+0x70>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	0800823d 	.word	0x0800823d
 8008218:	0800823d 	.word	0x0800823d
 800821c:	0800823d 	.word	0x0800823d
 8008220:	080082e1 	.word	0x080082e1
 8008224:	08008297 	.word	0x08008297
 8008228:	080082cd 	.word	0x080082cd
 800822c:	0800823d 	.word	0x0800823d
 8008230:	0800823d 	.word	0x0800823d
 8008234:	080082e1 	.word	0x080082e1
 8008238:	08008297 	.word	0x08008297
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	18d1      	adds	r1, r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800824a:	f7ff ff69 	bl	8008120 <prvInsertTimerInActiveList>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d045      	beq.n	80082e0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d13d      	bne.n	80082e0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	441a      	add	r2, r3
 800826c:	2300      	movs	r3, #0
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	2300      	movs	r3, #0
 8008272:	2100      	movs	r1, #0
 8008274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008276:	f7ff fe23 	bl	8007ec0 <xTimerGenericCommand>
 800827a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d12e      	bne.n	80082e0 <prvProcessReceivedCommands+0x13c>
 8008282:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	e7fe      	b.n	8008294 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <prvProcessReceivedCommands+0x114>
 80082a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	e7fe      	b.n	80082b6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	699a      	ldr	r2, [r3, #24]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	18d1      	adds	r1, r2, r3
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c6:	f7ff ff2b 	bl	8008120 <prvInsertTimerInActiveList>
					break;
 80082ca:	e009      	b.n	80082e0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80082d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d8:	f000 fbd4 	bl	8008a84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082dc:	e000      	b.n	80082e0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <prvProcessReceivedCommands+0x15c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	1d39      	adds	r1, r7, #4
 80082e6:	2200      	movs	r2, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fb29 	bl	8006940 <xQueueReceive>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f47f af5b 	bne.w	80081ac <prvProcessReceivedCommands+0x8>
	}
}
 80082f6:	bf00      	nop
 80082f8:	3730      	adds	r7, #48	; 0x30
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000998 	.word	0x20000998

08008304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800830a:	e044      	b.n	8008396 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <prvSwitchTimerLists+0xb8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008316:	4b29      	ldr	r3, [pc, #164]	; (80083bc <prvSwitchTimerLists+0xb8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3304      	adds	r3, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe f81d 	bl	8006364 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d12d      	bne.n	8008396 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4413      	add	r3, r2
 8008342:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	429a      	cmp	r2, r3
 800834a:	d90e      	bls.n	800836a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008358:	4b18      	ldr	r3, [pc, #96]	; (80083bc <prvSwitchTimerLists+0xb8>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f7fd ffc5 	bl	80062f2 <vListInsert>
 8008368:	e015      	b.n	8008396 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800836a:	2300      	movs	r3, #0
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	2100      	movs	r1, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fda3 	bl	8007ec0 <xTimerGenericCommand>
 800837a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <prvSwitchTimerLists+0x92>
 8008382:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	e7fe      	b.n	8008394 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008396:	4b09      	ldr	r3, [pc, #36]	; (80083bc <prvSwitchTimerLists+0xb8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1b5      	bne.n	800830c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvSwitchTimerLists+0xb8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083a6:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <prvSwitchTimerLists+0xbc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a04      	ldr	r2, [pc, #16]	; (80083bc <prvSwitchTimerLists+0xb8>)
 80083ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083ae:	4a04      	ldr	r2, [pc, #16]	; (80083c0 <prvSwitchTimerLists+0xbc>)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	6013      	str	r3, [r2, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000990 	.word	0x20000990
 80083c0:	20000994 	.word	0x20000994

080083c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ca:	f000 f97f 	bl	80086cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <prvCheckForValidListAndQueue+0x60>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d120      	bne.n	8008418 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083d6:	4814      	ldr	r0, [pc, #80]	; (8008428 <prvCheckForValidListAndQueue+0x64>)
 80083d8:	f7fd ff3a 	bl	8006250 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083dc:	4813      	ldr	r0, [pc, #76]	; (800842c <prvCheckForValidListAndQueue+0x68>)
 80083de:	f7fd ff37 	bl	8006250 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083e2:	4b13      	ldr	r3, [pc, #76]	; (8008430 <prvCheckForValidListAndQueue+0x6c>)
 80083e4:	4a10      	ldr	r2, [pc, #64]	; (8008428 <prvCheckForValidListAndQueue+0x64>)
 80083e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083e8:	4b12      	ldr	r3, [pc, #72]	; (8008434 <prvCheckForValidListAndQueue+0x70>)
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <prvCheckForValidListAndQueue+0x68>)
 80083ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ee:	2300      	movs	r3, #0
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <prvCheckForValidListAndQueue+0x74>)
 80083f4:	4a11      	ldr	r2, [pc, #68]	; (800843c <prvCheckForValidListAndQueue+0x78>)
 80083f6:	2110      	movs	r1, #16
 80083f8:	200a      	movs	r0, #10
 80083fa:	f7fe f845 	bl	8006488 <xQueueGenericCreateStatic>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b08      	ldr	r3, [pc, #32]	; (8008424 <prvCheckForValidListAndQueue+0x60>)
 8008402:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008404:	4b07      	ldr	r3, [pc, #28]	; (8008424 <prvCheckForValidListAndQueue+0x60>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <prvCheckForValidListAndQueue+0x60>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	490b      	ldr	r1, [pc, #44]	; (8008440 <prvCheckForValidListAndQueue+0x7c>)
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fcfe 	bl	8006e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008418:	f000 f986 	bl	8008728 <vPortExitCritical>
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000998 	.word	0x20000998
 8008428:	20000968 	.word	0x20000968
 800842c:	2000097c 	.word	0x2000097c
 8008430:	20000990 	.word	0x20000990
 8008434:	20000994 	.word	0x20000994
 8008438:	20000a44 	.word	0x20000a44
 800843c:	200009a4 	.word	0x200009a4
 8008440:	08009760 	.word	0x08009760

08008444 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008452:	f06f 0301 	mvn.w	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <xTimerPendFunctionCallFromISR+0x3c>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	f107 0114 	add.w	r1, r7, #20
 800846c:	2300      	movs	r3, #0
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	f7fe f9d2 	bl	8006818 <xQueueGenericSendFromISR>
 8008474:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	; 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000998 	.word	0x20000998

08008484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b04      	subs	r3, #4
 8008494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800849c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3b04      	subs	r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f023 0201 	bic.w	r2, r3, #1
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b4:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <pxPortInitialiseStack+0x64>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b14      	subs	r3, #20
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f06f 0202 	mvn.w	r2, #2
 80084d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b20      	subs	r3, #32
 80084d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084da:	68fb      	ldr	r3, [r7, #12]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	080084ed 	.word	0x080084ed

080084ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <prvTaskExitError+0x50>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d009      	beq.n	8008514 <prvTaskExitError+0x28>
 8008500:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e7fe      	b.n	8008512 <prvTaskExitError+0x26>
 8008514:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008526:	bf00      	nop
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0fc      	beq.n	8008528 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	200000e8 	.word	0x200000e8

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b44      	ldr	r3, [pc, #272]	; (80086a8 <xPortStartScheduler+0x118>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a44      	ldr	r2, [pc, #272]	; (80086ac <xPortStartScheduler+0x11c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d109      	bne.n	80085b4 <xPortStartScheduler+0x24>
 80085a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	e7fe      	b.n	80085b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b4:	4b3c      	ldr	r3, [pc, #240]	; (80086a8 <xPortStartScheduler+0x118>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3d      	ldr	r2, [pc, #244]	; (80086b0 <xPortStartScheduler+0x120>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d109      	bne.n	80085d2 <xPortStartScheduler+0x42>
 80085be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e7fe      	b.n	80085d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d2:	4b38      	ldr	r3, [pc, #224]	; (80086b4 <xPortStartScheduler+0x124>)
 80085d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	22ff      	movs	r2, #255	; 0xff
 80085e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <xPortStartScheduler+0x128>)
 80085f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fa:	4b30      	ldr	r3, [pc, #192]	; (80086bc <xPortStartScheduler+0x12c>)
 80085fc:	2207      	movs	r2, #7
 80085fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008600:	e009      	b.n	8008616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008602:	4b2e      	ldr	r3, [pc, #184]	; (80086bc <xPortStartScheduler+0x12c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	4a2c      	ldr	r2, [pc, #176]	; (80086bc <xPortStartScheduler+0x12c>)
 800860a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b80      	cmp	r3, #128	; 0x80
 8008620:	d0ef      	beq.n	8008602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <xPortStartScheduler+0x12c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1c3 0307 	rsb	r3, r3, #7
 800862a:	2b04      	cmp	r3, #4
 800862c:	d009      	beq.n	8008642 <xPortStartScheduler+0xb2>
 800862e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	e7fe      	b.n	8008640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008642:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <xPortStartScheduler+0x12c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <xPortStartScheduler+0x12c>)
 800864a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800864c:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <xPortStartScheduler+0x12c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008654:	4a19      	ldr	r2, [pc, #100]	; (80086bc <xPortStartScheduler+0x12c>)
 8008656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008660:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <xPortStartScheduler+0x130>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <xPortStartScheduler+0x130>)
 8008666:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800866a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <xPortStartScheduler+0x130>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <xPortStartScheduler+0x130>)
 8008672:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8008676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008678:	f000 f8d6 	bl	8008828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <xPortStartScheduler+0x134>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008682:	f000 f8f5 	bl	8008870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a0f      	ldr	r2, [pc, #60]	; (80086c8 <xPortStartScheduler+0x138>)
 800868c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008692:	f7ff ff69 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008696:	f7fe ffad 	bl	80075f4 <vTaskSwitchContext>
	prvTaskExitError();
 800869a:	f7ff ff27 	bl	80084ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	410fc271 	.word	0x410fc271
 80086b0:	410fc270 	.word	0x410fc270
 80086b4:	e000e400 	.word	0xe000e400
 80086b8:	20000a8c 	.word	0x20000a8c
 80086bc:	20000a90 	.word	0x20000a90
 80086c0:	e000ed20 	.word	0xe000ed20
 80086c4:	200000e8 	.word	0x200000e8
 80086c8:	e000ef34 	.word	0xe000ef34

080086cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <vPortEnterCritical+0x54>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <vPortEnterCritical+0x54>)
 80086ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <vPortEnterCritical+0x54>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d10e      	bne.n	8008714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <vPortEnterCritical+0x58>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <vPortEnterCritical+0x48>
 8008700:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	e7fe      	b.n	8008712 <vPortEnterCritical+0x46>
	}
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	200000e8 	.word	0x200000e8
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <vPortExitCritical+0x4c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <vPortExitCritical+0x22>
 8008736:	f04f 0330 	mov.w	r3, #48	; 0x30
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e7fe      	b.n	8008748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <vPortExitCritical+0x4c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3b01      	subs	r3, #1
 8008750:	4a08      	ldr	r2, [pc, #32]	; (8008774 <vPortExitCritical+0x4c>)
 8008752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008754:	4b07      	ldr	r3, [pc, #28]	; (8008774 <vPortExitCritical+0x4c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <vPortExitCritical+0x3e>
 800875c:	2300      	movs	r3, #0
 800875e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	200000e8 	.word	0x200000e8
	...

08008780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008780:	f3ef 8009 	mrs	r0, PSP
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <pxCurrentTCBConst>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	f01e 0f10 	tst.w	lr, #16
 8008790:	bf08      	it	eq
 8008792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087a0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80087a4:	f380 8811 	msr	BASEPRI, r0
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f7fe ff20 	bl	80075f4 <vTaskSwitchContext>
 80087b4:	f04f 0000 	mov.w	r0, #0
 80087b8:	f380 8811 	msr	BASEPRI, r0
 80087bc:	bc09      	pop	{r0, r3}
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	6808      	ldr	r0, [r1, #0]
 80087c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c6:	f01e 0f10 	tst.w	lr, #16
 80087ca:	bf08      	it	eq
 80087cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087d0:	f380 8809 	msr	PSP, r0
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w

080087e0 <pxCurrentTCBConst>:
 80087e0:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	__asm volatile
 80087ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008800:	f7fe fe3c 	bl	800747c <xTaskIncrementTick>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800880a:	4b06      	ldr	r3, [pc, #24]	; (8008824 <SysTick_Handler+0x3c>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	2300      	movs	r3, #0
 8008814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <vPortSetupTimerInterrupt+0x34>)
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <vPortSetupTimerInterrupt+0x38>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <vPortSetupTimerInterrupt+0x3c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <vPortSetupTimerInterrupt+0x40>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	099b      	lsrs	r3, r3, #6
 8008844:	4a09      	ldr	r2, [pc, #36]	; (800886c <vPortSetupTimerInterrupt+0x44>)
 8008846:	3b01      	subs	r3, #1
 8008848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800884a:	4b04      	ldr	r3, [pc, #16]	; (800885c <vPortSetupTimerInterrupt+0x34>)
 800884c:	2207      	movs	r2, #7
 800884e:	601a      	str	r2, [r3, #0]
}
 8008850:	bf00      	nop
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e010 	.word	0xe000e010
 8008860:	e000e018 	.word	0xe000e018
 8008864:	200000dc 	.word	0x200000dc
 8008868:	10624dd3 	.word	0x10624dd3
 800886c:	e000e014 	.word	0xe000e014

08008870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008880 <vPortEnableVFP+0x10>
 8008874:	6801      	ldr	r1, [r0, #0]
 8008876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800887a:	6001      	str	r1, [r0, #0]
 800887c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800887e:	bf00      	nop
 8008880:	e000ed88 	.word	0xe000ed88

08008884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800888a:	f3ef 8305 	mrs	r3, IPSR
 800888e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b0f      	cmp	r3, #15
 8008894:	d913      	bls.n	80088be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008896:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <vPortValidateInterruptPriority+0x6c>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <vPortValidateInterruptPriority+0x70>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	7afa      	ldrb	r2, [r7, #11]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d209      	bcs.n	80088be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80088aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	e7fe      	b.n	80088bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <vPortValidateInterruptPriority+0x74>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <vPortValidateInterruptPriority+0x78>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d909      	bls.n	80088e2 <vPortValidateInterruptPriority+0x5e>
 80088ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	e7fe      	b.n	80088e0 <vPortValidateInterruptPriority+0x5c>
	}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e3f0 	.word	0xe000e3f0
 80088f4:	20000a8c 	.word	0x20000a8c
 80088f8:	e000ed0c 	.word	0xe000ed0c
 80088fc:	20000a90 	.word	0x20000a90

08008900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800890c:	f7fe fcfc 	bl	8007308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008910:	4b57      	ldr	r3, [pc, #348]	; (8008a70 <pvPortMalloc+0x170>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008918:	f000 f90c 	bl	8008b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800891c:	4b55      	ldr	r3, [pc, #340]	; (8008a74 <pvPortMalloc+0x174>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 808c 	bne.w	8008a42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01c      	beq.n	800896a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008930:	2208      	movs	r2, #8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b00      	cmp	r3, #0
 8008940:	d013      	beq.n	800896a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <pvPortMalloc+0x6a>
 8008956:	f04f 0330 	mov.w	r3, #48	; 0x30
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e7fe      	b.n	8008968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d068      	beq.n	8008a42 <pvPortMalloc+0x142>
 8008970:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <pvPortMalloc+0x178>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d863      	bhi.n	8008a42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <pvPortMalloc+0x17c>)
 800897c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <pvPortMalloc+0x17c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008984:	e004      	b.n	8008990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d903      	bls.n	80089a2 <pvPortMalloc+0xa2>
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f1      	bne.n	8008986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089a2:	4b33      	ldr	r3, [pc, #204]	; (8008a70 <pvPortMalloc+0x170>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d04a      	beq.n	8008a42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2208      	movs	r2, #8
 80089b2:	4413      	add	r3, r2
 80089b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	2308      	movs	r3, #8
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d91e      	bls.n	8008a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4413      	add	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <pvPortMalloc+0xf4>
 80089e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e7fe      	b.n	80089f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a06:	69b8      	ldr	r0, [r7, #24]
 8008a08:	f000 f8f6 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <pvPortMalloc+0x178>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <pvPortMalloc+0x178>)
 8008a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <pvPortMalloc+0x178>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <pvPortMalloc+0x180>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d203      	bcs.n	8008a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <pvPortMalloc+0x178>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <pvPortMalloc+0x180>)
 8008a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <pvPortMalloc+0x174>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a42:	f7fe fc6f 	bl	8007324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <pvPortMalloc+0x164>
 8008a50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e7fe      	b.n	8008a62 <pvPortMalloc+0x162>
	return pvReturn;
 8008a64:	69fb      	ldr	r3, [r7, #28]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3728      	adds	r7, #40	; 0x28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	2000169c 	.word	0x2000169c
 8008a74:	200016a8 	.word	0x200016a8
 8008a78:	200016a0 	.word	0x200016a0
 8008a7c:	20001694 	.word	0x20001694
 8008a80:	200016a4 	.word	0x200016a4

08008a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d046      	beq.n	8008b24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a96:	2308      	movs	r3, #8
 8008a98:	425b      	negs	r3, r3
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <vPortFree+0xa8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <vPortFree+0x42>
 8008ab2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e7fe      	b.n	8008ac4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <vPortFree+0x5e>
 8008ace:	f04f 0330 	mov.w	r3, #48	; 0x30
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	e7fe      	b.n	8008ae0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <vPortFree+0xa8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d019      	beq.n	8008b24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d115      	bne.n	8008b24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <vPortFree+0xa8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	401a      	ands	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b08:	f7fe fbfe 	bl	8007308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <vPortFree+0xac>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4413      	add	r3, r2
 8008b16:	4a06      	ldr	r2, [pc, #24]	; (8008b30 <vPortFree+0xac>)
 8008b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f000 f86c 	bl	8008bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b20:	f7fe fc00 	bl	8007324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b24:	bf00      	nop
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200016a8 	.word	0x200016a8
 8008b30:	200016a0 	.word	0x200016a0

08008b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b40:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <prvHeapInit+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3307      	adds	r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <prvHeapInit+0xac>)
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <prvHeapInit+0xb0>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <prvHeapInit+0xb0>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b80:	2208      	movs	r2, #8
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <prvHeapInit+0xb4>)
 8008b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvHeapInit+0xb4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvHeapInit+0xb4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvHeapInit+0xb4>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <prvHeapInit+0xb8>)
 8008bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <prvHeapInit+0xbc>)
 8008bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvHeapInit+0xc0>)
 8008bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000a94 	.word	0x20000a94
 8008be4:	20001694 	.word	0x20001694
 8008be8:	2000169c 	.word	0x2000169c
 8008bec:	200016a4 	.word	0x200016a4
 8008bf0:	200016a0 	.word	0x200016a0
 8008bf4:	200016a8 	.word	0x200016a8

08008bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <prvInsertBlockIntoFreeList+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e002      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x14>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d8f7      	bhi.n	8008c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4413      	add	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d108      	bne.n	8008c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d118      	bne.n	8008c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d00d      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	441a      	add	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e003      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d002      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20001694 	.word	0x20001694
 8008ca8:	2000169c 	.word	0x2000169c

08008cac <find_cmd>:
 * directory for more details.
 */

#include "../../inc/find/find_internal.h"

dbase_record_t * find_cmd (const char * message) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	static char msg [PARSER_PATTERN_MAX_LEN_DEFAULT] = {0};

	uint16_t len = strlen(message);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7f7 fa95 	bl	80001e4 <strlen>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	81fb      	strh	r3, [r7, #14]
	strncpy(msg, message, len);
 8008cbe:	89fb      	ldrh	r3, [r7, #14]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	480a      	ldr	r0, [pc, #40]	; (8008cf0 <find_cmd+0x44>)
 8008cc6:	f000 fc56 	bl	8009576 <strncpy>
	if (len < PARSER_PATTERN_MAX_LEN_DEFAULT) {
 8008cca:	89fb      	ldrh	r3, [r7, #14]
 8008ccc:	2b63      	cmp	r3, #99	; 0x63
 8008cce:	d803      	bhi.n	8008cd8 <find_cmd+0x2c>
		msg[len] = '\0';
 8008cd0:	89fb      	ldrh	r3, [r7, #14]
 8008cd2:	4a07      	ldr	r2, [pc, #28]	; (8008cf0 <find_cmd+0x44>)
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	54d1      	strb	r1, [r2, r3]
	}
	return dbase_table_find(parser_command_dbase(), msg);
 8008cd8:	f000 fa2e 	bl	8009138 <parser_command_dbase>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	4904      	ldr	r1, [pc, #16]	; (8008cf0 <find_cmd+0x44>)
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f8d7 	bl	8008e94 <dbase_table_find>
 8008ce6:	4603      	mov	r3, r0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	200016ac 	.word	0x200016ac

08008cf4 <is_delimeter>:


#define EXTRACT_MSG_MAX_SIZE 100 //parser_pattern_max_len


bool is_delimeter (char symbol) {
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
	return (symbol == ' ' || symbol == '\t' || symbol == '\0');
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d005      	beq.n	8008d10 <is_delimeter+0x1c>
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	2b09      	cmp	r3, #9
 8008d08:	d002      	beq.n	8008d10 <is_delimeter+0x1c>
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <is_delimeter+0x20>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <is_delimeter+0x22>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	b2db      	uxtb	r3, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <extraction_possible>:


static inline bool extraction_possible (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
 8008d34:	4613      	mov	r3, r2
 8008d36:	803b      	strh	r3, [r7, #0]
	register int msg_len = strlen(message);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7f7 fa53 	bl	80001e4 <strlen>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	461c      	mov	r4, r3

	bool
		pos_in_message = from_here < msg_len,
 8008d42:	887b      	ldrh	r3, [r7, #2]
 8008d44:	429c      	cmp	r4, r3
 8008d46:	bfcc      	ite	gt
 8008d48:	2301      	movgt	r3, #1
 8008d4a:	2300      	movle	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]
		cmd_in_message = cmd_len <= msg_len,
 8008d4e:	883b      	ldrh	r3, [r7, #0]
 8008d50:	429c      	cmp	r4, r3
 8008d52:	bfac      	ite	ge
 8008d54:	2301      	movge	r3, #1
 8008d56:	2300      	movlt	r3, #0
 8008d58:	73bb      	strb	r3, [r7, #14]
		sym_not_delimeter = is_delimeter(message[from_here + cmd_len]);
 8008d5a:	887a      	ldrh	r2, [r7, #2]
 8008d5c:	883b      	ldrh	r3, [r7, #0]
 8008d5e:	4413      	add	r3, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff ffc3 	bl	8008cf4 <is_delimeter>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	737b      	strb	r3, [r7, #13]

	return
		pos_in_message &&
		cmd_in_message &&
		sym_not_delimeter &&
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <extraction_possible+0x66>
		pos_in_message &&
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <extraction_possible+0x66>
		cmd_in_message &&
 8008d7e:	7b7b      	ldrb	r3, [r7, #13]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <extraction_possible+0x66>
		sym_not_delimeter &&
 8008d84:	883b      	ldrh	r3, [r7, #0]
 8008d86:	2b63      	cmp	r3, #99	; 0x63
 8008d88:	d801      	bhi.n	8008d8e <extraction_possible+0x66>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <extraction_possible+0x68>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	b2db      	uxtb	r3, r3
		(cmd_len < EXTRACT_MSG_MAX_SIZE);
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd90      	pop	{r4, r7, pc}
	...

08008da0 <extract_pattern>:
// 		cmd_len <= msg_len &&
// 		cmd_len < EXTRACT_MSG_MAX_SIZE &&
// 		is_delimeter(message[from_here + cmd_len])
// 	;
// }
char * extract_pattern (char * message, uint16_t from_here, uint16_t cmd_len) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	807b      	strh	r3, [r7, #2]
 8008dac:	4613      	mov	r3, r2
 8008dae:	803b      	strh	r3, [r7, #0]
	static char pattern [EXTRACT_MSG_MAX_SIZE] = {0};
	*pattern = '\0';
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <extract_pattern+0x50>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]

	if (extraction_possible(message, from_here, cmd_len)) {
 8008db6:	883a      	ldrh	r2, [r7, #0]
 8008db8:	887b      	ldrh	r3, [r7, #2]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ffb3 	bl	8008d28 <extraction_possible>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00d      	beq.n	8008de4 <extract_pattern+0x44>
		strncpy(pattern, &message[from_here], cmd_len);
 8008dc8:	887b      	ldrh	r3, [r7, #2]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	883a      	ldrh	r2, [r7, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4807      	ldr	r0, [pc, #28]	; (8008df0 <extract_pattern+0x50>)
 8008dd4:	f000 fbcf 	bl	8009576 <strncpy>
		pattern[from_here + cmd_len] = '\0';
 8008dd8:	887a      	ldrh	r2, [r7, #2]
 8008dda:	883b      	ldrh	r3, [r7, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <extract_pattern+0x50>)
 8008de0:	2100      	movs	r1, #0
 8008de2:	54d1      	strb	r1, [r2, r3]
	}

	return pattern;
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <extract_pattern+0x50>)
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20001710 	.word	0x20001710

08008df4 <free_spaces>:

char * free_spaces (char * source) {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	char * delimeters = {" \t"};
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <free_spaces+0x28>)
 8008dfe:	60fb      	str	r3, [r7, #12]
	int del_quantity = strspn(source, delimeters);
 8008e00:	68f9      	ldr	r1, [r7, #12]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fbcc 	bl	80095a0 <strspn>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	60bb      	str	r3, [r7, #8]
    return (source + del_quantity);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	08009768 	.word	0x08009768

08008e20 <extract_pattern_from_start>:


static inline char * extract_pattern_from_start (char * string, uint16_t pattern_len) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
	return extract_pattern(string, 0, pattern_len);
 8008e2c:	887b      	ldrh	r3, [r7, #2]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ffb4 	bl	8008da0 <extract_pattern>
 8008e38:	4603      	mov	r3, r0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <pattern_matched>:

static inline bool pattern_matched (char * pattern, char * template) {
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
	return !strcmp(pattern, template);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f7 f9be 	bl	80001d0 <strcmp>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf0c      	ite	eq
 8008e5a:	2301      	moveq	r3, #1
 8008e5c:	2300      	movne	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <message_payload_continue>:

static inline bool message_payload_continue (char * message) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	return strlen(free_spaces(message));
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff ffbf 	bl	8008df4 <free_spaces>
 8008e76:	4603      	mov	r3, r0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f7 f9b3 	bl	80001e4 <strlen>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bf14      	ite	ne
 8008e84:	2301      	movne	r3, #1
 8008e86:	2300      	moveq	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <dbase_table_find>:


dbase_record_t * dbase_table_find (dbase_table_t table, char * message) {
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b089      	sub	sp, #36	; 0x24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	static uint16_t record;	
	static bool not_found;

	not_found = true;
 8008e9e:	4b45      	ldr	r3, [pc, #276]	; (8008fb4 <dbase_table_find+0x120>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
	record = 0;
 8008ea4:	4b44      	ldr	r3, [pc, #272]	; (8008fb8 <dbase_table_find+0x124>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	801a      	strh	r2, [r3, #0]

	while (table[record].command) {
 8008eaa:	e067      	b.n	8008f7c <dbase_table_find+0xe8>
		char * command = table[record].command;
 8008eac:	4b42      	ldr	r3, [pc, #264]	; (8008fb8 <dbase_table_find+0x124>)
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	61fb      	str	r3, [r7, #28]
		int cmd_len = strlen(command);
 8008ec4:	69f8      	ldr	r0, [r7, #28]
 8008ec6:	f7f7 f98d 	bl	80001e4 <strlen>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	61bb      	str	r3, [r7, #24]
		char
			* msg_after_spaces = free_spaces(message),
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f7ff ff90 	bl	8008df4 <free_spaces>
 8008ed4:	6178      	str	r0, [r7, #20]
			* pattern = extract_pattern_from_start(msg_after_spaces, cmd_len);
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4619      	mov	r1, r3
 8008edc:	6978      	ldr	r0, [r7, #20]
 8008ede:	f7ff ff9f 	bl	8008e20 <extract_pattern_from_start>
 8008ee2:	6138      	str	r0, [r7, #16]

		if (pattern_matched(pattern, command)) {
 8008ee4:	69f9      	ldr	r1, [r7, #28]
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f7ff ffab 	bl	8008e42 <pattern_matched>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d03a      	beq.n	8008f68 <dbase_table_find+0xd4>
			dbase_record_t * sub_table = table[record].subcommand;
 8008ef2:	4b31      	ldr	r3, [pc, #196]	; (8008fb8 <dbase_table_find+0x124>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	60fb      	str	r3, [r7, #12]
			register char * msg_after_pattern = msg_after_spaces + cmd_len;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	18d4      	adds	r4, r2, r3

			if (sub_table || message_payload_continue(msg_after_pattern)) {
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d105      	bne.n	8008f22 <dbase_table_find+0x8e>
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7ff ffa6 	bl	8008e68 <message_payload_continue>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01e      	beq.n	8008f60 <dbase_table_find+0xcc>
				if (sub_table == NULL) {
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d115      	bne.n	8008f54 <dbase_table_find+0xc0>
					 table[record].parameter = msg_after_pattern;
 8008f28:	4b23      	ldr	r3, [pc, #140]	; (8008fb8 <dbase_table_find+0x124>)
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	609c      	str	r4, [r3, #8]
					return &table[record];
 8008f3e:	4b1e      	ldr	r3, [pc, #120]	; (8008fb8 <dbase_table_find+0x124>)
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	e02a      	b.n	8008faa <dbase_table_find+0x116>
				}
				return dbase_table_find(sub_table, msg_after_pattern);
 8008f54:	4621      	mov	r1, r4
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7ff ff9c 	bl	8008e94 <dbase_table_find>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	e024      	b.n	8008faa <dbase_table_find+0x116>
			}
			else { // sub-pattern matched (record was found)
				not_found = false;
 8008f60:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <dbase_table_find+0x120>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
				break;
 8008f66:	e016      	b.n	8008f96 <dbase_table_find+0x102>
			}
		}
		else if (not_found) { // look at next record
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <dbase_table_find+0x120>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <dbase_table_find+0xe8>
			record++;
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <dbase_table_find+0x124>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <dbase_table_find+0x124>)
 8008f7a:	801a      	strh	r2, [r3, #0]
	while (table[record].command) {
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <dbase_table_find+0x124>)
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4413      	add	r3, r2
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d18a      	bne.n	8008eac <dbase_table_find+0x18>
		}
	}
	return &table[record];
 8008f96:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <dbase_table_find+0x124>)
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4413      	add	r3, r2
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3724      	adds	r7, #36	; 0x24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001774 	.word	0x20001774
 8008fb8:	20001776 	.word	0x20001776

08008fbc <get_for_voltage_cut_off>:
#include "measurements_internal.h"

char * get_for_voltage_cut_off (void) {
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
	//return some_voltage_pointer
}
 8008fc0:	bf00      	nop
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <get_for_charge_current>:

char * get_for_charge_current (void) {
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
	//return some_current_pointer
 8008fd0:	bf00      	nop
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <parser_create>:
6. find function returns found cell address.
7. when not enough cells found find function returns a stub
   empty-body function and "invalid  syntax" response.
*/

void parser_create (command_dbase_t cmd_dbase, int pattern_max_len) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	parser_set_command_dbase((dbase_record_t **)cmd_dbase);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f866 	bl	80090b8 <parser_set_command_dbase>
	parser_set_pattern_max_len(pattern_max_len);
 8008fec:	6838      	ldr	r0, [r7, #0]
 8008fee:	f000 f853 	bl	8009098 <parser_set_pattern_max_len>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <parse>:
void parser_delete (void) {
	parser_set_command_dbase(NULL);
	parser_set_pattern_max_len(0);
}

void parse (const char * user_message) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	dbase_record_t * command = _parser(user_message);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8c7 	bl	8009198 <_parser>
 800900a:	60f8      	str	r0, [r7, #12]
	parser_set_response(command->response ?
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <parse+0x1e>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	e000      	b.n	800901c <parse+0x20>
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <parse+0x54>)
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f85b 	bl	80090d8 <parser_set_response>
		command->response :
		PARSER_RESPONSE_STUB
	);
	parser_set_action(command->action ?
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <parse+0x34>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	e002      	b.n	8009036 <parse+0x3a>
 8009030:	f000 f81e 	bl	8009070 <parser_stub_action>
 8009034:	4603      	mov	r3, r0
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f85e 	bl	80090f8 <parser_set_action>
		command->action :
		parser_stub_action()
	);
	parser_set_parameter(command->parameter);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f869 	bl	8009118 <parser_set_parameter>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	0800976c 	.word	0x0800976c

08009054 <parser_not_found>:
}

action_t parser_stub_action (void);
dbase_record_t * parser_empty_cmd_dbase (void);

static inline dbase_record_t * parser_not_found (void) {
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
	return parser_empty_cmd_dbase();
 8009058:	f000 f814 	bl	8009084 <parser_empty_cmd_dbase>
 800905c:	4603      	mov	r3, r0
}
 800905e:	4618      	mov	r0, r3
 8009060:	bd80      	pop	{r7, pc}

08009062 <stub_action>:
 * directory for more details.
 */

#include "../../inc/parser/parser_internal.h"

static void stub_action (void) {
 8009062:	b480      	push	{r7}
 8009064:	af00      	add	r7, sp, #0

}
 8009066:	bf00      	nop
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <parser_stub_action>:
action_t parser_stub_action (void) {
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
	return stub_action;
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <parser_stub_action+0x10>)
}
 8009076:	4618      	mov	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	08009063 	.word	0x08009063

08009084 <parser_empty_cmd_dbase>:
	.response = PARSER_RESPONSE_STUB,
	.action = stub_action,
	.subcommand = NULL
};

dbase_record_t * parser_empty_cmd_dbase (void) {
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
	return &_empty_cmd_dbase;
 8009088:	4b02      	ldr	r3, [pc, #8]	; (8009094 <parser_empty_cmd_dbase+0x10>)
}
 800908a:	4618      	mov	r0, r3
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	200000ec 	.word	0x200000ec

08009098 <parser_set_pattern_max_len>:
static void (* _action) (void) = stub_action;
static char
	* _response = PARSER_RESPONSE_STUB,
	* _parameter = NULL;

void parser_set_pattern_max_len (int pattern_max_len) {
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	_pattern_max_len = pattern_max_len;
 80090a0:	4a04      	ldr	r2, [pc, #16]	; (80090b4 <parser_set_pattern_max_len+0x1c>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6013      	str	r3, [r2, #0]
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	2000177c 	.word	0x2000177c

080090b8 <parser_set_command_dbase>:

void parser_set_command_dbase (dbase_record_t ** cmd_dbase) {
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	_command_dbase = (dbase_record_t *)cmd_dbase;
 80090c0:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <parser_set_command_dbase+0x1c>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6013      	str	r3, [r2, #0]
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20001778 	.word	0x20001778

080090d8 <parser_set_response>:

void parser_set_response (char * response) {
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	_response = response;
 80090e0:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <parser_set_response+0x1c>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6013      	str	r3, [r2, #0]
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000104 	.word	0x20000104

080090f8 <parser_set_action>:
void parser_set_action (void (* action)(void)) {
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	_action = action;
 8009100:	4a04      	ldr	r2, [pc, #16]	; (8009114 <parser_set_action+0x1c>)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6013      	str	r3, [r2, #0]
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000100 	.word	0x20000100

08009118 <parser_set_parameter>:
void parser_set_parameter (char * parameter) {
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	_parameter = parameter;
 8009120:	4a04      	ldr	r2, [pc, #16]	; (8009134 <parser_set_parameter+0x1c>)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6013      	str	r3, [r2, #0]
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20001780 	.word	0x20001780

08009138 <parser_command_dbase>:

int parser_pattern_max_len (void) {
	return _pattern_max_len;
}
dbase_record_t * parser_command_dbase (void) {
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
	return _command_dbase;
 800913c:	4b03      	ldr	r3, [pc, #12]	; (800914c <parser_command_dbase+0x14>)
 800913e:	681b      	ldr	r3, [r3, #0]
}
 8009140:	4618      	mov	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20001778 	.word	0x20001778

08009150 <parser_response>:

char * parser_response (void) {
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
	return _response;
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <parser_response+0x14>)
 8009156:	681b      	ldr	r3, [r3, #0]
}
 8009158:	4618      	mov	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20000104 	.word	0x20000104

08009168 <parser_action>:
action_t parser_action (void) {
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
	return _action;
 800916c:	4b03      	ldr	r3, [pc, #12]	; (800917c <parser_action+0x14>)
 800916e:	681b      	ldr	r3, [r3, #0]
}
 8009170:	4618      	mov	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	20000100 	.word	0x20000100

08009180 <parser_parameter>:
char * parser_parameter (void) {
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
	return _parameter;
 8009184:	4b03      	ldr	r3, [pc, #12]	; (8009194 <parser_parameter+0x14>)
 8009186:	681b      	ldr	r3, [r3, #0]
}
 8009188:	4618      	mov	r0, r3
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20001780 	.word	0x20001780

08009198 <_parser>:


dbase_record_t * _parser (const char * message) {
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	if (parser_command_dbase() == NULL)
 80091a0:	f7ff ffca 	bl	8009138 <parser_command_dbase>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d103      	bne.n	80091b2 <_parser+0x1a>
		return parser_empty_cmd_dbase();
 80091aa:	f7ff ff6b 	bl	8009084 <parser_empty_cmd_dbase>
 80091ae:	4603      	mov	r3, r0
 80091b0:	e00b      	b.n	80091ca <_parser+0x32>

	dbase_record_t * found_record = find_cmd(message);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fd7a 	bl	8008cac <find_cmd>
 80091b8:	60f8      	str	r0, [r7, #12]

	if (found_record != NULL) {
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <_parser+0x2c>
		return found_record;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	e002      	b.n	80091ca <_parser+0x32>
	}

	return parser_not_found(); // must never occure
 80091c4:	f7ff ff46 	bl	8009054 <parser_not_found>
 80091c8:	4603      	mov	r3, r0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <set_for_voltage_cut_off>:
#include "system_config_internal.h"

void set_for_voltage_cut_off (void) {
 80091d2:	b480      	push	{r7}
 80091d4:	af00      	add	r7, sp, #0
	//some_voltage_pointer = parser_parameter();
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <set_for_charge_current>:

void set_for_charge_current (void) {
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
	//some_current_pointer = parser_parameter();
}
 80091e4:	bf00      	nop
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <set_for_battery_type>:

void set_for_battery_type (void) {
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0
	//some_type_pointer = parser_parameter();
}
 80091f2:	bf00      	nop
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <get_for_battery_type>:
char * get_for_battery_type (void) {
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
	//return some_type_pointer
 8009200:	bf00      	nop
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <save_data_from_set>:
#include "system_info_internal.h"

void save_data_from_set (void) {
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
	memory.parameter = parser_parameter();
 8009210:	f7ff ffb6 	bl	8009180 <parser_parameter>
 8009214:	4602      	mov	r2, r0
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <save_data_from_set+0x28>)
 8009218:	601a      	str	r2, [r3, #0]
	memory.response = parser_response();
 800921a:	f7ff ff99 	bl	8009150 <parser_response>
 800921e:	4602      	mov	r2, r0
 8009220:	4b04      	ldr	r3, [pc, #16]	; (8009234 <save_data_from_set+0x28>)
 8009222:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 8009224:	f7ff ffa0 	bl	8009168 <parser_action>
 8009228:	4602      	mov	r2, r0
 800922a:	4b02      	ldr	r3, [pc, #8]	; (8009234 <save_data_from_set+0x28>)
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200019c0 	.word	0x200019c0

08009238 <save_data_from_get>:

void save_data_from_get (char * parameter) {
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	memory.parameter = parameter;
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <save_data_from_get+0x2c>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6013      	str	r3, [r2, #0]
	memory.response = parser_response();
 8009246:	f7ff ff83 	bl	8009150 <parser_response>
 800924a:	4602      	mov	r2, r0
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <save_data_from_get+0x2c>)
 800924e:	605a      	str	r2, [r3, #4]
	memory.action = parser_action();
 8009250:	f7ff ff8a 	bl	8009168 <parser_action>
 8009254:	4602      	mov	r2, r0
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <save_data_from_get+0x2c>)
 8009258:	609a      	str	r2, [r3, #8]
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200019c0 	.word	0x200019c0

08009268 <init_uart_data_transfer>:
uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA + 1] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0,
		tx_complete = true;

void init_uart_data_transfer (void) {
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
	uart_data_transfer_events = xEventGroupCreate();
 800926c:	f7fc fe54 	bl	8005f18 <xEventGroupCreate>
 8009270:	4602      	mov	r2, r0
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <init_uart_data_transfer+0x34>)
 8009274:	601a      	str	r2, [r3, #0]

	enable_idle_flag_interrupt = true;
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <init_uart_data_transfer+0x38>)
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800927c:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <init_uart_data_transfer+0x3c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <init_uart_data_transfer+0x3c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0210 	orr.w	r2, r2, #16
 800928a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 800928c:	2263      	movs	r2, #99	; 0x63
 800928e:	4906      	ldr	r1, [pc, #24]	; (80092a8 <init_uart_data_transfer+0x40>)
 8009290:	4804      	ldr	r0, [pc, #16]	; (80092a4 <init_uart_data_transfer+0x3c>)
 8009292:	f7fb fe01 	bl	8004e98 <HAL_UART_Receive_DMA>
}
 8009296:	bf00      	nop
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200017e8 	.word	0x200017e8
 80092a0:	200017ec 	.word	0x200017ec
 80092a4:	20001a94 	.word	0x20001a94
 80092a8:	20001784 	.word	0x20001784

080092ac <event_group_set_bit_from_isr>:

void transmit_data_by_uart (void) {
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
}

void event_group_set_bit_from_isr (EventGroupHandle_t event_group, uint32_t bit_to_set) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]

	xResult = xEventGroupSetBitsFromISR (event_group, bit_to_set, & xHigherPriorityTaskWoken);
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	480b      	ldr	r0, [pc, #44]	; (80092f0 <event_group_set_bit_from_isr+0x44>)
 80092c4:	f7ff f8be 	bl	8008444 <xTimerPendFunctionCallFromISR>
 80092c8:	60f8      	str	r0, [r7, #12]

	if (xResult != pdFAIL) {
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <event_group_set_bit_from_isr+0x3a>
	  portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <event_group_set_bit_from_isr+0x3a>
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <event_group_set_bit_from_isr+0x48>)
 80092d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
	}
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	080061f3 	.word	0x080061f3
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a24      	ldr	r2, [pc, #144]	; (8009398 <HAL_UART_IDLE_Callback+0xa0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d142      	bne.n	8009390 <HAL_UART_IDLE_Callback+0x98>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2210      	movs	r2, #16
 8009310:	621a      	str	r2, [r3, #32]

		if(enable_idle_flag_interrupt){
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <HAL_UART_IDLE_Callback+0xa4>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_UART_IDLE_Callback+0x2a>
			enable_idle_flag_interrupt = false;
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <HAL_UART_IDLE_Callback+0xa4>)
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
			return;
 8009320:	e036      	b.n	8009390 <HAL_UART_IDLE_Callback+0x98>
		}

		uint8_t command_len = strlen((const char *)rx_uart_data);
 8009322:	481f      	ldr	r0, [pc, #124]	; (80093a0 <HAL_UART_IDLE_Callback+0xa8>)
 8009324:	f7f6 ff5e 	bl	80001e4 <strlen>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
		if (rx_uart_data[command_len - 1] != '\r')
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	3b01      	subs	r3, #1
 8009330:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <HAL_UART_IDLE_Callback+0xa8>)
 8009332:	5cd3      	ldrb	r3, [r2, r3]
 8009334:	2b0d      	cmp	r3, #13
 8009336:	d126      	bne.n	8009386 <HAL_UART_IDLE_Callback+0x8e>
			return;
		rx_uart_data[command_len - 1] = '\0';
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	3b01      	subs	r3, #1
 800933c:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <HAL_UART_IDLE_Callback+0xa8>)
 800933e:	2100      	movs	r1, #0
 8009340:	54d1      	strb	r1, [r2, r3]

		if (strlen((const char *)rx_uart_data) < MIN_LEN_COMMAND)
 8009342:	4817      	ldr	r0, [pc, #92]	; (80093a0 <HAL_UART_IDLE_Callback+0xa8>)
 8009344:	f7f6 ff4e 	bl	80001e4 <strlen>
 8009348:	4603      	mov	r3, r0
 800934a:	2b0e      	cmp	r3, #14
 800934c:	d91d      	bls.n	800938a <HAL_UART_IDLE_Callback+0x92>
			return;

		if(tx_complete == false)
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <HAL_UART_IDLE_Callback+0xac>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	f083 0301 	eor.w	r3, r3, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d118      	bne.n	800938e <HAL_UART_IDLE_Callback+0x96>
			return;
		else
			tx_complete = false;
 800935c:	4b11      	ldr	r3, [pc, #68]	; (80093a4 <HAL_UART_IDLE_Callback+0xac>)
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]

		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0210 	bic.w	r2, r2, #16
 8009370:	601a      	str	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fb fea2 	bl	80050bc <HAL_UART_AbortReceive_IT>

		event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 8009378:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_UART_IDLE_Callback+0xb0>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2101      	movs	r1, #1
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff ff94 	bl	80092ac <event_group_set_bit_from_isr>
 8009384:	e004      	b.n	8009390 <HAL_UART_IDLE_Callback+0x98>
			return;
 8009386:	bf00      	nop
 8009388:	e002      	b.n	8009390 <HAL_UART_IDLE_Callback+0x98>
			return;
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <HAL_UART_IDLE_Callback+0x98>
			return;
 800938e:	bf00      	nop
	}
}
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	40013800 	.word	0x40013800
 800939c:	200017ec 	.word	0x200017ec
 80093a0:	20001784 	.word	0x20001784
 80093a4:	20000108 	.word	0x20000108
 80093a8:	200017e8 	.word	0x200017e8

080093ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0210 	bic.w	r2, r2, #16
 80093c2:	601a      	str	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(huart);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fb fe79 	bl	80050bc <HAL_UART_AbortReceive_IT>

	event_group_set_bit_from_isr(uart_data_transfer_events, RX_DATA_COMPLETE);
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_UART_RxCpltCallback+0x34>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2101      	movs	r1, #1
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff ff6b 	bl	80092ac <event_group_set_bit_from_isr>
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200017e8 	.word	0x200017e8

080093e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	event_group_set_bit_from_isr(uart_data_transfer_events, TX_DATA_COMPLETE);
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <HAL_UART_TxCpltCallback+0x1c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2102      	movs	r1, #2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff ff5a 	bl	80092ac <event_group_set_bit_from_isr>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	200017e8 	.word	0x200017e8

08009404 <rx_uart_data_task>:

#include <string.h>
void rx_uart_data_task (void const * argument) {
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af02      	add	r7, sp, #8
 800940a:	6078      	str	r0, [r7, #4]
	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, 1, pdTRUE, pdTRUE, portMAX_DELAY );
 800940c:	4b13      	ldr	r3, [pc, #76]	; (800945c <rx_uart_data_task+0x58>)
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	f04f 33ff 	mov.w	r3, #4294967295
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	2301      	movs	r3, #1
 8009418:	2201      	movs	r2, #1
 800941a:	2101      	movs	r1, #1
 800941c:	f7fc fd96 	bl	8005f4c <xEventGroupWaitBits>
/*
	parse this

*/
// EXAMPLE:
		parse((const char *)rx_uart_data);
 8009420:	480f      	ldr	r0, [pc, #60]	; (8009460 <rx_uart_data_task+0x5c>)
 8009422:	f7ff fdeb 	bl	8008ffc <parse>
		if (strlen(rx_uart_data) > strlen("get charge_current")) {
 8009426:	480e      	ldr	r0, [pc, #56]	; (8009460 <rx_uart_data_task+0x5c>)
 8009428:	f7f6 fedc 	bl	80001e4 <strlen>
 800942c:	4603      	mov	r3, r0
 800942e:	2b12      	cmp	r3, #18
 8009430:	d900      	bls.n	8009434 <rx_uart_data_task+0x30>
			asm("nop");
 8009432:	bf00      	nop
		}
		if (strcmp((const char *)rx_uart_data, "get charge_current") ) {
 8009434:	490b      	ldr	r1, [pc, #44]	; (8009464 <rx_uart_data_task+0x60>)
 8009436:	480a      	ldr	r0, [pc, #40]	; (8009460 <rx_uart_data_task+0x5c>)
 8009438:	f7f6 feca 	bl	80001d0 <strcmp>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d000      	beq.n	8009444 <rx_uart_data_task+0x40>
			asm("nop");
 8009442:	bf00      	nop
		}

		memset(rx_uart_data, 0, MAX_SIZE_RX_UART_DATA);
 8009444:	2263      	movs	r2, #99	; 0x63
 8009446:	2100      	movs	r1, #0
 8009448:	4805      	ldr	r0, [pc, #20]	; (8009460 <rx_uart_data_task+0x5c>)
 800944a:	f000 f88c 	bl	8009566 <memset>

		// while not have parse call
		xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 800944e:	4b03      	ldr	r3, [pc, #12]	; (800945c <rx_uart_data_task+0x58>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2104      	movs	r1, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f7fc fe43 	bl	80060e0 <xEventGroupSetBits>
	for(;;) {
 800945a:	e7d7      	b.n	800940c <rx_uart_data_task+0x8>
 800945c:	200017e8 	.word	0x200017e8
 8009460:	20001784 	.word	0x20001784
 8009464:	080097a8 	.word	0x080097a8

08009468 <tx_uart_data_task>:
	}
}

void tx_uart_data_task(void const * argument) {
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af02      	add	r7, sp, #8
 800946e:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xEventGroupWaitBits(uart_data_transfer_events, NEED_TRANSMIT_DATA, pdTRUE, pdTRUE, portMAX_DELAY);
 8009474:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <tx_uart_data_task+0x8c>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	f04f 33ff 	mov.w	r3, #4294967295
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	2301      	movs	r3, #1
 8009480:	2201      	movs	r2, #1
 8009482:	2104      	movs	r1, #4
 8009484:	f7fc fd62 	bl	8005f4c <xEventGroupWaitBits>

		//get pointer tx_data
		//	tx_data = GET_POINTER_FUNCTION
		// EXAMPLE:
		tx_data = parser_response();
 8009488:	f7ff fe62 	bl	8009150 <parser_response>
 800948c:	4603      	mov	r3, r0
 800948e:	60fb      	str	r3, [r7, #12]

		if(tx_data != 0)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <tx_uart_data_task+0x44>
			HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7f6 fea4 	bl	80001e4 <strlen>
 800949c:	4603      	mov	r3, r0
 800949e:	b29b      	uxth	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	4814      	ldr	r0, [pc, #80]	; (80094f8 <tx_uart_data_task+0x90>)
 80094a6:	f7fb fc7b 	bl	8004da0 <HAL_UART_Transmit_DMA>
 80094aa:	e004      	b.n	80094b6 <tx_uart_data_task+0x4e>
		else
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error\r\n", strlen("debug message or error\r\n"));
 80094ac:	2218      	movs	r2, #24
 80094ae:	4913      	ldr	r1, [pc, #76]	; (80094fc <tx_uart_data_task+0x94>)
 80094b0:	4811      	ldr	r0, [pc, #68]	; (80094f8 <tx_uart_data_task+0x90>)
 80094b2:	f7fb fc75 	bl	8004da0 <HAL_UART_Transmit_DMA>

		xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <tx_uart_data_task+0x8c>)
 80094b8:	6818      	ldr	r0, [r3, #0]
 80094ba:	f04f 33ff 	mov.w	r3, #4294967295
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2301      	movs	r3, #1
 80094c2:	2201      	movs	r2, #1
 80094c4:	2102      	movs	r1, #2
 80094c6:	f7fc fd41 	bl	8005f4c <xEventGroupWaitBits>

		tx_complete = true;
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <tx_uart_data_task+0x98>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Abort(&huart1);
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <tx_uart_data_task+0x90>)
 80094d2:	f7fb fd65 	bl	8004fa0 <HAL_UART_Abort>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80094d6:	4b08      	ldr	r3, [pc, #32]	; (80094f8 <tx_uart_data_task+0x90>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <tx_uart_data_task+0x90>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0210 	orr.w	r2, r2, #16
 80094e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 80094e6:	2263      	movs	r2, #99	; 0x63
 80094e8:	4906      	ldr	r1, [pc, #24]	; (8009504 <tx_uart_data_task+0x9c>)
 80094ea:	4803      	ldr	r0, [pc, #12]	; (80094f8 <tx_uart_data_task+0x90>)
 80094ec:	f7fb fcd4 	bl	8004e98 <HAL_UART_Receive_DMA>
	for(;;) {
 80094f0:	e7c0      	b.n	8009474 <tx_uart_data_task+0xc>
 80094f2:	bf00      	nop
 80094f4:	200017e8 	.word	0x200017e8
 80094f8:	20001a94 	.word	0x20001a94
 80094fc:	080097bc 	.word	0x080097bc
 8009500:	20000108 	.word	0x20000108
 8009504:	20001784 	.word	0x20001784

08009508 <__libc_init_array>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4e0d      	ldr	r6, [pc, #52]	; (8009540 <__libc_init_array+0x38>)
 800950c:	4c0d      	ldr	r4, [pc, #52]	; (8009544 <__libc_init_array+0x3c>)
 800950e:	1ba4      	subs	r4, r4, r6
 8009510:	10a4      	asrs	r4, r4, #2
 8009512:	2500      	movs	r5, #0
 8009514:	42a5      	cmp	r5, r4
 8009516:	d109      	bne.n	800952c <__libc_init_array+0x24>
 8009518:	4e0b      	ldr	r6, [pc, #44]	; (8009548 <__libc_init_array+0x40>)
 800951a:	4c0c      	ldr	r4, [pc, #48]	; (800954c <__libc_init_array+0x44>)
 800951c:	f000 f852 	bl	80095c4 <_init>
 8009520:	1ba4      	subs	r4, r4, r6
 8009522:	10a4      	asrs	r4, r4, #2
 8009524:	2500      	movs	r5, #0
 8009526:	42a5      	cmp	r5, r4
 8009528:	d105      	bne.n	8009536 <__libc_init_array+0x2e>
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009530:	4798      	blx	r3
 8009532:	3501      	adds	r5, #1
 8009534:	e7ee      	b.n	8009514 <__libc_init_array+0xc>
 8009536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800953a:	4798      	blx	r3
 800953c:	3501      	adds	r5, #1
 800953e:	e7f2      	b.n	8009526 <__libc_init_array+0x1e>
 8009540:	08009810 	.word	0x08009810
 8009544:	08009810 	.word	0x08009810
 8009548:	08009810 	.word	0x08009810
 800954c:	08009814 	.word	0x08009814

08009550 <memcpy>:
 8009550:	b510      	push	{r4, lr}
 8009552:	1e43      	subs	r3, r0, #1
 8009554:	440a      	add	r2, r1
 8009556:	4291      	cmp	r1, r2
 8009558:	d100      	bne.n	800955c <memcpy+0xc>
 800955a:	bd10      	pop	{r4, pc}
 800955c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009564:	e7f7      	b.n	8009556 <memcpy+0x6>

08009566 <memset>:
 8009566:	4402      	add	r2, r0
 8009568:	4603      	mov	r3, r0
 800956a:	4293      	cmp	r3, r2
 800956c:	d100      	bne.n	8009570 <memset+0xa>
 800956e:	4770      	bx	lr
 8009570:	f803 1b01 	strb.w	r1, [r3], #1
 8009574:	e7f9      	b.n	800956a <memset+0x4>

08009576 <strncpy>:
 8009576:	b570      	push	{r4, r5, r6, lr}
 8009578:	3901      	subs	r1, #1
 800957a:	4604      	mov	r4, r0
 800957c:	b902      	cbnz	r2, 8009580 <strncpy+0xa>
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	4623      	mov	r3, r4
 8009582:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009586:	f803 5b01 	strb.w	r5, [r3], #1
 800958a:	1e56      	subs	r6, r2, #1
 800958c:	b92d      	cbnz	r5, 800959a <strncpy+0x24>
 800958e:	4414      	add	r4, r2
 8009590:	42a3      	cmp	r3, r4
 8009592:	d0f4      	beq.n	800957e <strncpy+0x8>
 8009594:	f803 5b01 	strb.w	r5, [r3], #1
 8009598:	e7fa      	b.n	8009590 <strncpy+0x1a>
 800959a:	461c      	mov	r4, r3
 800959c:	4632      	mov	r2, r6
 800959e:	e7ed      	b.n	800957c <strncpy+0x6>

080095a0 <strspn>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095aa:	b13d      	cbz	r5, 80095bc <strspn+0x1c>
 80095ac:	1e4c      	subs	r4, r1, #1
 80095ae:	e001      	b.n	80095b4 <strspn+0x14>
 80095b0:	42ae      	cmp	r6, r5
 80095b2:	d005      	beq.n	80095c0 <strspn+0x20>
 80095b4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	d1f9      	bne.n	80095b0 <strspn+0x10>
 80095bc:	1a18      	subs	r0, r3, r0
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	4613      	mov	r3, r2
 80095c2:	e7ef      	b.n	80095a4 <strspn+0x4>

080095c4 <_init>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr

080095d0 <_fini>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr
