
dcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080064ec  080064ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064ec  080064ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  20000010  08006504  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  08006504  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188fe  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038ed  00000000  00000000  0003893e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  0003c230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  0003d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eb29  00000000  00000000  0003e758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001184f  00000000  00000000  0005d281  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b013f  00000000  00000000  0006ead0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ec0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  0011ec8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063ec 	.word	0x080063ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080063ec 	.word	0x080063ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <MX_DMA_Init+0x38>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6153      	str	r3, [r2, #20]
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <MX_DMA_Init+0x38>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2105      	movs	r1, #5
 8000202:	200f      	movs	r0, #15
 8000204:	f000 fce8 	bl	8000bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000208:	200f      	movs	r0, #15
 800020a:	f000 fd01 	bl	8000c10 <HAL_NVIC_EnableIRQ>

}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <vApplicationGetIdleTaskMemory+0x2c>)
 800022c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <vApplicationGetIdleTaskMemory+0x30>)
 8000232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b09a      	sub	sp, #104	; 0x68
 8000254:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of command_queue */
  osMessageQDef(command_queue, 100, uint8_t);
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <MX_FREERTOS_Init+0x9c>)
 8000258:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800025c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800025e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  command_queueHandle = osMessageCreate(osMessageQ(command_queue), NULL);
 8000262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f003 fee8 	bl	800403e <osMessageCreate>
 800026e:	4602      	mov	r2, r0
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <MX_FREERTOS_Init+0xa0>)
 8000272:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000274:	4b1f      	ldr	r3, [pc, #124]	; (80002f4 <MX_FREERTOS_Init+0xa4>)
 8000276:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fe75 	bl	8003f7e <osThreadCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_FREERTOS_Init+0xa8>)
 8000298:	601a      	str	r2, [r3, #0]

  /* definition and creation of rx_uart_data */
  osThreadDef(rx_uart_data, rx_uart_data_task, osPriorityNormal, 0, 128);
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_FREERTOS_Init+0xac>)
 800029c:	f107 0420 	add.w	r4, r7, #32
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rx_uart_dataHandle = osThreadCreate(osThread(rx_uart_data), NULL);
 80002ae:	f107 0320 	add.w	r3, r7, #32
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 fe62 	bl	8003f7e <osThreadCreate>
 80002ba:	4602      	mov	r2, r0
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_FREERTOS_Init+0xb0>)
 80002be:	601a      	str	r2, [r3, #0]

  /* definition and creation of tx_uart_data */
  osThreadDef(tx_uart_data, tx_uart_data_task, osPriorityNormal, 0, 128);
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_FREERTOS_Init+0xb4>)
 80002c2:	1d3c      	adds	r4, r7, #4
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tx_uart_dataHandle = osThreadCreate(osThread(tx_uart_data), NULL);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fe51 	bl	8003f7e <osThreadCreate>
 80002dc:	4602      	mov	r2, r0
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_FREERTOS_Init+0xb8>)
 80002e0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002e2:	bf00      	nop
 80002e4:	3768      	adds	r7, #104	; 0x68
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08006404 	.word	0x08006404
 80002f0:	200010a8 	.word	0x200010a8
 80002f4:	08006420 	.word	0x08006420
 80002f8:	200010a4 	.word	0x200010a4
 80002fc:	0800644c 	.word	0x0800644c
 8000300:	200010ac 	.word	0x200010ac
 8000304:	08006478 	.word	0x08006478
 8000308:	200010a0 	.word	0x200010a0

0800030c <StartDefaultTask>:
#include "usart.h"
#include "../../../software/inc/parser/parser.h"

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	static uint8_t input_command [100] = {0};// 100 max size queue?
	static uint16_t num_cell = 0;
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(command_queueHandle, 100);
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <StartDefaultTask+0x5c>)
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	2264      	movs	r2, #100	; 0x64
 800031e:	4618      	mov	r0, r3
 8000320:	f003 feb6 	bl	8004090 <osMessageGet>
	if (event.status == osEventMessage) {
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b10      	cmp	r3, #16
 8000328:	d11a      	bne.n	8000360 <StartDefaultTask+0x54>
		input_command [num_cell] =  event.value.v;
 800032a:	6939      	ldr	r1, [r7, #16]
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <StartDefaultTask+0x60>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	b2c9      	uxtb	r1, r1
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <StartDefaultTask+0x64>)
 8000336:	5499      	strb	r1, [r3, r2]
		num_cell++;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <StartDefaultTask+0x60>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <StartDefaultTask+0x60>)
 8000342:	801a      	strh	r2, [r3, #0]
		if((input_command [num_cell-1] == 0) || num_cell == 100) { // num_cell == 100 need? we have max size command 20, 21 cell = '\0'
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <StartDefaultTask+0x60>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	3b01      	subs	r3, #1
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <StartDefaultTask+0x64>)
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <StartDefaultTask+0x4e>
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <StartDefaultTask+0x60>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2b64      	cmp	r3, #100	; 0x64
 8000358:	d102      	bne.n	8000360 <StartDefaultTask+0x54>
//			HAL_UART_Transmit(&huart1, input_command, strlen(input_command), 100); //push input command str to uart

//			parse(input_command); // need add init

			num_cell = 0;
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <StartDefaultTask+0x60>)
 800035c:	2200      	movs	r2, #0
 800035e:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000360:	2001      	movs	r0, #1
 8000362:	f003 fe58 	bl	8004016 <osDelay>
	event = osMessageGet(command_queueHandle, 100);
 8000366:	e7d5      	b.n	8000314 <StartDefaultTask+0x8>
 8000368:	200010a8 	.word	0x200010a8
 800036c:	20000280 	.word	0x20000280
 8000370:	20000284 	.word	0x20000284

08000374 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	; 0x28
 8000378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <MX_GPIO_Init+0xf4>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a36      	ldr	r2, [pc, #216]	; (8000468 <MX_GPIO_Init+0xf4>)
 8000390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b34      	ldr	r3, [pc, #208]	; (8000468 <MX_GPIO_Init+0xf4>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800039e:	613b      	str	r3, [r7, #16]
 80003a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a24      	ldr	r2, [pc, #144]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <MX_GPIO_Init+0xf4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2120      	movs	r1, #32
 80003ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f2:	f000 ffa7 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_GPIO_Init+0xf8>)
 80003fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	4819      	ldr	r0, [pc, #100]	; (8000470 <MX_GPIO_Init+0xfc>)
 800040c:	f000 fe28 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000410:	230c      	movs	r3, #12
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000414:	2302      	movs	r3, #2
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041c:	2303      	movs	r3, #3
 800041e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000420:	2307      	movs	r3, #7
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4619      	mov	r1, r3
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 fe17 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000432:	2320      	movs	r3, #32
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fe08 	bl	8001060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2028      	movs	r0, #40	; 0x28
 8000456:	f000 fbbf 	bl	8000bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800045a:	2028      	movs	r0, #40	; 0x28
 800045c:	f000 fbd8 	bl	8000c10 <HAL_NVIC_EnableIRQ>

}
 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	; 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	10210000 	.word	0x10210000
 8000470:	48000800 	.word	0x48000800

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fac0 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f80f 	bl	800049e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f7ff ff78 	bl	8000374 <MX_GPIO_Init>
  MX_DMA_Init();
 8000484:	f7ff feac 	bl	80001e0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000488:	f000 f976 	bl	8000778 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800048c:	f000 f9e6 	bl	800085c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_uart_data_transfer();
 8000490:	f005 febc 	bl	800620c <init_uart_data_transfer>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000494:	f7ff fedc 	bl	8000250 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000498:	f003 fd6a 	bl	8003f70 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049c:	e7fe      	b.n	800049c <main+0x28>

0800049e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b096      	sub	sp, #88	; 0x58
 80004a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a8:	2228      	movs	r2, #40	; 0x28
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f005 ff94 	bl	80063da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	f107 031c 	add.w	r3, r7, #28
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d4:	2302      	movs	r3, #2
 80004d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	2301      	movs	r3, #1
 80004da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004dc:	2310      	movs	r3, #16
 80004de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e0:	2302      	movs	r3, #2
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e4:	2300      	movs	r3, #0
 80004e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004e8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 ff62 	bl	80013bc <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004fe:	f000 f839 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2302      	movs	r3, #2
 8000508:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	2102      	movs	r1, #2
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fe54 	bl	80021cc <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800052a:	f000 f823 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800052e:	2301      	movs	r3, #1
 8000530:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4618      	mov	r0, r3
 800053a:	f002 f8af 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000544:	f000 f816 	bl	8000574 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3758      	adds	r7, #88	; 0x58
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000562:	f000 fa61 	bl	8000a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40012c00 	.word	0x40012c00

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_MspInit+0x70>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <HAL_MspInit+0x70>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_MspInit+0x70>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_MspInit+0x70>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <HAL_MspInit+0x70>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_MspInit+0x70>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	f06f 0009 	mvn.w	r0, #9
 80005c2:	f000 fb09 	bl	8000bd8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	f06f 0004 	mvn.w	r0, #4
 80005ce:	f000 fb03 	bl	8000bd8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	f06f 0003 	mvn.w	r0, #3
 80005da:	f000 fafd 	bl	8000bd8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	210f      	movs	r1, #15
 80005e2:	f06f 0001 	mvn.w	r0, #1
 80005e6:	f000 faf7 	bl	8000bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2019      	movs	r0, #25
 800060e:	f000 fae3 	bl	8000bd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000612:	2019      	movs	r0, #25
 8000614:	f000 fafc 	bl	8000c10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_InitTick+0x9c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_InitTick+0x9c>)
 800061e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_InitTick+0x9c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fffc 	bl	8002638 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000640:	f001 ffd8 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8000644:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_InitTick+0xa0>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	0c9b      	lsrs	r3, r3, #18
 8000650:	3b01      	subs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_InitTick+0xa4>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_InitTick+0xa8>)
 8000658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_InitTick+0xa4>)
 800065c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_InitTick+0xa4>)
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_InitTick+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <HAL_InitTick+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <HAL_InitTick+0xa4>)
 8000676:	f002 f947 	bl	8002908 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <HAL_InitTick+0xa4>)
 8000682:	f002 f96d 	bl	8002960 <HAL_TIM_Base_Start_IT>
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	431bde83 	.word	0x431bde83
 800069c:	200010b0 	.word	0x200010b0
 80006a0:	40012c00 	.word	0x40012c00

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <DMA1_Channel5_IRQHandler+0x10>)
 80006de:	f000 fbc2 	bl	8000e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20001130 	.word	0x20001130

080006ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006f2:	f002 f95f 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200010b0 	.word	0x200010b0

08000700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <TIM2_IRQHandler+0x10>)
 8000706:	f002 f955 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200010f0 	.word	0x200010f0

08000714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <USART1_IRQHandler+0x24>)
 800071a:	f002 fe8f 	bl	800343c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <USART1_IRQHandler+0x24>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0310 	and.w	r3, r3, #16
 8000728:	2b10      	cmp	r3, #16
 800072a:	d102      	bne.n	8000732 <USART1_IRQHandler+0x1e>
  {
	 HAL_UART_IDLE_Callback(&huart1);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <USART1_IRQHandler+0x24>)
 800072e:	f005 fd87 	bl	8006240 <HAL_UART_IDLE_Callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20001174 	.word	0x20001174

0800073c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000744:	f000 fe16 	bl	8001374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <SystemInit+0x28>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <SystemInit+0x28>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SystemInit+0x28>)
 8000762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000766:	609a      	str	r2, [r3, #8]
#endif
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_TIM2_Init+0x98>)
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_TIM2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_TIM2_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_TIM2_Init+0x98>)
 80007ac:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80007b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_TIM2_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_TIM2_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM2_Init+0x98>)
 80007c0:	f002 f8a2 	bl	8002908 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007ca:	f7ff fed3 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM2_Init+0x98>)
 80007dc:	f002 fa09 	bl	8002bf2 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007e6:	f7ff fec5 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_TIM2_Init+0x98>)
 80007f8:	f002 fbee 	bl	8002fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000802:	f7ff feb7 	bl	8000574 <Error_Handler>
  }

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200010f0 	.word	0x200010f0

08000814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000824:	d113      	bne.n	800084e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_TIM_Base_MspInit+0x44>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <HAL_TIM_Base_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_TIM_Base_MspInit+0x44>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	201c      	movs	r0, #28
 8000844:	f000 f9c8 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000848:	201c      	movs	r0, #28
 800084a:	f000 f9e1 	bl	8000c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART1_UART_Init+0x58>)
 80008a0:	f002 fc26 	bl	80030f0 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f7ff fe63 	bl	8000574 <Error_Handler>
  }

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20001174 	.word	0x20001174
 80008b8:	40013800 	.word	0x40013800

080008bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <HAL_UART_MspInit+0xd8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d155      	bne.n	800098a <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <HAL_UART_MspInit+0xdc>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <HAL_UART_MspInit+0xdc>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <HAL_UART_MspInit+0xdc>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_UART_MspInit+0xdc>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a27      	ldr	r2, [pc, #156]	; (8000998 <HAL_UART_MspInit+0xdc>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <HAL_UART_MspInit+0xdc>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800090e:	23c0      	movs	r3, #192	; 0xc0
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	481c      	ldr	r0, [pc, #112]	; (800099c <HAL_UART_MspInit+0xe0>)
 800092a:	f000 fb99 	bl	8001060 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000960:	f000 f964 	bl	8000c2c <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800096a:	f7ff fe03 	bl	8000574 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000972:	66da      	str	r2, [r3, #108]	; 0x6c
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2025      	movs	r0, #37	; 0x25
 8000980:	f000 f92a 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000984:	2025      	movs	r0, #37	; 0x25
 8000986:	f000 f943 	bl	8000c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40013800 	.word	0x40013800
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400
 80009a0:	20001130 	.word	0x20001130
 80009a4:	40020058 	.word	0x40020058

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ae:	e003      	b.n	80009b8 <LoopCopyDataInit>

080009b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009b6:	3104      	adds	r1, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80009bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009c0:	d3f6      	bcc.n	80009b0 <CopyDataInit>
	ldr	r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009c4:	e002      	b.n	80009cc <LoopFillZerobss>

080009c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009c8:	f842 3b04 	str.w	r3, [r2], #4

080009cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <LoopForever+0x16>)
	cmp	r2, r3
 80009ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009d0:	d3f9      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d2:	f7ff febb 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f005 fcd1 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fd4b 	bl	8000474 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80009e4:	080064f4 	.word	0x080064f4
	ldr	r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009ec:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80009f0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80009f4:	200011f8 	.word	0x200011f8

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f8d8 	bl	8000bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fdf0 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fdb4 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200011f4 	.word	0x200011f4

08000a50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200011f4 	.word	0x200011f4

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff4c 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bea:	f7ff ff61 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	6978      	ldr	r0, [r7, #20]
 8000bf6:	f7ff ffb1 	bl	8000b5c <NVIC_EncodePriority>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff80 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff54 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e037      	b.n	8000cb2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f9c3 	bl	8001020 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}  
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_DMA_Start_IT+0x20>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e04a      	b.n	8000d70 <HAL_DMA_Start_IT+0xb6>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d13a      	bne.n	8000d62 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2202      	movs	r2, #2
 8000cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f000 f957 	bl	8000fc4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 020e 	orr.w	r2, r2, #14
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e00f      	b.n	8000d50 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 020a 	orr.w	r2, r2, #10
 8000d3e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0204 	bic.w	r2, r2, #4
 8000d4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e005      	b.n	8000d6e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d008      	beq.n	8000d9c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e020      	b.n	8000dde <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 020e 	bic.w	r2, r2, #14
 8000daa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d005      	beq.n	8000e0c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2204      	movs	r2, #4
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e027      	b.n	8000e5c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 020e 	bic.w	r2, r2, #14
 8000e1a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	4798      	blx	r3
    } 
  }
  return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	2204      	movs	r2, #4
 8000e84:	409a      	lsls	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d024      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x72>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01f      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d107      	bne.n	8000eb6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0204 	bic.w	r2, r2, #4
 8000eb4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06a      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ed6:	e065      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	2202      	movs	r2, #2
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02c      	beq.n	8000f42 <HAL_DMA_IRQHandler+0xdc>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d027      	beq.n	8000f42 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10b      	bne.n	8000f18 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 020a 	bic.w	r2, r2, #10
 8000f0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f20:	2102      	movs	r1, #2
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d035      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f40:	e030      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2208      	movs	r2, #8
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d028      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 020e 	bic.w	r2, r2, #14
 8000f6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
    }
  }
}  
 8000fa2:	e7ff      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x13e>
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	d108      	bne.n	8001004 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001002:	e007      	b.n	8001014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <DMA_CalcBaseAndBitshift+0x34>)
 8001030:	4413      	add	r3, r2
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <DMA_CalcBaseAndBitshift+0x38>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <DMA_CalcBaseAndBitshift+0x3c>)
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	bffdfff8 	.word	0xbffdfff8
 8001058:	cccccccd 	.word	0xcccccccd
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	e14e      	b.n	800130e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8140 	beq.w	8001308 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x38>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	6939      	ldr	r1, [r7, #16]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d00b      	beq.n	8001134 <HAL_GPIO_Init+0xd4>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d007      	beq.n	8001134 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001128:	2b11      	cmp	r3, #17
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b12      	cmp	r3, #18
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f003 0201 	and.w	r2, r3, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 809a 	beq.w	8001308 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d4:	4b55      	ldr	r3, [pc, #340]	; (800132c <HAL_GPIO_Init+0x2cc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <HAL_GPIO_Init+0x2cc>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <HAL_GPIO_Init+0x2cc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ec:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001216:	d013      	beq.n	8001240 <HAL_GPIO_Init+0x1e0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a46      	ldr	r2, [pc, #280]	; (8001334 <HAL_GPIO_Init+0x2d4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_Init+0x1dc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a45      	ldr	r2, [pc, #276]	; (8001338 <HAL_GPIO_Init+0x2d8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_Init+0x1d8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a44      	ldr	r2, [pc, #272]	; (800133c <HAL_GPIO_Init+0x2dc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_Init+0x1d4>
 8001230:	2303      	movs	r3, #3
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x1e2>
 8001234:	2305      	movs	r3, #5
 8001236:	e004      	b.n	8001242 <HAL_GPIO_Init+0x1e2>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <HAL_GPIO_Init+0x1e2>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_GPIO_Init+0x1e2>
 8001240:	2300      	movs	r3, #0
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001252:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001284:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ae:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_GPIO_Init+0x2e0>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	f47f aea9 	bne.w	8001070 <HAL_GPIO_Init+0x10>
  }
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800
 800133c:	48000c00 	.word	0x48000c00
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001360:	e002      	b.n	8001368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f806 	bl	80013a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 bef4 	b.w	80021be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 816a 	beq.w	80016ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013e6:	4bb3      	ldr	r3, [pc, #716]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f2:	4bb0      	ldr	r3, [pc, #704]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d159      	bne.n	80014b2 <HAL_RCC_OscConfig+0xf6>
 80013fe:	4bad      	ldr	r3, [pc, #692]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d152      	bne.n	80014b2 <HAL_RCC_OscConfig+0xf6>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001420:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x82>
 8001438:	4b9e      	ldr	r3, [pc, #632]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0xae>
 800143e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001442:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800145a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001466:	4b93      	ldr	r3, [pc, #588]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800146e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001472:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800147e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 810c 	beq.w	80016b8 <HAL_RCC_OscConfig+0x2fc>
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 8106 	bne.w	80016b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f000 be86 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x110>
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e030      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x134>
 80014d6:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e01e      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x15a>
 80014fc:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6c      	ldr	r2, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a69      	ldr	r2, [pc, #420]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e00b      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a66      	ldr	r2, [pc, #408]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800152e:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	f023 020f 	bic.w	r2, r3, #15
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	495d      	ldr	r1, [pc, #372]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800153e:	4313      	orrs	r3, r2
 8001540:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d059      	beq.n	8001600 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fa80 	bl	8000a50 <HAL_GetTick>
 8001550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001556:	f7ff fa7b 	bl	8000a50 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d902      	bls.n	800156c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	f000 be29 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001580:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <HAL_RCC_OscConfig+0x1e2>
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x20e>
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80015d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015d6:	fa92 f2a2 	rbit	r2, r2
 80015da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80015de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f002 021f 	and.w	r2, r2, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ab      	beq.n	8001556 <HAL_RCC_OscConfig+0x19a>
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa26 	bl	8000a50 <HAL_GetTick>
 8001604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160a:	f7ff fa21 	bl	8000a50 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d902      	bls.n	8001620 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	f000 bdcf 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001634:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x296>
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x2c2>
 8001652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001656:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800166e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_RCC_OscConfig+0x2f8>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001682:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001686:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001692:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001696:	fab2 f282 	clz	r2, r2
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	f042 0220 	orr.w	r2, r2, #32
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f002 021f 	and.w	r2, r2, #31
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ab      	bne.n	800160a <HAL_RCC_OscConfig+0x24e>
 80016b2:	e002      	b.n	80016ba <HAL_RCC_OscConfig+0x2fe>
 80016b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 816f 	beq.w	80019a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016ca:	4bd0      	ldr	r3, [pc, #832]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d6:	4bcd      	ldr	r3, [pc, #820]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d16c      	bne.n	80017bc <HAL_RCC_OscConfig+0x400>
 80016e2:	4bca      	ldr	r3, [pc, #808]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d166      	bne.n	80017bc <HAL_RCC_OscConfig+0x400>
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001700:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <HAL_RCC_OscConfig+0x362>
 8001718:	4bbc      	ldr	r3, [pc, #752]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e013      	b.n	8001746 <HAL_RCC_OscConfig+0x38a>
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001736:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001742:	4bb2      	ldr	r3, [pc, #712]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	2202      	movs	r2, #2
 8001748:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800174c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001758:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800175c:	fab2 f282 	clz	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f002 021f 	and.w	r2, r2, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_RCC_OscConfig+0x3cc>
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 bd1b 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4ba0      	ldr	r3, [pc, #640]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	21f8      	movs	r1, #248	; 0xf8
 8001798:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017a0:	fa91 f1a1 	rbit	r1, r1
 80017a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017ac:	fab1 f181 	clz	r1, r1
 80017b0:	b2c9      	uxtb	r1, r1
 80017b2:	408b      	lsls	r3, r1
 80017b4:	4995      	ldr	r1, [pc, #596]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e0f5      	b.n	80019a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8085 	beq.w	80018d2 <HAL_RCC_OscConfig+0x516>
 80017c8:	2301      	movs	r3, #1
 80017ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	2301      	movs	r3, #1
 80017f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f92c 	bl	8000a50 <HAL_GetTick>
 80017f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff f927 	bl	8000a50 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d902      	bls.n	8001814 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	f000 bcd5 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001826:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_RCC_OscConfig+0x488>
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	e013      	b.n	800186c <HAL_RCC_OscConfig+0x4b0>
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800185c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2202      	movs	r2, #2
 800186e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001872:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001876:	fa92 f2a2 	rbit	r2, r2
 800187a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800187e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f042 0220 	orr.w	r2, r2, #32
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f002 021f 	and.w	r2, r2, #31
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0af      	beq.n	80017fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	21f8      	movs	r1, #248	; 0xf8
 80018ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018b6:	fa91 f1a1 	rbit	r1, r1
 80018ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018c2:	fab1 f181 	clz	r1, r1
 80018c6:	b2c9      	uxtb	r1, r1
 80018c8:	408b      	lsls	r3, r1
 80018ca:	4950      	ldr	r1, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e06a      	b.n	80019a8 <HAL_RCC_OscConfig+0x5ec>
 80018d2:	2301      	movs	r3, #1
 80018d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	461a      	mov	r2, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8a7 	bl	8000a50 <HAL_GetTick>
 8001902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff f8a2 	bl	8000a50 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d902      	bls.n	800191e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	f000 bc50 	b.w	80021be <HAL_RCC_OscConfig+0xe02>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x592>
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x5ba>
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001966:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x650>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2202      	movs	r2, #2
 8001978:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800197c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001980:	fa92 f2a2 	rbit	r2, r2
 8001984:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001988:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800198c:	fab2 f282 	clz	r2, r2
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1af      	bne.n	8001908 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80da 	beq.w	8001b6c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d069      	beq.n	8001a96 <HAL_RCC_OscConfig+0x6da>
 80019c2:	2301      	movs	r3, #1
 80019c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x654>)
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	461a      	mov	r2, r3
 80019e8:	2301      	movs	r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff f830 	bl	8000a50 <HAL_GetTick>
 80019f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f4:	e00e      	b.n	8001a14 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff f82b 	bl	8000a50 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d906      	bls.n	8001a14 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e3d9      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	10908120 	.word	0x10908120
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4ba5      	ldr	r3, [pc, #660]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a5e:	2102      	movs	r1, #2
 8001a60:	6019      	str	r1, [r3, #0]
 8001a62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f1a3 	rbit	r1, r3
 8001a6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a70:	6019      	str	r1, [r3, #0]
  return result;
 8001a72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0b0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x63a>
 8001a94:	e06a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7b0>
 8001a96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aac:	601a      	str	r2, [r3, #0]
  return result;
 8001aae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x934>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7fe ffc2 	bl	8000a50 <HAL_GetTick>
 8001acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7fe ffbd 	bl	8000a50 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e36b      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001ae6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b36:	2102      	movs	r1, #2
 8001b38:	6019      	str	r1, [r3, #0]
 8001b3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f1a3 	rbit	r1, r3
 8001b44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b48:	6019      	str	r1, [r3, #0]
  return result;
 8001b4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1b2      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8158 	beq.w	8001e2c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a56      	ldr	r2, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_RCC_OscConfig+0x938>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11a      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x938>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_RCC_OscConfig+0x938>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bcc:	f7fe ff40 	bl	8000a50 <HAL_GetTick>
 8001bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e009      	b.n	8001bea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7fe ff3b 	bl	8000a50 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e2e9      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_OscConfig+0x938>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x852>
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a39      	ldr	r2, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e02f      	b.n	8001c6e <HAL_RCC_OscConfig+0x8b2>
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x876>
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a33      	ldr	r2, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a30      	ldr	r2, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e01d      	b.n	8001c6e <HAL_RCC_OscConfig+0x8b2>
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x89a>
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x8b2>
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d06b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe feea 	bl	8000a50 <HAL_GetTick>
 8001c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fee5 	bl	8000a50 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e291      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001c9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc8:	601a      	str	r2, [r3, #0]
  return result;
 8001cca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d109      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x93c>
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <HAL_RCC_OscConfig+0x930>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x958>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	10908120 	.word	0x10908120
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4bbb      	ldr	r3, [pc, #748]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d18:	2102      	movs	r1, #2
 8001d1a:	6011      	str	r1, [r2, #0]
 8001d1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	fa92 f1a2 	rbit	r1, r2
 8001d26:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d2a:	6011      	str	r1, [r2, #0]
  return result;
 8001d2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d099      	beq.n	8001c82 <HAL_RCC_OscConfig+0x8c6>
 8001d4e:	e063      	b.n	8001e18 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fe7e 	bl	8000a50 <HAL_GetTick>
 8001d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fe79 	bl	8000a50 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e225      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001d72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001da0:	601a      	str	r2, [r3, #0]
  return result;
 8001da2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001da6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xa06>
 8001dbc:	4b90      	ldr	r3, [pc, #576]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	e00d      	b.n	8001dde <HAL_RCC_OscConfig+0xa22>
 8001dc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001de2:	2102      	movs	r1, #2
 8001de4:	6011      	str	r1, [r2, #0]
 8001de6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	fa92 f1a2 	rbit	r1, r2
 8001df0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001df4:	6011      	str	r1, [r2, #0]
  return result;
 8001df6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1a0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b77      	ldr	r3, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	4a76      	ldr	r2, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 81c2 	beq.w	80021bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b71      	ldr	r3, [pc, #452]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	f000 819c 	beq.w	800217e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	f040 8114 	bne.w	800207a <HAL_RCC_OscConfig+0xcbe>
 8001e52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e6a:	601a      	str	r2, [r3, #0]
  return result;
 8001e6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fde2 	bl	8000a50 <HAL_GetTick>
 8001e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fddd 	bl	8000a50 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e18b      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001ea6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ebe:	601a      	str	r2, [r3, #0]
  return result;
 8001ec0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xb24>
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e01b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb5c>
 8001ee0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d19e      	bne.n	8001e92 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	4925      	ldr	r1, [pc, #148]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f88:	601a      	str	r2, [r3, #0]
  return result;
 8001f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fd53 	bl	8000a50 <HAL_GetTick>
 8001faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fd4e 	bl	8000a50 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0fc      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 8001fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fdc:	601a      	str	r2, [r3, #0]
  return result;
 8001fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0xc48>
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e01e      	b.n	800203c <HAL_RCC_OscConfig+0xc80>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0xe0c>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002044:	6011      	str	r1, [r2, #0]
 8002046:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	fa92 f1a2 	rbit	r1, r2
 8002050:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002054:	6011      	str	r1, [r2, #0]
  return result;
 8002056:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	fab2 f282 	clz	r2, r2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f042 0220 	orr.w	r2, r2, #32
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d09b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xbf4>
 8002078:	e0a0      	b.n	80021bc <HAL_RCC_OscConfig+0xe00>
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002092:	601a      	str	r2, [r3, #0]
  return result;
 8002094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002098:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fcce 	bl	8000a50 <HAL_GetTick>
 80020b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fcc9 	bl	8000a50 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e077      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
 80020ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	601a      	str	r2, [r3, #0]
  return result;
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0xd4c>
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_RCC_OscConfig+0xe0c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e01b      	b.n	8002140 <HAL_RCC_OscConfig+0xd84>
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_RCC_OscConfig+0xe0c>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f107 0210 	add.w	r2, r7, #16
 8002144:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	f107 0210 	add.w	r2, r7, #16
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	fa92 f1a2 	rbit	r1, r2
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	6011      	str	r1, [r2, #0]
  return result;
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f042 0220 	orr.w	r2, r2, #32
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f002 021f 	and.w	r2, r2, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d19e      	bne.n	80020ba <HAL_RCC_OscConfig+0xcfe>
 800217c:	e01e      	b.n	80021bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RCC_OscConfig+0xe0c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002194:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b09e      	sub	sp, #120	; 0x78
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e162      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b90      	ldr	r3, [pc, #576]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b8d      	ldr	r3, [pc, #564]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	498b      	ldr	r1, [pc, #556]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e14a      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	497f      	ldr	r1, [pc, #508]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80dc 	beq.w	80023f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d13c      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xf6>
 8002248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_ClockConfig+0xa6>
 800226c:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e00f      	b.n	8002292 <HAL_RCC_ClockConfig+0xc6>
 8002272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	667b      	str	r3, [r7, #100]	; 0x64
 8002280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002284:	663b      	str	r3, [r7, #96]	; 0x60
 8002286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002296:	65ba      	str	r2, [r7, #88]	; 0x58
 8002298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800229a:	fa92 f2a2 	rbit	r2, r2
 800229e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d17b      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0f3      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d13c      	bne.n	8002344 <HAL_RCC_ClockConfig+0x178>
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x128>
 80022ee:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e00f      	b.n	8002314 <HAL_RCC_ClockConfig+0x148>
 80022f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
 8002308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002318:	63ba      	str	r2, [r7, #56]	; 0x38
 800231a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800231c:	fa92 f2a2 	rbit	r2, r2
 8002320:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13a      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b2      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
 8002344:	2302      	movs	r3, #2
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_RCC_ClockConfig+0x1a0>
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e00d      	b.n	8002388 <HAL_RCC_ClockConfig+0x1bc>
 800236c:	2302      	movs	r3, #2
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
 8002378:	2302      	movs	r3, #2
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2202      	movs	r2, #2
 800238a:	61ba      	str	r2, [r7, #24]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	617a      	str	r2, [r7, #20]
  return result;
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f042 0220 	orr.w	r2, r2, #32
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f002 021f 	and.w	r2, r2, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e079      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	491a      	ldr	r1, [pc, #104]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fb42 	bl	8000a50 <HAL_GetTick>
 80023cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fb3e 	bl	8000a50 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e061      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d214      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4906      	ldr	r1, [pc, #24]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_RCC_ClockConfig+0x25c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e040      	b.n	80024aa <HAL_RCC_ClockConfig+0x2de>
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_ClockConfig+0x2e8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	491a      	ldr	r1, [pc, #104]	; (80024b4 <HAL_RCC_ClockConfig+0x2e8>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCC_ClockConfig+0x2e8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4912      	ldr	r1, [pc, #72]	; (80024b4 <HAL_RCC_ClockConfig+0x2e8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800246e:	f000 f829 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002472:	4601      	mov	r1, r0
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247c:	22f0      	movs	r2, #240	; 0xf0
 800247e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	60fa      	str	r2, [r7, #12]
  return result;
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	40d3      	lsrs	r3, r2
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	fa21 f303 	lsr.w	r3, r1, r3
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x2f0>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_RCC_ClockConfig+0x2f4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f8a8 	bl	80005f8 <HAL_InitTick>
  
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3778      	adds	r7, #120	; 0x78
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080064b4 	.word	0x080064b4
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b08b      	sub	sp, #44	; 0x2c
 80024c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x36>
 80024f2:	e03c      	b.n	800256e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f6:	623b      	str	r3, [r7, #32]
      break;
 80024f8:	e03c      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002500:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002504:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	607a      	str	r2, [r7, #4]
  return result;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	40d3      	lsrs	r3, r2
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_RCC_GetSysClockFreq+0xc8>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	220f      	movs	r2, #15
 8002528:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	60fa      	str	r2, [r7, #12]
  return result;
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	40d3      	lsrs	r3, r2
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <HAL_RCC_GetSysClockFreq+0xcc>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc4>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	fbb2 f2f3 	udiv	r2, r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	e004      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	623b      	str	r3, [r7, #32]
      break;
 800256c:	e002      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002570:	623b      	str	r3, [r7, #32]
      break;
 8002572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002574:	6a3b      	ldr	r3, [r7, #32]
}
 8002576:	4618      	mov	r0, r3
 8002578:	372c      	adds	r7, #44	; 0x2c
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	080064cc 	.word	0x080064cc
 8002590:	080064dc 	.word	0x080064dc
 8002594:	003d0900 	.word	0x003d0900

08002598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_RCC_GetHCLKFreq+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025b6:	f7ff ffef 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025ba:	4601      	mov	r1, r0
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	603a      	str	r2, [r7, #0]
  return result;
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	40d3      	lsrs	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080064c4 	.word	0x080064c4

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025fa:	f7ff ffcd 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025fe:	4601      	mov	r1, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002608:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800260c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	603a      	str	r2, [r7, #0]
  return result;
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	fab2 f282 	clz	r2, r2
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	40d3      	lsrs	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	080064c4 	.word	0x080064c4

08002638 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	220f      	movs	r2, #15
 8002646:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCC_GetClockConfig+0x60>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0207 	and.w	r2, r3, #7
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40022000 	.word	0x40022000

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b092      	sub	sp, #72	; 0x48
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80d0 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c0:	4b8e      	ldr	r3, [pc, #568]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10e      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a8a      	ldr	r2, [pc, #552]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	61d3      	str	r3, [r2, #28]
 80026d8:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a81      	ldr	r2, [pc, #516]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe f9a5 	bl	8000a50 <HAL_GetTick>
 8002706:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe f9a1 	bl	8000a50 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0ea      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b78      	ldr	r3, [pc, #480]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002728:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d07d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002742:	429a      	cmp	r2, r3
 8002744:	d076      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002746:	4b6d      	ldr	r3, [pc, #436]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	2301      	movs	r3, #1
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d045      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe f952 	bl	8000a50 <HAL_GetTick>
 80027ac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe f94e 	bl	8000a50 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e095      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80027c6:	2302      	movs	r3, #2
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	2302      	movs	r3, #2
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	61fb      	str	r3, [r7, #28]
  return result;
 80027de:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d102      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	e007      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2202      	movs	r2, #2
 800280c:	613a      	str	r2, [r7, #16]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	60fa      	str	r2, [r7, #12]
  return result;
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0bd      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	492e      	ldr	r1, [pc, #184]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002842:	4313      	orrs	r3, r2
 8002844:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002866:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4922      	ldr	r1, [pc, #136]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f023 0210 	bic.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	491a      	ldr	r1, [pc, #104]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4913      	ldr	r1, [pc, #76]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	490b      	ldr	r1, [pc, #44]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3748      	adds	r7, #72	; 0x48
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	10908100 	.word	0x10908100

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e01d      	b.n	8002956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fd ff70 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fa34 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_TIM_Base_Start_IT+0x50>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d00b      	beq.n	80029a2 <HAL_TIM_Base_Start_IT+0x42>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	00010007 	.word	0x00010007

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9be 	bl	8002d78 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9b0 	bl	8002d64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9c1 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f994 	bl	8002d78 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f986 	bl	8002d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f997 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f96a 	bl	8002d78 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f95c 	bl	8002d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f96d 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f940 	bl	8002d78 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f932 	bl	8002d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f943 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fd0c 	bl	8000550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fab2 	bl	80030c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 faa5 	bl	80030dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d10e      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8f1 	bl	8002da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d10e      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d107      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0220 	mvn.w	r2, #32
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa65 	bl	80030b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_ConfigClockSource+0x18>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0a8      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x16a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d067      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x124>
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d80b      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x70>
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d073      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x144>
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d802      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x66>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d06f      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c56:	e078      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d06c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x144>
 8002c5c:	2b30      	cmp	r3, #48	; 0x30
 8002c5e:	d06a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002c60:	e073      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002c62:	2b70      	cmp	r3, #112	; 0x70
 8002c64:	d00d      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x90>
 8002c66:	2b70      	cmp	r3, #112	; 0x70
 8002c68:	d804      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x82>
 8002c6a:	2b50      	cmp	r3, #80	; 0x50
 8002c6c:	d033      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xe4>
 8002c6e:	2b60      	cmp	r3, #96	; 0x60
 8002c70:	d041      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002c72:	e06a      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d066      	beq.n	8002d48 <HAL_TIM_ConfigClockSource+0x156>
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7e:	d017      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002c80:	e063      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f000 f981 	bl	8002f98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ca4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
      break;
 8002cae:	e04c      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f000 f96a 	bl	8002f98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e039      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 f8de 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	; 0x50
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f937 	bl	8002f62 <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e029      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f000 f8fd 	bl	8002f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	; 0x60
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f927 	bl	8002f62 <TIM_ITRx_SetConfig>
      break;
 8002d14:	e019      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8be 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f917 	bl	8002f62 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e009      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 f90e 	bl	8002f62 <TIM_ITRx_SetConfig>
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002d48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a32      	ldr	r2, [pc, #200]	; (8002e90 <TIM_Base_SetConfig+0xdc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0x28>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0x28>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <TIM_Base_SetConfig+0xe0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <TIM_Base_SetConfig+0xdc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <TIM_Base_SetConfig+0x6a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d00f      	beq.n	8002e1e <TIM_Base_SetConfig+0x6a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <TIM_Base_SetConfig+0xe0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0x6a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <TIM_Base_SetConfig+0xe4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0x6a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <TIM_Base_SetConfig+0xe8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0x6a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <TIM_Base_SetConfig+0xec>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <TIM_Base_SetConfig+0xdc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0xc0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <TIM_Base_SetConfig+0xe4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0xc0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <TIM_Base_SetConfig+0xe8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0xc0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <TIM_Base_SetConfig+0xec>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	615a      	str	r2, [r3, #20]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40014400 	.word	0x40014400
 8002ea0:	40014800 	.word	0x40014800

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f043 0307 	orr.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	021a      	lsls	r2, r3, #8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e054      	b.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d009      	beq.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40014000 	.word	0x40014000

080030b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e040      	b.n	8003184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fbd2 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 faf2 	bl	8003718 <UART_SetConfig>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fc68 	bl	8003a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800316a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fcef 	bl	8003b60 <UART_CheckIdleState>
 8003182:	4603      	mov	r3, r0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d164      	bne.n	800326c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_UART_Transmit_DMA+0x22>
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e05d      	b.n	800326e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Transmit_DMA+0x34>
 80031bc:	2302      	movs	r3, #2
 80031be:	e056      	b.n	800326e <HAL_UART_Transmit_DMA+0xe2>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2221      	movs	r2, #33	; 0x21
 80031e8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02a      	beq.n	8003248 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <HAL_UART_Transmit_DMA+0xec>)
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_UART_Transmit_DMA+0xf0>)
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_UART_Transmit_DMA+0xf4>)
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320e:	2200      	movs	r2, #0
 8003210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	4619      	mov	r1, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3328      	adds	r3, #40	; 0x28
 8003222:	461a      	mov	r2, r3
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	f7fd fd48 	bl	8000cba <HAL_DMA_Start_IT>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2210      	movs	r2, #16
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e012      	b.n	800326e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2240      	movs	r2, #64	; 0x40
 800324e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003266:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	08003d4b 	.word	0x08003d4b
 800327c:	08003d99 	.word	0x08003d99
 8003280:	08003e33 	.word	0x08003e33

08003284 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003296:	2b20      	cmp	r3, #32
 8003298:	d16c      	bne.n	8003374 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_UART_Receive_DMA+0x22>
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e065      	b.n	8003376 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Receive_DMA+0x34>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e05e      	b.n	8003376 <HAL_UART_Receive_DMA+0xf2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2222      	movs	r2, #34	; 0x22
 80032d8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02a      	beq.n	8003338 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	4a26      	ldr	r2, [pc, #152]	; (8003380 <HAL_UART_Receive_DMA+0xfc>)
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <HAL_UART_Receive_DMA+0x100>)
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f6:	4a24      	ldr	r2, [pc, #144]	; (8003388 <HAL_UART_Receive_DMA+0x104>)
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	2200      	movs	r2, #0
 8003300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	4619      	mov	r1, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	461a      	mov	r2, r3
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	f7fd fcd0 	bl	8000cba <HAL_DMA_Start_IT>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2210      	movs	r2, #16
 8003324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01e      	b.n	8003376 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	08003db5 	.word	0x08003db5
 8003384:	08003e17 	.word	0x08003e17
 8003388:	08003e33 	.word	0x08003e33

0800338c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d124      	bne.n	800340c <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d018      	beq.n	800340c <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	2200      	movs	r2, #0
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fcc6 	bl	8000d78 <HAL_DMA_Abort>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fdd8 	bl	8000fac <HAL_DMA_GetError>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d104      	bne.n	800340c <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2210      	movs	r2, #16
 8003406:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e013      	b.n	8003434 <HAL_UART_AbortReceive+0xa8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	220f      	movs	r2, #15
 800341a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0208 	orr.w	r2, r2, #8
 800342a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d113      	bne.n	8003494 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8114 	beq.w	80036b2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      }
      return;
 8003492:	e10e      	b.n	80036b2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80d6 	beq.w	8003648 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80cb 	beq.w	8003648 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <HAL_UART_IRQHandler+0x9e>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_UART_IRQHandler+0xc6>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2202      	movs	r2, #2
 80034f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_UART_IRQHandler+0xee>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2204      	movs	r2, #4
 800351c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2208      	movs	r2, #8
 800354e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003554:	f043 0208 	orr.w	r2, r3, #8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <HAL_UART_IRQHandler+0x14a>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8093 	beq.w	80036b6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d004      	beq.n	80035d2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d031      	beq.n	8003636 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fb99 	bl	8003d0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d123      	bne.n	800362e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d013      	beq.n	8003626 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	4a30      	ldr	r2, [pc, #192]	; (80036c4 <HAL_UART_IRQHandler+0x288>)
 8003604:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fbed 	bl	8000dea <HAL_DMA_Abort_IT>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003620:	4610      	mov	r0, r2
 8003622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e00e      	b.n	8003644 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f86c 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e00a      	b.n	8003644 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f868 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e006      	b.n	8003644 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f864 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003642:	e038      	b.n	80036b6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	bf00      	nop
    return;
 8003646:	e036      	b.n	80036b6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_UART_IRQHandler+0x232>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fc4e 	bl	8003f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800366c:	e026      	b.n	80036bc <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	2b00      	cmp	r3, #0
 8003688:	d017      	beq.n	80036ba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
    }
    return;
 8003692:	e012      	b.n	80036ba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <HAL_UART_IRQHandler+0x280>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fc14 	bl	8003ed6 <UART_EndTransmit_IT>
    return;
 80036ae:	bf00      	nop
 80036b0:	e004      	b.n	80036bc <HAL_UART_IRQHandler+0x280>
      return;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <HAL_UART_IRQHandler+0x280>
    return;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <HAL_UART_IRQHandler+0x280>
    return;
 80036ba:	bf00      	nop
  }

}
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08003eab 	.word	0x08003eab

080036c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4ba2      	ldr	r3, [pc, #648]	; (80039d0 <UART_SetConfig+0x2b8>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	430b      	orrs	r3, r1
 8003752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a90      	ldr	r2, [pc, #576]	; (80039d4 <UART_SetConfig+0x2bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d121      	bne.n	80037dc <UART_SetConfig+0xc4>
 8003798:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <UART_SetConfig+0x2c0>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d817      	bhi.n	80037d4 <UART_SetConfig+0xbc>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0x94>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	080037cf 	.word	0x080037cf
 80037b8:	080037c3 	.word	0x080037c3
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e01e      	b.n	8003800 <UART_SetConfig+0xe8>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e01b      	b.n	8003800 <UART_SetConfig+0xe8>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e018      	b.n	8003800 <UART_SetConfig+0xe8>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e015      	b.n	8003800 <UART_SetConfig+0xe8>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	bf00      	nop
 80037da:	e011      	b.n	8003800 <UART_SetConfig+0xe8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <UART_SetConfig+0x2c4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d102      	bne.n	80037ec <UART_SetConfig+0xd4>
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e009      	b.n	8003800 <UART_SetConfig+0xe8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7b      	ldr	r2, [pc, #492]	; (80039e0 <UART_SetConfig+0x2c8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d102      	bne.n	80037fc <UART_SetConfig+0xe4>
 80037f6:	2300      	movs	r3, #0
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e001      	b.n	8003800 <UART_SetConfig+0xe8>
 80037fc:	2310      	movs	r3, #16
 80037fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003808:	f040 8082 	bne.w	8003910 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	2b08      	cmp	r3, #8
 8003810:	d85e      	bhi.n	80038d0 <UART_SetConfig+0x1b8>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x100>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	0800383d 	.word	0x0800383d
 800381c:	0800385d 	.word	0x0800385d
 8003820:	0800387d 	.word	0x0800387d
 8003824:	080038d1 	.word	0x080038d1
 8003828:	08003899 	.word	0x08003899
 800382c:	080038d1 	.word	0x080038d1
 8003830:	080038d1 	.word	0x080038d1
 8003834:	080038d1 	.word	0x080038d1
 8003838:	080038b9 	.word	0x080038b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7fe feb8 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003840:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	005a      	lsls	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	61bb      	str	r3, [r7, #24]
        break;
 800385a:	e03c      	b.n	80038d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe feca 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8003860:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	005a      	lsls	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	441a      	add	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	b29b      	uxth	r3, r3
 8003878:	61bb      	str	r3, [r7, #24]
        break;
 800387a:	e02c      	b.n	80038d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003886:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6852      	ldr	r2, [r2, #4]
 800388e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	61bb      	str	r3, [r7, #24]
        break;
 8003896:	e01e      	b.n	80038d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003898:	f7fe fe14 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800389c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	005a      	lsls	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	61bb      	str	r3, [r7, #24]
        break;
 80038b6:	e00e      	b.n	80038d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	61bb      	str	r3, [r7, #24]
        break;
 80038ce:	e002      	b.n	80038d6 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
        break;
 80038d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d916      	bls.n	800390a <UART_SetConfig+0x1f2>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e2:	d212      	bcs.n	800390a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	897b      	ldrh	r3, [r7, #10]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	897a      	ldrh	r2, [r7, #10]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e07d      	b.n	8003a06 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
 800390e:	e07a      	b.n	8003a06 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d866      	bhi.n	80039e4 <UART_SetConfig+0x2cc>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x204>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003941 	.word	0x08003941
 8003920:	0800395f 	.word	0x0800395f
 8003924:	0800397d 	.word	0x0800397d
 8003928:	080039e5 	.word	0x080039e5
 800392c:	08003999 	.word	0x08003999
 8003930:	080039e5 	.word	0x080039e5
 8003934:	080039e5 	.word	0x080039e5
 8003938:	080039e5 	.word	0x080039e5
 800393c:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7fe fe36 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003944:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085a      	lsrs	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	b29b      	uxth	r3, r3
 800395a:	61bb      	str	r3, [r7, #24]
        break;
 800395c:	e045      	b.n	80039ea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395e:	f7fe fe49 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8003962:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085a      	lsrs	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	61bb      	str	r3, [r7, #24]
        break;
 800397a:	e036      	b.n	80039ea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003986:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	61bb      	str	r3, [r7, #24]
        break;
 8003996:	e028      	b.n	80039ea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003998:	f7fe fd94 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800399c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e019      	b.n	80039ea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	61bb      	str	r3, [r7, #24]
        break;
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x2d2>
 80039ce:	bf00      	nop
 80039d0:	efff69f3 	.word	0xefff69f3
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400
 80039e0:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
        break;
 80039e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d908      	bls.n	8003a02 <UART_SetConfig+0x2ea>
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d204      	bcs.n	8003a02 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	e001      	b.n	8003a06 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d10a      	bne.n	8003b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fc ff6f 	bl	8000a50 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d10e      	bne.n	8003ba0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f82a 	bl	8003bea <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e020      	b.n	8003be2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d10e      	bne.n	8003bcc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f814 	bl	8003bea <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e00a      	b.n	8003be2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	e05d      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d059      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fc ff24 	bl	8000a50 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11b      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e042      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02b      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d123      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d092      	beq.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cf6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d20:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d014      	beq.n	8003d8a <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d76:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d86:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d88:	e002      	b.n	8003d90 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fc9c 	bl	80036c8 <HAL_UART_TxCpltCallback>
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f002 fa72 	bl	8006290 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d01e      	beq.n	8003e08 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e00:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff fc67 	bl	80036dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff fc63 	bl	80036f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d109      	bne.n	8003e6e <UART_DMAError+0x3c>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b21      	cmp	r3, #33	; 0x21
 8003e5e:	d106      	bne.n	8003e6e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f7ff ff39 	bl	8003ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d109      	bne.n	8003e90 <UART_DMAError+0x5e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b22      	cmp	r3, #34	; 0x22
 8003e80:	d106      	bne.n	8003e90 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	f7ff ff3d 	bl	8003d0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f7ff fc31 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fc1b 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fbe4 	bl	80036c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f2e:	2b84      	cmp	r3, #132	; 0x84
 8003f30:	d005      	beq.n	8003f3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3303      	adds	r3, #3
 8003f3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f52:	f3ef 8305 	mrs	r3, IPSR
 8003f56:	607b      	str	r3, [r7, #4]
  return(result);
 8003f58:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f74:	f001 f802 	bl	8004f7c <vTaskStartScheduler>
  
  return osOK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f80:	b089      	sub	sp, #36	; 0x24
 8003f82:	af04      	add	r7, sp, #16
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <osThreadCreate+0x54>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01c      	beq.n	8003fd2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685c      	ldr	r4, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681d      	ldr	r5, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691e      	ldr	r6, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ffb6 	bl	8003f1c <makeFreeRtosPriority>
 8003fb0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	9100      	str	r1, [sp, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 fe1d 	bl	8004c06 <xTaskCreateStatic>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e01c      	b.n	800400c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685c      	ldr	r4, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fde:	b29e      	uxth	r6, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff98 	bl	8003f1c <makeFreeRtosPriority>
 8003fec:	4602      	mov	r2, r0
 8003fee:	f107 030c 	add.w	r3, r7, #12
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	9200      	str	r2, [sp, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f000 fe5b 	bl	8004cb8 <xTaskCreate>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d001      	beq.n	800400c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800400c:	68fb      	ldr	r3, [r7, #12]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004016 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <osDelay+0x16>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	e000      	b.n	800402e <osDelay+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ff70 	bl	8004f14 <vTaskDelay>
  
  return osOK;
 8004034:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800403e:	b590      	push	{r4, r7, lr}
 8004040:	b085      	sub	sp, #20
 8004042:	af02      	add	r7, sp, #8
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d012      	beq.n	8004076 <osMessageCreate+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68dc      	ldr	r4, [r3, #12]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4623      	mov	r3, r4
 800406e:	f000 fb15 	bl	800469c <xQueueGenericCreateStatic>
 8004072:	4603      	mov	r3, r0
 8004074:	e008      	b.n	8004088 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	4619      	mov	r1, r3
 8004082:	f000 fb7d 	bl	8004780 <xQueueGenericCreate>
 8004086:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b08b      	sub	sp, #44	; 0x2c
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	617b      	str	r3, [r7, #20]
    return event;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	461c      	mov	r4, r3
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040be:	e054      	b.n	800416a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d103      	bne.n	80040d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	e009      	b.n	80040ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <osMessageGet+0x5c>
      ticks = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80040ec:	f7ff ff2e 	bl	8003f4c <inHandlerMode>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01c      	beq.n	8004130 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80040f6:	f107 0220 	add.w	r2, r7, #32
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f000 fc74 	bl	80049f0 <xQueueReceiveFromISR>
 8004108:	4603      	mov	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800410e:	2310      	movs	r3, #16
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e001      	b.n	8004118 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01d      	beq.n	800415a <osMessageGet+0xca>
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <osMessageGet+0xe4>)
 8004120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	e014      	b.n	800415a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004130:	f107 0314 	add.w	r3, r7, #20
 8004134:	3304      	adds	r3, #4
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	4619      	mov	r1, r3
 800413a:	68b8      	ldr	r0, [r7, #8]
 800413c:	f000 fb7c 	bl	8004838 <xQueueReceive>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004146:	2310      	movs	r3, #16
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e006      	b.n	800415a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <osMessageGet+0xc6>
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <osMessageGet+0xc8>
 8004156:	2340      	movs	r3, #64	; 0x40
 8004158:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	461c      	mov	r4, r3
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	372c      	adds	r7, #44	; 0x2c
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	bf00      	nop
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b090      	sub	sp, #64	; 0x40
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
 80041aa:	e7fe      	b.n	80041aa <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <xEventGroupWaitBits+0x52>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e7fe      	b.n	80041c8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <xEventGroupWaitBits+0x6c>
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e7fe      	b.n	80041e2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041e4:	f001 fb62 	bl	80058ac <xTaskGetSchedulerState>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <xEventGroupWaitBits+0x7c>
 80041ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <xEventGroupWaitBits+0x80>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <xEventGroupWaitBits+0x82>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <xEventGroupWaitBits+0x9a>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e7fe      	b.n	8004210 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8004212:	f000 ff11 	bl	8005038 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004222:	f000 f8fc 	bl	800441e <prvTestWaitCondition>
 8004226:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004232:	2300      	movs	r3, #0
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d028      	beq.n	800428e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	43db      	mvns	r3, r3
 8004244:	401a      	ands	r2, r3
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e020      	b.n	800428e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800424c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 800425a:	e018      	b.n	800428e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	1d18      	adds	r0, r3, #4
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	4313      	orrs	r3, r2
 8004282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004284:	4619      	mov	r1, r3
 8004286:	f001 f8bb 	bl	8005400 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800428e:	f000 fee1 	bl	8005054 <xTaskResumeAll>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	d031      	beq.n	80042fe <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <xEventGroupWaitBits+0x190>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80042b0:	f001 fb1a 	bl	80058e8 <uxTaskResetEventItemValue>
 80042b4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11a      	bne.n	80042f6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80042c0:	f001 fcb4 	bl	8005c2c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042d0:	f000 f8a5 	bl	800441e <prvTestWaitCondition>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	401a      	ands	r2, r3
 80042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80042f2:	f001 fcc9 	bl	8005c88 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004300:	4618      	mov	r0, r3
 8004302:	3740      	adds	r7, #64	; 0x40
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08e      	sub	sp, #56	; 0x38
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004316:	2300      	movs	r3, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <xEventGroupSetBits+0x30>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	e7fe      	b.n	800433a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <xEventGroupSetBits+0x4e>
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e7fe      	b.n	8004358 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	3304      	adds	r3, #4
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	3308      	adds	r3, #8
 8004364:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004366:	f000 fe67 	bl	8005038 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	431a      	orrs	r2, r3
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800437c:	e03c      	b.n	80043f8 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004394:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800439c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b8:	e008      	b.n	80043cc <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d101      	bne.n	80043cc <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ec:	4619      	mov	r1, r3
 80043ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043f0:	f001 f8a2 	bl	8005538 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80043f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1be      	bne.n	800437e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	43db      	mvns	r3, r3
 8004408:	401a      	ands	r2, r3
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800440e:	f000 fe21 	bl	8005054 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	681b      	ldr	r3, [r3, #0]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3738      	adds	r7, #56	; 0x38
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d107      	bne.n	8004444 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e007      	b.n	8004454 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	d101      	bne.n	8004454 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004454:	697b      	ldr	r3, [r7, #20]
}
 8004456:	4618      	mov	r0, r3
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f103 0208 	add.w	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0208 	add.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 0208 	add.w	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d103      	bne.n	8004524 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e00c      	b.n	800453e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3308      	adds	r3, #8
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e002      	b.n	8004532 <vListInsert+0x2e>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	d2f6      	bcs.n	800452c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6852      	ldr	r2, [r2, #4]
 8004596:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d103      	bne.n	80045aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <xQueueGenericReset+0x28>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	e7fe      	b.n	80045f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80045f4:	f001 fb1a 	bl	8005c2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	441a      	add	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	3b01      	subs	r3, #1
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	22ff      	movs	r2, #255	; 0xff
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d114      	bne.n	8004674 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3310      	adds	r3, #16
 8004656:	4618      	mov	r0, r3
 8004658:	f000 ff0c 	bl	8005474 <xTaskRemoveFromEventList>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <xQueueGenericReset+0xcc>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	e009      	b.n	8004688 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3310      	adds	r3, #16
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fef2 	bl	8004462 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3324      	adds	r3, #36	; 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff feed 	bl	8004462 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004688:	f001 fafe 	bl	8005c88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800468c:	2301      	movs	r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <xQueueGenericCreateStatic+0x28>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c2:	e7fe      	b.n	80046c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <xQueueGenericCreateStatic+0x42>
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <xQueueGenericCreateStatic+0x4e>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <xQueueGenericCreateStatic+0x52>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <xQueueGenericCreateStatic+0x54>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <xQueueGenericCreateStatic+0x6c>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	e7fe      	b.n	8004706 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <xQueueGenericCreateStatic+0x78>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <xQueueGenericCreateStatic+0x7c>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <xQueueGenericCreateStatic+0x7e>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <xQueueGenericCreateStatic+0x96>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e7fe      	b.n	8004730 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004732:	2348      	movs	r3, #72	; 0x48
 8004734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b48      	cmp	r3, #72	; 0x48
 800473a:	d009      	beq.n	8004750 <xQueueGenericCreateStatic+0xb4>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e7fe      	b.n	800474e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004762:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f842 	bl	80047fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004778:	4618      	mov	r0, r3
 800477a:	3730      	adds	r7, #48	; 0x30
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <xQueueGenericCreate+0x28>
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e7fe      	b.n	80047a6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e004      	b.n	80047be <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3348      	adds	r3, #72	; 0x48
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fb4c 	bl	8005e60 <pvPortMalloc>
 80047c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00f      	beq.n	80047f0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3348      	adds	r3, #72	; 0x48
 80047d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047de:	79fa      	ldrb	r2, [r7, #7]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f805 	bl	80047fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047f0:	69bb      	ldr	r3, [r7, #24]
	}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e002      	b.n	800481c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004828:	2101      	movs	r1, #1
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f7ff fece 	bl	80045cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	; 0x30
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <xQueueReceive+0x2e>
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	e7fe      	b.n	8004864 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <xQueueReceive+0x3c>
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <xQueueReceive+0x40>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <xQueueReceive+0x42>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <xQueueReceive+0x5a>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e7fe      	b.n	8004890 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004892:	f001 f80b 	bl	80058ac <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <xQueueReceive+0x6a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <xQueueReceive+0x6e>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueReceive+0x70>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <xQueueReceive+0x88>
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e7fe      	b.n	80048be <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048c0:	f001 f9b4 	bl	8005c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01f      	beq.n	8004910 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d4:	f000 f909 	bl	8004aea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	3310      	adds	r3, #16
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fdc1 	bl	8005474 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048f8:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <xQueueReceive+0x1b4>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004908:	f001 f9be 	bl	8005c88 <vPortExitCritical>
				return pdPASS;
 800490c:	2301      	movs	r3, #1
 800490e:	e069      	b.n	80049e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004916:	f001 f9b7 	bl	8005c88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800491a:	2300      	movs	r3, #0
 800491c:	e062      	b.n	80049e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004924:	f107 0310 	add.w	r3, r7, #16
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe65 	bl	80055f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004932:	f001 f9a9 	bl	8005c88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004936:	f000 fb7f 	bl	8005038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800493a:	f001 f977 	bl	8005c2c <vPortEnterCritical>
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004944:	b25b      	sxtb	r3, r3
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d103      	bne.n	8004954 <xQueueReceive+0x11c>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495a:	b25b      	sxtb	r3, r3
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d103      	bne.n	800496a <xQueueReceive+0x132>
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800496a:	f001 f98d 	bl	8005c88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800496e:	1d3a      	adds	r2, r7, #4
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fe54 	bl	8005624 <xTaskCheckForTimeOut>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d123      	bne.n	80049ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004984:	f000 f929 	bl	8004bda <prvIsQueueEmpty>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d017      	beq.n	80049be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	3324      	adds	r3, #36	; 0x24
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fd0e 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800499c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499e:	f000 f8ca 	bl	8004b36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049a2:	f000 fb57 	bl	8005054 <xTaskResumeAll>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d189      	bne.n	80048c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <xQueueReceive+0x1b4>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	e780      	b.n	80048c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c0:	f000 f8b9 	bl	8004b36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049c4:	f000 fb46 	bl	8005054 <xTaskResumeAll>
 80049c8:	e77a      	b.n	80048c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f000 f8b3 	bl	8004b36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049d0:	f000 fb40 	bl	8005054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d6:	f000 f900 	bl	8004bda <prvIsQueueEmpty>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f43f af6f 	beq.w	80048c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3730      	adds	r7, #48	; 0x30
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	; 0x38
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <xQueueReceiveFromISR+0x2a>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	e7fe      	b.n	8004a18 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <xQueueReceiveFromISR+0x38>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <xQueueReceiveFromISR+0x3c>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <xQueueReceiveFromISR+0x3e>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <xQueueReceiveFromISR+0x56>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e7fe      	b.n	8004a44 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a46:	f001 f9cd 	bl	8005de4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	61ba      	str	r2, [r7, #24]
 8004a60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02f      	beq.n	8004ad2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a80:	f000 f833 	bl	8004aea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d112      	bne.n	8004abc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fce6 	bl	8005474 <xTaskRemoveFromEventList>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e007      	b.n	8004acc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	b25a      	sxtb	r2, r3
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004acc:	2301      	movs	r3, #1
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad0:	e001      	b.n	8004ad6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3738      	adds	r7, #56	; 0x38
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d018      	beq.n	8004b2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	441a      	add	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d303      	bcc.n	8004b1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68d9      	ldr	r1, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	461a      	mov	r2, r3
 8004b28:	6838      	ldr	r0, [r7, #0]
 8004b2a:	f001 fc4b 	bl	80063c4 <memcpy>
	}
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b3e:	f001 f875 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b4a:	e011      	b.n	8004b70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fc8b 	bl	8005474 <xTaskRemoveFromEventList>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b64:	f000 fdbe 	bl	80056e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dce9      	bgt.n	8004b4c <prvUnlockQueue+0x16>
 8004b78:	e000      	b.n	8004b7c <prvUnlockQueue+0x46>
					break;
 8004b7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	22ff      	movs	r2, #255	; 0xff
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b84:	f001 f880 	bl	8005c88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b88:	f001 f850 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b94:	e011      	b.n	8004bba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fc66 	bl	8005474 <xTaskRemoveFromEventList>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bae:	f000 fd99 	bl	80056e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bb2:	7bbb      	ldrb	r3, [r7, #14]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	dce9      	bgt.n	8004b96 <prvUnlockQueue+0x60>
 8004bc2:	e000      	b.n	8004bc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bce:	f001 f85b 	bl	8005c88 <vPortExitCritical>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be2:	f001 f823 	bl	8005c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e001      	b.n	8004bf8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bf8:	f001 f846 	bl	8005c88 <vPortExitCritical>

	return xReturn;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b08e      	sub	sp, #56	; 0x38
 8004c0a:	af04      	add	r7, sp, #16
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <xTaskCreateStatic+0x28>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	623b      	str	r3, [r7, #32]
 8004c2c:	e7fe      	b.n	8004c2c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <xTaskCreateStatic+0x42>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e7fe      	b.n	8004c46 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c48:	2354      	movs	r3, #84	; 0x54
 8004c4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b54      	cmp	r3, #84	; 0x54
 8004c50:	d009      	beq.n	8004c66 <xTaskCreateStatic+0x60>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e7fe      	b.n	8004c64 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01e      	beq.n	8004caa <xTaskCreateStatic+0xa4>
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01b      	beq.n	8004caa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c84:	2300      	movs	r3, #0
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f850 	bl	8004d42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ca4:	f000 f8cc 	bl	8004e40 <prvAddNewTaskToReadyList>
 8004ca8:	e001      	b.n	8004cae <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cae:	697b      	ldr	r3, [r7, #20]
	}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3728      	adds	r7, #40	; 0x28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af04      	add	r7, sp, #16
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f8c7 	bl	8005e60 <pvPortMalloc>
 8004cd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004cda:	2054      	movs	r0, #84	; 0x54
 8004cdc:	f001 f8c0 	bl	8005e60 <pvPortMalloc>
 8004ce0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
 8004cee:	e005      	b.n	8004cfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cf0:	6978      	ldr	r0, [r7, #20]
 8004cf2:	f001 f977 	bl	8005fe4 <vPortFree>
 8004cf6:	e001      	b.n	8004cfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f80e 	bl	8004d42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d26:	69f8      	ldr	r0, [r7, #28]
 8004d28:	f000 f88a 	bl	8004e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e002      	b.n	8004d38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d38:	69bb      	ldr	r3, [r7, #24]
	}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b088      	sub	sp, #32
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <prvInitialiseNewTask+0x46>
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e7fe      	b.n	8004d86 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e012      	b.n	8004db4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	7819      	ldrb	r1, [r3, #0]
 8004d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3334      	adds	r3, #52	; 0x34
 8004d9e:	460a      	mov	r2, r1
 8004da0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d9e9      	bls.n	8004d8e <prvInitialiseNewTask+0x4c>
 8004dba:	e000      	b.n	8004dbe <prvInitialiseNewTask+0x7c>
		{
			break;
 8004dbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2b06      	cmp	r3, #6
 8004dca:	d901      	bls.n	8004dd0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dcc:	2306      	movs	r3, #6
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2200      	movs	r2, #0
 8004de0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	3304      	adds	r3, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fb5b 	bl	80044a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	3318      	adds	r3, #24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fb56 	bl	80044a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	f1c3 0207 	rsb	r2, r3, #7
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2200      	movs	r2, #0
 8004e10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	69b8      	ldr	r0, [r7, #24]
 8004e20:	f000 fde0 	bl	80059e4 <pxPortInitialiseStack>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e36:	bf00      	nop
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e48:	f000 fef0 	bl	8005c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d110      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e6c:	f000 fc5e 	bl	800572c <prvInitialiseTaskLists>
 8004e70:	e00d      	b.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e72:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <prvAddNewTaskToReadyList+0xc0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d802      	bhi.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <prvAddNewTaskToReadyList+0xc4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <prvAddNewTaskToReadyList+0xc4>)
 8004e96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <prvAddNewTaskToReadyList+0xc8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <prvAddNewTaskToReadyList+0xc8>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <prvAddNewTaskToReadyList+0xcc>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7ff fafb 	bl	80044bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec6:	f000 fedf 	bl	8005c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <prvAddNewTaskToReadyList+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvAddNewTaskToReadyList+0xd0>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200003e8 	.word	0x200003e8
 8004efc:	200002e8 	.word	0x200002e8
 8004f00:	200003f4 	.word	0x200003f4
 8004f04:	20000404 	.word	0x20000404
 8004f08:	200003f0 	.word	0x200003f0
 8004f0c:	200002ec 	.word	0x200002ec
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <vTaskDelay+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <vTaskDelay+0x2e>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	e7fe      	b.n	8004f40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004f42:	f000 f879 	bl	8005038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f46:	2100      	movs	r1, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fce5 	bl	8005918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f4e:	f000 f881 	bl	8005054 <xTaskResumeAll>
 8004f52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <vTaskDelay+0x64>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000410 	.word	0x20000410
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f8a:	463a      	mov	r2, r7
 8004f8c:	1d39      	adds	r1, r7, #4
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb f942 	bl	800021c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	9202      	str	r2, [sp, #8]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	460a      	mov	r2, r1
 8004faa:	491d      	ldr	r1, [pc, #116]	; (8005020 <vTaskStartScheduler+0xa4>)
 8004fac:	481d      	ldr	r0, [pc, #116]	; (8005024 <vTaskStartScheduler+0xa8>)
 8004fae:	f7ff fe2a 	bl	8004c06 <xTaskCreateStatic>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <vTaskStartScheduler+0xac>)
 8004fb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <vTaskStartScheduler+0xac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e001      	b.n	8004fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d115      	bne.n	8004ffc <vTaskStartScheduler+0x80>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <vTaskStartScheduler+0xb0>)
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <vTaskStartScheduler+0xb4>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <vTaskStartScheduler+0xb8>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ff6:	f000 fd7b 	bl	8005af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ffa:	e00d      	b.n	8005018 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d109      	bne.n	8005018 <vTaskStartScheduler+0x9c>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e7fe      	b.n	8005016 <vTaskStartScheduler+0x9a>
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	08006494 	.word	0x08006494
 8005024:	080056fd 	.word	0x080056fd
 8005028:	2000040c 	.word	0x2000040c
 800502c:	20000408 	.word	0x20000408
 8005030:	200003f4 	.word	0x200003f4
 8005034:	200003ec 	.word	0x200003ec

08005038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <vTaskSuspendAll+0x18>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a03      	ldr	r2, [pc, #12]	; (8005050 <vTaskSuspendAll+0x18>)
 8005044:	6013      	str	r3, [r2, #0]
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000410 	.word	0x20000410

08005054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <xTaskResumeAll+0x114>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <xTaskResumeAll+0x2a>
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	e7fe      	b.n	800507c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800507e:	f000 fdd5 	bl	8005c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <xTaskResumeAll+0x114>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3b01      	subs	r3, #1
 8005088:	4a37      	ldr	r2, [pc, #220]	; (8005168 <xTaskResumeAll+0x114>)
 800508a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <xTaskResumeAll+0x114>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d161      	bne.n	8005158 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005094:	4b35      	ldr	r3, [pc, #212]	; (800516c <xTaskResumeAll+0x118>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d05d      	beq.n	8005158 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800509c:	e02e      	b.n	80050fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800509e:	4b34      	ldr	r3, [pc, #208]	; (8005170 <xTaskResumeAll+0x11c>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3318      	adds	r3, #24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fa63 	bl	8004576 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fa5e 	bl	8004576 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	2201      	movs	r2, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <xTaskResumeAll+0x120>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <xTaskResumeAll+0x120>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a27      	ldr	r2, [pc, #156]	; (8005178 <xTaskResumeAll+0x124>)
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7ff f9ea 	bl	80044bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b23      	ldr	r3, [pc, #140]	; (800517c <xTaskResumeAll+0x128>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <xTaskResumeAll+0x12c>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050fc:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <xTaskResumeAll+0x11c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1cc      	bne.n	800509e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800510a:	f000 fba9 	bl	8005860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <xTaskResumeAll+0x130>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800511a:	f000 f837 	bl	800518c <xTaskIncrementTick>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <xTaskResumeAll+0x12c>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f1      	bne.n	800511a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <xTaskResumeAll+0x130>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <xTaskResumeAll+0x12c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <xTaskResumeAll+0x134>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005158:	f000 fd96 	bl	8005c88 <vPortExitCritical>

	return xAlreadyYielded;
 800515c:	68bb      	ldr	r3, [r7, #8]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000410 	.word	0x20000410
 800516c:	200003e8 	.word	0x200003e8
 8005170:	200003a8 	.word	0x200003a8
 8005174:	200003f0 	.word	0x200003f0
 8005178:	200002ec 	.word	0x200002ec
 800517c:	200002e8 	.word	0x200002e8
 8005180:	200003fc 	.word	0x200003fc
 8005184:	200003f8 	.word	0x200003f8
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005196:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <xTaskIncrementTick+0x14c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 808c 	bne.w	80052b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051a0:	4b4e      	ldr	r3, [pc, #312]	; (80052dc <xTaskIncrementTick+0x150>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051a8:	4a4c      	ldr	r2, [pc, #304]	; (80052dc <xTaskIncrementTick+0x150>)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11f      	bne.n	80051f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b4:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <xTaskIncrementTick+0x154>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <xTaskIncrementTick+0x46>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e7fe      	b.n	80051d0 <xTaskIncrementTick+0x44>
 80051d2:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <xTaskIncrementTick+0x154>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <xTaskIncrementTick+0x158>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a40      	ldr	r2, [pc, #256]	; (80052e0 <xTaskIncrementTick+0x154>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <xTaskIncrementTick+0x158>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <xTaskIncrementTick+0x15c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	4a3e      	ldr	r2, [pc, #248]	; (80052e8 <xTaskIncrementTick+0x15c>)
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	f000 fb36 	bl	8005860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051f4:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <xTaskIncrementTick+0x160>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d34d      	bcc.n	800529a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fe:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <xTaskIncrementTick+0x154>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <xTaskIncrementTick+0x80>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <xTaskIncrementTick+0x82>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005212:	4b36      	ldr	r3, [pc, #216]	; (80052ec <xTaskIncrementTick+0x160>)
 8005214:	f04f 32ff 	mov.w	r2, #4294967295
 8005218:	601a      	str	r2, [r3, #0]
					break;
 800521a:	e03e      	b.n	800529a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <xTaskIncrementTick+0x154>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d203      	bcs.n	800523c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005234:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <xTaskIncrementTick+0x160>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6013      	str	r3, [r2, #0]
						break;
 800523a:	e02e      	b.n	800529a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3304      	adds	r3, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff f998 	bl	8004576 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3318      	adds	r3, #24
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff f98f 	bl	8004576 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	2201      	movs	r2, #1
 800525e:	409a      	lsls	r2, r3
 8005260:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <xTaskIncrementTick+0x164>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4313      	orrs	r3, r2
 8005266:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <xTaskIncrementTick+0x164>)
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <xTaskIncrementTick+0x168>)
 8005278:	441a      	add	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7ff f91b 	bl	80044bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <xTaskIncrementTick+0x16c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	429a      	cmp	r2, r3
 8005292:	d3b4      	bcc.n	80051fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005298:	e7b1      	b.n	80051fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <xTaskIncrementTick+0x16c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4914      	ldr	r1, [pc, #80]	; (80052f4 <xTaskIncrementTick+0x168>)
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d907      	bls.n	80052c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e004      	b.n	80052c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <xTaskIncrementTick+0x170>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a0f      	ldr	r2, [pc, #60]	; (80052fc <xTaskIncrementTick+0x170>)
 80052c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052c2:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <xTaskIncrementTick+0x174>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000410 	.word	0x20000410
 80052dc:	200003ec 	.word	0x200003ec
 80052e0:	200003a0 	.word	0x200003a0
 80052e4:	200003a4 	.word	0x200003a4
 80052e8:	20000400 	.word	0x20000400
 80052ec:	20000408 	.word	0x20000408
 80052f0:	200003f0 	.word	0x200003f0
 80052f4:	200002ec 	.word	0x200002ec
 80052f8:	200002e8 	.word	0x200002e8
 80052fc:	200003f8 	.word	0x200003f8
 8005300:	200003fc 	.word	0x200003fc

08005304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <vTaskSwitchContext+0xa0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005312:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <vTaskSwitchContext+0xa4>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005318:	e03e      	b.n	8005398 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <vTaskSwitchContext+0xa4>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005320:	4b22      	ldr	r3, [pc, #136]	; (80053ac <vTaskSwitchContext+0xa8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	f1c3 031f 	rsb	r3, r3, #31
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	491e      	ldr	r1, [pc, #120]	; (80053b0 <vTaskSwitchContext+0xac>)
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <vTaskSwitchContext+0x5a>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	e7fe      	b.n	800535c <vTaskSwitchContext+0x58>
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <vTaskSwitchContext+0xac>)
 800536a:	4413      	add	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3308      	adds	r3, #8
 8005380:	429a      	cmp	r2, r3
 8005382:	d104      	bne.n	800538e <vTaskSwitchContext+0x8a>
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <vTaskSwitchContext+0xb0>)
 8005396:	6013      	str	r3, [r2, #0]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000410 	.word	0x20000410
 80053a8:	200003fc 	.word	0x200003fc
 80053ac:	200003f0 	.word	0x200003f0
 80053b0:	200002ec 	.word	0x200002ec
 80053b4:	200002e8 	.word	0x200002e8

080053b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <vTaskPlaceOnEventList+0x24>
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e7fe      	b.n	80053da <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <vTaskPlaceOnEventList+0x44>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3318      	adds	r3, #24
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f88d 	bl	8004504 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ea:	2101      	movs	r1, #1
 80053ec:	6838      	ldr	r0, [r7, #0]
 80053ee:	f000 fa93 	bl	8005918 <prvAddCurrentTaskToDelayedList>
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200002e8 	.word	0x200002e8

08005400 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <vTaskPlaceOnUnorderedEventList+0x26>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e7fe      	b.n	8005424 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005426:	4b11      	ldr	r3, [pc, #68]	; (800546c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <vTaskPlaceOnUnorderedEventList+0x42>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	e7fe      	b.n	8005440 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800544c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3318      	adds	r3, #24
 8005454:	4619      	mov	r1, r3
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff f830 	bl	80044bc <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800545c:	2101      	movs	r1, #1
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa5a 	bl	8005918 <prvAddCurrentTaskToDelayedList>
}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000410 	.word	0x20000410
 8005470:	200002e8 	.word	0x200002e8

08005474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <xTaskRemoveFromEventList+0x2a>
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e7fe      	b.n	800549c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3318      	adds	r3, #24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f867 	bl	8004576 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <xTaskRemoveFromEventList+0xac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11c      	bne.n	80054ea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f85e 	bl	8004576 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	2201      	movs	r2, #1
 80054c0:	409a      	lsls	r2, r3
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <xTaskRemoveFromEventList+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <xTaskRemoveFromEventList+0xb0>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <xTaskRemoveFromEventList+0xb4>)
 80054da:	441a      	add	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fe ffea 	bl	80044bc <vListInsertEnd>
 80054e8:	e005      	b.n	80054f6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3318      	adds	r3, #24
 80054ee:	4619      	mov	r1, r3
 80054f0:	480e      	ldr	r0, [pc, #56]	; (800552c <xTaskRemoveFromEventList+0xb8>)
 80054f2:	f7fe ffe3 	bl	80044bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <xTaskRemoveFromEventList+0xbc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	429a      	cmp	r2, r3
 8005502:	d905      	bls.n	8005510 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <xTaskRemoveFromEventList+0xc0>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e001      	b.n	8005514 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000410 	.word	0x20000410
 8005524:	200003f0 	.word	0x200003f0
 8005528:	200002ec 	.word	0x200002ec
 800552c:	200003a8 	.word	0x200003a8
 8005530:	200002e8 	.word	0x200002e8
 8005534:	200003fc 	.word	0x200003fc

08005538 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005542:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <vTaskRemoveFromUnorderedEventList+0x26>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e7fe      	b.n	800555c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <vTaskRemoveFromUnorderedEventList+0x50>
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e7fe      	b.n	8005586 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fe fff4 	bl	8004576 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe ffef 	bl	8004576 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	2201      	movs	r2, #1
 800559e:	409a      	lsls	r2, r3
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	4a10      	ldr	r2, [pc, #64]	; (80055e8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 80055b8:	441a      	add	r2, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe ff7b 	bl	80044bc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d902      	bls.n	80055da <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80055d4:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
	}
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000410 	.word	0x20000410
 80055e8:	200003f0 	.word	0x200003f0
 80055ec:	200002ec 	.word	0x200002ec
 80055f0:	200002e8 	.word	0x200002e8
 80055f4:	200003fc 	.word	0x200003fc

080055f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <vTaskInternalSetTimeOutState+0x24>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <vTaskInternalSetTimeOutState+0x28>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000400 	.word	0x20000400
 8005620:	200003ec 	.word	0x200003ec

08005624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <xTaskCheckForTimeOut+0x24>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e7fe      	b.n	8005646 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <xTaskCheckForTimeOut+0x3e>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e7fe      	b.n	8005660 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005662:	f000 fae3 	bl	8005c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <xTaskCheckForTimeOut+0xb8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d102      	bne.n	8005686 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e023      	b.n	80056ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <xTaskCheckForTimeOut+0xbc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d007      	beq.n	80056a2 <xTaskCheckForTimeOut+0x7e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e015      	b.n	80056ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d20b      	bcs.n	80056c4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff9d 	bl	80055f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e004      	b.n	80056ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f000 fadb 	bl	8005c88 <vPortExitCritical>

	return xReturn;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200003ec 	.word	0x200003ec
 80056e0:	20000400 	.word	0x20000400

080056e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <vTaskMissedYield+0x14>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	200003fc 	.word	0x200003fc

080056fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005704:	f000 f852 	bl	80057ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <prvIdleTask+0x28>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d9f9      	bls.n	8005704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <prvIdleTask+0x2c>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005720:	e7f0      	b.n	8005704 <prvIdleTask+0x8>
 8005722:	bf00      	nop
 8005724:	200002ec 	.word	0x200002ec
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e00c      	b.n	8005752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <prvInitialiseTaskLists+0x60>)
 8005744:	4413      	add	r3, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fe8b 	bl	8004462 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b06      	cmp	r3, #6
 8005756:	d9ef      	bls.n	8005738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005758:	480d      	ldr	r0, [pc, #52]	; (8005790 <prvInitialiseTaskLists+0x64>)
 800575a:	f7fe fe82 	bl	8004462 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575e:	480d      	ldr	r0, [pc, #52]	; (8005794 <prvInitialiseTaskLists+0x68>)
 8005760:	f7fe fe7f 	bl	8004462 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005764:	480c      	ldr	r0, [pc, #48]	; (8005798 <prvInitialiseTaskLists+0x6c>)
 8005766:	f7fe fe7c 	bl	8004462 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800576a:	480c      	ldr	r0, [pc, #48]	; (800579c <prvInitialiseTaskLists+0x70>)
 800576c:	f7fe fe79 	bl	8004462 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005770:	480b      	ldr	r0, [pc, #44]	; (80057a0 <prvInitialiseTaskLists+0x74>)
 8005772:	f7fe fe76 	bl	8004462 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvInitialiseTaskLists+0x78>)
 8005778:	4a05      	ldr	r2, [pc, #20]	; (8005790 <prvInitialiseTaskLists+0x64>)
 800577a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvInitialiseTaskLists+0x7c>)
 800577e:	4a05      	ldr	r2, [pc, #20]	; (8005794 <prvInitialiseTaskLists+0x68>)
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200002ec 	.word	0x200002ec
 8005790:	20000378 	.word	0x20000378
 8005794:	2000038c 	.word	0x2000038c
 8005798:	200003a8 	.word	0x200003a8
 800579c:	200003bc 	.word	0x200003bc
 80057a0:	200003d4 	.word	0x200003d4
 80057a4:	200003a0 	.word	0x200003a0
 80057a8:	200003a4 	.word	0x200003a4

080057ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b2:	e019      	b.n	80057e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b4:	f000 fa3a 	bl	8005c2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <prvCheckTasksWaitingTermination+0x4c>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fed6 	bl	8004576 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <prvCheckTasksWaitingTermination+0x50>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <prvCheckTasksWaitingTermination+0x50>)
 80057d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057de:	f000 fa53 	bl	8005c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f80e 	bl	8005804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e1      	bne.n	80057b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200003bc 	.word	0x200003bc
 80057fc:	200003e8 	.word	0x200003e8
 8005800:	200003d0 	.word	0x200003d0

08005804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fbe2 	bl	8005fe4 <vPortFree>
				vPortFree( pxTCB );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fbdf 	bl	8005fe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005826:	e017      	b.n	8005858 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800582e:	2b01      	cmp	r3, #1
 8005830:	d103      	bne.n	800583a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fbd6 	bl	8005fe4 <vPortFree>
	}
 8005838:	e00e      	b.n	8005858 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005840:	2b02      	cmp	r3, #2
 8005842:	d009      	beq.n	8005858 <prvDeleteTCB+0x54>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e7fe      	b.n	8005856 <prvDeleteTCB+0x52>
	}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <prvResetNextTaskUnblockTime+0x44>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <prvResetNextTaskUnblockTime+0x14>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <prvResetNextTaskUnblockTime+0x16>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvResetNextTaskUnblockTime+0x48>)
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005882:	e008      	b.n	8005896 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <prvResetNextTaskUnblockTime+0x44>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvResetNextTaskUnblockTime+0x48>)
 8005894:	6013      	str	r3, [r2, #0]
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	200003a0 	.word	0x200003a0
 80058a8:	20000408 	.word	0x20000408

080058ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <xTaskGetSchedulerState+0x34>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ba:	2301      	movs	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	e008      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <xTaskGetSchedulerState+0x38>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c8:	2302      	movs	r3, #2
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e001      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058d2:	687b      	ldr	r3, [r7, #4]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	200003f4 	.word	0x200003f4
 80058e4:	20000410 	.word	0x20000410

080058e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <uxTaskResetEventItemValue+0x2c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <uxTaskResetEventItemValue+0x2c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <uxTaskResetEventItemValue+0x2c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1c2 0207 	rsb	r2, r2, #7
 8005904:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005906:	687b      	ldr	r3, [r7, #4]
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	200002e8 	.word	0x200002e8

08005918 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005928:	4b28      	ldr	r3, [pc, #160]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3304      	adds	r3, #4
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe21 	bl	8004576 <uxListRemove>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2201      	movs	r2, #1
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43da      	mvns	r2, r3
 8005948:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4013      	ands	r3, r2
 800594e:	4a20      	ldr	r2, [pc, #128]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d10a      	bne.n	8005970 <prvAddCurrentTaskToDelayedList+0x58>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	481a      	ldr	r0, [pc, #104]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800596a:	f7fe fda7 	bl	80044bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800596e:	e026      	b.n	80059be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005978:	4b14      	ldr	r3, [pc, #80]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	429a      	cmp	r2, r3
 8005986:	d209      	bcs.n	800599c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005988:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3304      	adds	r3, #4
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f7fe fdb5 	bl	8004504 <vListInsert>
}
 800599a:	e010      	b.n	80059be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe fdab 	bl	8004504 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d202      	bcs.n	80059be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059b8:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200003ec 	.word	0x200003ec
 80059cc:	200002e8 	.word	0x200002e8
 80059d0:	200003f0 	.word	0x200003f0
 80059d4:	200003d4 	.word	0x200003d4
 80059d8:	200003a4 	.word	0x200003a4
 80059dc:	200003a0 	.word	0x200003a0
 80059e0:	20000408 	.word	0x20000408

080059e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3b04      	subs	r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3b04      	subs	r3, #4
 8005a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0201 	bic.w	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a14:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <pxPortInitialiseStack+0x64>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3b14      	subs	r3, #20
 8005a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f06f 0202 	mvn.w	r2, #2
 8005a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b20      	subs	r3, #32
 8005a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	08005a4d 	.word	0x08005a4d

08005a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <prvTaskExitError+0x50>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d009      	beq.n	8005a74 <prvTaskExitError+0x28>
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e7fe      	b.n	8005a72 <prvTaskExitError+0x26>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a86:	bf00      	nop
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0fc      	beq.n	8005a88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <pxCurrentTCBConst2>)
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	6808      	ldr	r0, [r1, #0]
 8005aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	f380 8809 	msr	PSP, r0
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8811 	msr	BASEPRI, r0
 8005aba:	4770      	bx	lr
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst2>:
 8005ac0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ac8:	4808      	ldr	r0, [pc, #32]	; (8005aec <prvPortStartFirstTask+0x24>)
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f380 8808 	msr	MSP, r0
 8005ad2:	f04f 0000 	mov.w	r0, #0
 8005ad6:	f380 8814 	msr	CONTROL, r0
 8005ada:	b662      	cpsie	i
 8005adc:	b661      	cpsie	f
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	df00      	svc	0
 8005ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aea:	bf00      	nop
 8005aec:	e000ed08 	.word	0xe000ed08

08005af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <xPortStartScheduler+0x118>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a44      	ldr	r2, [pc, #272]	; (8005c0c <xPortStartScheduler+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d109      	bne.n	8005b14 <xPortStartScheduler+0x24>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e7fe      	b.n	8005b12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <xPortStartScheduler+0x118>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3d      	ldr	r2, [pc, #244]	; (8005c10 <xPortStartScheduler+0x120>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d109      	bne.n	8005b32 <xPortStartScheduler+0x42>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e7fe      	b.n	8005b30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b32:	4b38      	ldr	r3, [pc, #224]	; (8005c14 <xPortStartScheduler+0x124>)
 8005b34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <xPortStartScheduler+0x128>)
 8005b58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b5c:	2207      	movs	r2, #7
 8005b5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b60:	e009      	b.n	8005b76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b62:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a2c      	ldr	r2, [pc, #176]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d0ef      	beq.n	8005b62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1c3 0307 	rsb	r3, r3, #7
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d009      	beq.n	8005ba2 <xPortStartScheduler+0xb2>
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	e7fe      	b.n	8005ba0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb4:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bd8:	f000 f8d6 	bl	8005d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bdc:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <xPortStartScheduler+0x134>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005be2:	f000 f8f5 	bl	8005dd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xPortStartScheduler+0x138>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <xPortStartScheduler+0x138>)
 8005bec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bf2:	f7ff ff69 	bl	8005ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf6:	f7ff fb85 	bl	8005304 <vTaskSwitchContext>
	prvTaskExitError();
 8005bfa:	f7ff ff27 	bl	8005a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed00 	.word	0xe000ed00
 8005c0c:	410fc271 	.word	0x410fc271
 8005c10:	410fc270 	.word	0x410fc270
 8005c14:	e000e400 	.word	0xe000e400
 8005c18:	20000414 	.word	0x20000414
 8005c1c:	20000418 	.word	0x20000418
 8005c20:	e000ed20 	.word	0xe000ed20
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	e000ef34 	.word	0xe000ef34

08005c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10e      	bne.n	8005c74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <vPortEnterCritical+0x58>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <vPortEnterCritical+0x48>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	e7fe      	b.n	8005c72 <vPortEnterCritical+0x46>
	}
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <vPortExitCritical+0x22>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e7fe      	b.n	8005ca8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <vPortExitCritical+0x3e>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c
	...

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f01e 0f10 	tst.w	lr, #16
 8005cf0:	bf08      	it	eq
 8005cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d04:	f380 8811 	msr	BASEPRI, r0
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f7ff faf8 	bl	8005304 <vTaskSwitchContext>
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f380 8811 	msr	BASEPRI, r0
 8005d1c:	bc09      	pop	{r0, r3}
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d26:	f01e 0f10 	tst.w	lr, #16
 8005d2a:	bf08      	it	eq
 8005d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d30:	f380 8809 	msr	PSP, r0
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst>:
 8005d40:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d60:	f7ff fa14 	bl	800518c <xTaskIncrementTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <SysTick_Handler+0x3c>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	2300      	movs	r3, #0
 8005d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <vPortSetupTimerInterrupt+0x34>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <vPortSetupTimerInterrupt+0x38>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <vPortSetupTimerInterrupt+0x3c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <vPortSetupTimerInterrupt+0x40>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <vPortSetupTimerInterrupt+0x44>)
 8005da6:	3b01      	subs	r3, #1
 8005da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <vPortSetupTimerInterrupt+0x34>)
 8005dac:	2207      	movs	r2, #7
 8005dae:	601a      	str	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	e000e010 	.word	0xe000e010
 8005dc0:	e000e018 	.word	0xe000e018
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	10624dd3 	.word	0x10624dd3
 8005dcc:	e000e014 	.word	0xe000e014

08005dd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005de0 <vPortEnableVFP+0x10>
 8005dd4:	6801      	ldr	r1, [r0, #0]
 8005dd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dda:	6001      	str	r1, [r0, #0]
 8005ddc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dde:	bf00      	nop
 8005de0:	e000ed88 	.word	0xe000ed88

08005de4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dea:	f3ef 8305 	mrs	r3, IPSR
 8005dee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d913      	bls.n	8005e1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <vPortValidateInterruptPriority+0x6c>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e00:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <vPortValidateInterruptPriority+0x70>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	7afa      	ldrb	r2, [r7, #11]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d209      	bcs.n	8005e1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	e7fe      	b.n	8005e1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <vPortValidateInterruptPriority+0x74>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <vPortValidateInterruptPriority+0x78>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d909      	bls.n	8005e42 <vPortValidateInterruptPriority+0x5e>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	e7fe      	b.n	8005e40 <vPortValidateInterruptPriority+0x5c>
	}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e3f0 	.word	0xe000e3f0
 8005e54:	20000414 	.word	0x20000414
 8005e58:	e000ed0c 	.word	0xe000ed0c
 8005e5c:	20000418 	.word	0x20000418

08005e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e6c:	f7ff f8e4 	bl	8005038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e70:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <pvPortMalloc+0x170>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e78:	f000 f90c 	bl	8006094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e7c:	4b55      	ldr	r3, [pc, #340]	; (8005fd4 <pvPortMalloc+0x174>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 808c 	bne.w	8005fa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01c      	beq.n	8005eca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e90:	2208      	movs	r2, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f023 0307 	bic.w	r3, r3, #7
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <pvPortMalloc+0x6a>
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e7fe      	b.n	8005ec8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d068      	beq.n	8005fa2 <pvPortMalloc+0x142>
 8005ed0:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <pvPortMalloc+0x178>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d863      	bhi.n	8005fa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eda:	4b40      	ldr	r3, [pc, #256]	; (8005fdc <pvPortMalloc+0x17c>)
 8005edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ede:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <pvPortMalloc+0x17c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ee4:	e004      	b.n	8005ef0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d903      	bls.n	8005f02 <pvPortMalloc+0xa2>
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f1      	bne.n	8005ee6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f02:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <pvPortMalloc+0x170>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d04a      	beq.n	8005fa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2208      	movs	r2, #8
 8005f12:	4413      	add	r3, r2
 8005f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	2308      	movs	r3, #8
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d91e      	bls.n	8005f6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <pvPortMalloc+0xf4>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e7fe      	b.n	8005f52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f66:	69b8      	ldr	r0, [r7, #24]
 8005f68:	f000 f8f6 	bl	8006158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <pvPortMalloc+0x180>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d203      	bcs.n	8005f8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <pvPortMalloc+0x180>)
 8005f8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <pvPortMalloc+0x174>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fa2:	f7ff f857 	bl	8005054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <pvPortMalloc+0x164>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e7fe      	b.n	8005fc2 <pvPortMalloc+0x162>
	return pvReturn;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3728      	adds	r7, #40	; 0x28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20001024 	.word	0x20001024
 8005fd4:	20001030 	.word	0x20001030
 8005fd8:	20001028 	.word	0x20001028
 8005fdc:	2000101c 	.word	0x2000101c
 8005fe0:	2000102c 	.word	0x2000102c

08005fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d046      	beq.n	8006084 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <vPortFree+0xa8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <vPortFree+0x42>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e7fe      	b.n	8006024 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <vPortFree+0x5e>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	e7fe      	b.n	8006040 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <vPortFree+0xa8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <vPortFree+0xa8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006068:	f7fe ffe6 	bl	8005038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vPortFree+0xac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	4a06      	ldr	r2, [pc, #24]	; (8006090 <vPortFree+0xac>)
 8006078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 f86c 	bl	8006158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006080:	f7fe ffe8 	bl	8005054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20001030 	.word	0x20001030
 8006090:	20001028 	.word	0x20001028

08006094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800609a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800609e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <prvHeapInit+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <prvHeapInit+0xac>)
 80060c4:	4413      	add	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <prvHeapInit+0xb0>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <prvHeapInit+0xb0>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060e0:	2208      	movs	r2, #8
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <prvHeapInit+0xb4>)
 80060f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <prvHeapInit+0xb4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <prvHeapInit+0xb4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvHeapInit+0xb4>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <prvHeapInit+0xb8>)
 8006122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <prvHeapInit+0xbc>)
 800612a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <prvHeapInit+0xc0>)
 800612e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	2000041c 	.word	0x2000041c
 8006144:	2000101c 	.word	0x2000101c
 8006148:	20001024 	.word	0x20001024
 800614c:	2000102c 	.word	0x2000102c
 8006150:	20001028 	.word	0x20001028
 8006154:	20001030 	.word	0x20001030

08006158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <prvInsertBlockIntoFreeList+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e002      	b.n	800616c <prvInsertBlockIntoFreeList+0x14>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d8f7      	bhi.n	8006166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4413      	add	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d108      	bne.n	800619a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	441a      	add	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	441a      	add	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d118      	bne.n	80061e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d00d      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e008      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e003      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d002      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000101c 	.word	0x2000101c
 8006208:	20001024 	.word	0x20001024

0800620c <init_uart_data_transfer>:

uint8_t rx_uart_data[MAX_SIZE_RX_UART_DATA] = {};
EventGroupHandle_t uart_data_transfer_events = 0;
_Bool enable_idle_flag_interrupt = 0;

void init_uart_data_transfer (void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
	enable_idle_flag_interrupt = true;
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <init_uart_data_transfer+0x28>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <init_uart_data_transfer+0x2c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <init_uart_data_transfer+0x2c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0210 	orr.w	r2, r2, #16
 8006224:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8006226:	2264      	movs	r2, #100	; 0x64
 8006228:	4904      	ldr	r1, [pc, #16]	; (800623c <init_uart_data_transfer+0x30>)
 800622a:	4803      	ldr	r0, [pc, #12]	; (8006238 <init_uart_data_transfer+0x2c>)
 800622c:	f7fd f82a 	bl	8003284 <HAL_UART_Receive_DMA>
}
 8006230:	bf00      	nop
 8006232:	bd80      	pop	{r7, pc}
 8006234:	2000109c 	.word	0x2000109c
 8006238:	20001174 	.word	0x20001174
 800623c:	20001034 	.word	0x20001034

08006240 <HAL_UART_IDLE_Callback>:
//void function_for_call_transmit_data (void) {
//	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
//}


void HAL_UART_IDLE_Callback (UART_HandleTypeDef *huart) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2210      	movs	r2, #16
 800624e:	621a      	str	r2, [r3, #32]

	if(enable_idle_flag_interrupt){
 8006250:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <HAL_UART_IDLE_Callback+0x48>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_UART_IDLE_Callback+0x20>
		enable_idle_flag_interrupt = false;
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_UART_IDLE_Callback+0x48>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
		return;
 800625e:	e010      	b.n	8006282 <HAL_UART_IDLE_Callback+0x42>
	}
	HAL_UART_AbortReceive(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fd f893 	bl	800338c <HAL_UART_AbortReceive>
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0210 	bic.w	r2, r2, #16
 8006274:	601a      	str	r2, [r3, #0]

	xEventGroupSetBits(uart_data_transfer_events, RX_DATA_COMPLETE);
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_UART_IDLE_Callback+0x4c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe f845 	bl	800430c <xEventGroupSetBits>
}
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	2000109c 	.word	0x2000109c
 800628c:	20001098 	.word	0x20001098

08006290 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(uart_data_transfer_events, TX_DATA_COMPLETE);
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <HAL_UART_TxHalfCpltCallback+0x1c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2102      	movs	r1, #2
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe f834 	bl	800430c <xEventGroupSetBits>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20001098 	.word	0x20001098

080062b0 <rx_uart_data_task>:

void rx_uart_data_task (void const * argument) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	6078      	str	r0, [r7, #4]
	xEventGroupWaitBits(uart_data_transfer_events, RX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <rx_uart_data_task+0x34>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2301      	movs	r3, #1
 80062c4:	2201      	movs	r2, #1
 80062c6:	2101      	movs	r1, #1
 80062c8:	f7fd ff56 	bl	8004178 <xEventGroupWaitBits>

	asm("nop");
 80062cc:	bf00      	nop



	*/
	// while not have parse call
	xEventGroupSetBits(uart_data_transfer_events, NEED_TRANSMIT_DATA);
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <rx_uart_data_task+0x34>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2104      	movs	r1, #4
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe f819 	bl	800430c <xEventGroupSetBits>
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20001098 	.word	0x20001098

080062e8 <tx_uart_data_task>:

void tx_uart_data_task(void const * argument) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
	uint8_t * tx_data = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]

	xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, NEED_TRANSMIT_DATA);
 80062f4:	4b1c      	ldr	r3, [pc, #112]	; (8006368 <tx_uart_data_task+0x80>)
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	2304      	movs	r3, #4
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2301      	movs	r3, #1
 80062fe:	2201      	movs	r2, #1
 8006300:	2102      	movs	r1, #2
 8006302:	f7fd ff39 	bl	8004178 <xEventGroupWaitBits>

	//get pointer tx_data
//	tx_data = GET_POINTER_FUNCTION

	if(tx_data != 0)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <tx_uart_data_task+0x3a>
		HAL_UART_Transmit_DMA(&huart1, tx_data, strlen((const char*)tx_data));
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7f9 ff5f 	bl	80001d0 <strlen>
 8006312:	4603      	mov	r3, r0
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	4814      	ldr	r0, [pc, #80]	; (800636c <tx_uart_data_task+0x84>)
 800631c:	f7fc ff36 	bl	800318c <HAL_UART_Transmit_DMA>
 8006320:	e004      	b.n	800632c <tx_uart_data_task+0x44>
	else
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"debug message or error", strlen("debug message or error"));
 8006322:	2216      	movs	r2, #22
 8006324:	4912      	ldr	r1, [pc, #72]	; (8006370 <tx_uart_data_task+0x88>)
 8006326:	4811      	ldr	r0, [pc, #68]	; (800636c <tx_uart_data_task+0x84>)
 8006328:	f7fc ff30 	bl	800318c <HAL_UART_Transmit_DMA>

	xEventGroupWaitBits(uart_data_transfer_events, TX_DATA_COMPLETE, pdTRUE, pdTRUE, portMAX_DELAY );
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <tx_uart_data_task+0x80>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2301      	movs	r3, #1
 8006338:	2201      	movs	r2, #1
 800633a:	2102      	movs	r1, #2
 800633c:	f7fd ff1c 	bl	8004178 <xEventGroupWaitBits>

	enable_idle_flag_interrupt = true;
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <tx_uart_data_task+0x8c>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8006346:	4b09      	ldr	r3, [pc, #36]	; (800636c <tx_uart_data_task+0x84>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <tx_uart_data_task+0x84>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0210 	orr.w	r2, r2, #16
 8006354:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rx_uart_data, MAX_SIZE_RX_UART_DATA);
 8006356:	2264      	movs	r2, #100	; 0x64
 8006358:	4907      	ldr	r1, [pc, #28]	; (8006378 <tx_uart_data_task+0x90>)
 800635a:	4804      	ldr	r0, [pc, #16]	; (800636c <tx_uart_data_task+0x84>)
 800635c:	f7fc ff92 	bl	8003284 <HAL_UART_Receive_DMA>
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20001098 	.word	0x20001098
 800636c:	20001174 	.word	0x20001174
 8006370:	0800649c 	.word	0x0800649c
 8006374:	2000109c 	.word	0x2000109c
 8006378:	20001034 	.word	0x20001034

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f82c 	bl	80063ec <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	080064ec 	.word	0x080064ec
 80063b8:	080064ec 	.word	0x080064ec
 80063bc:	080064ec 	.word	0x080064ec
 80063c0:	080064f0 	.word	0x080064f0

080063c4 <memcpy>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	1e43      	subs	r3, r0, #1
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	bd10      	pop	{r4, pc}
 80063d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d8:	e7f7      	b.n	80063ca <memcpy+0x6>

080063da <memset>:
 80063da:	4402      	add	r2, r0
 80063dc:	4603      	mov	r3, r0
 80063de:	4293      	cmp	r3, r2
 80063e0:	d100      	bne.n	80063e4 <memset+0xa>
 80063e2:	4770      	bx	lr
 80063e4:	f803 1b01 	strb.w	r1, [r3], #1
 80063e8:	e7f9      	b.n	80063de <memset+0x4>
	...

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
